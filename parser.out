Created by PLY version 3.10 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> start
Rule 1     start -> code_entity
Rule 2     code_entity -> iterative_statement
Rule 3     code_entity -> conditional_statement
Rule 4     code_entity -> expression
Rule 5     code_entity -> input_function
Rule 6     code_entity -> output_function
Rule 7     iterative_statement -> WHILE expression COLON start ENDWHILE
Rule 8     iterative_statement -> FOR expression COMMA expression COMMA expression COLON start ENDFOR
Rule 9     conditional_statement -> IF expression then_statement else_statement ENDIF
Rule 10    conditional_statement -> IF expression then_statement ENDIF
Rule 11    then_statement -> COLON start
Rule 12    else_statement -> ELSE start
Rule 13    expression -> assignment_statement
Rule 14    assignment_statement -> or_statement
Rule 15    assignment_statement -> IDENTIFIER EQUALS or_statement
Rule 16    or_statement -> and_statement
Rule 17    or_statement -> or_statement OR and_statement
Rule 18    and_statement -> equality_statement
Rule 19    and_statement -> and_statement AND equality_statement
Rule 20    equality_statement -> relational_statement
Rule 21    equality_statement -> equality_statement EQ relational_statement
Rule 22    equality_statement -> equality_statement NEQ relational_statement
Rule 23    relational_statement -> add_statement
Rule 24    relational_statement -> relational_statement LT add_statement
Rule 25    relational_statement -> relational_statement GT add_statement
Rule 26    relational_statement -> relational_statement LTEQ add_statement
Rule 27    relational_statement -> relational_statement GTEQ add_statement
Rule 28    add_statement -> multiply_statement
Rule 29    add_statement -> add_statement PLUS multiply_statement
Rule 30    add_statement -> add_statement MINUS multiply_statement
Rule 31    multiply_statement -> unary_statement
Rule 32    multiply_statement -> multiply_statement TIMES unary_statement
Rule 33    multiply_statement -> multiply_statement DIVIDE unary_statement
Rule 34    multiply_statement -> multiply_statement MOD unary_statement
Rule 35    unary_statement -> exponent
Rule 36    unary_statement -> MINUS unary_statement
Rule 37    unary_statement -> NOT unary_statement
Rule 38    exponent -> term
Rule 39    exponent -> term POWER unary_statement
Rule 40    term -> IDENTIFIER
Rule 41    term -> atom
Rule 42    term -> LPAREN expression RPAREN
Rule 43    atom -> INTEGER
Rule 44    atom -> FLOAT
Rule 45    atom -> CHARACTER
Rule 46    atom -> STRING
Rule 47    atom -> TRUE
Rule 48    atom -> FALSE
Rule 49    atom -> LBRACKET elements RBRACKET
Rule 50    atom -> IDENTIFIER LBRACKET INTEGER RBRACKET
Rule 51    elements -> elements INTEGER
Rule 52    elements -> elements FLOAT
Rule 53    elements -> <empty>
Rule 54    input_function -> INPUT LPAREN IDENTIFIER RPAREN
Rule 55    output_function -> PRINT LPAREN term RPAREN

Terminals, with rules where they appear

AND                  : 19
CHARACTER            : 45
COLON                : 7 8 11
COMMA                : 8 8
DIVIDE               : 33
ELSE                 : 12
ENDFOR               : 8
ENDIF                : 9 10
ENDWHILE             : 7
EQ                   : 21
EQUALS               : 15
FALSE                : 48
FLOAT                : 44 52
FOR                  : 8
GT                   : 25
GTEQ                 : 27
IDENTIFIER           : 15 40 50 54
IF                   : 9 10
INPUT                : 54
INTEGER              : 43 50 51
LBRACKET             : 49 50
LPAREN               : 42 54 55
LT                   : 24
LTEQ                 : 26
MINUS                : 30 36
MOD                  : 34
NEQ                  : 22
NOT                  : 37
OR                   : 17
PLUS                 : 29
POWER                : 39
PRINT                : 55
RBRACKET             : 49 50
RPAREN               : 42 54 55
STRING               : 46
TIMES                : 32
TRUE                 : 47
WHILE                : 7
error                : 

Nonterminals, with rules where they appear

add_statement        : 23 24 25 26 27 29 30
and_statement        : 16 17 19
assignment_statement : 13
atom                 : 41
code_entity          : 1
conditional_statement : 3
elements             : 49 51 52
else_statement       : 9
equality_statement   : 18 19 21 22
exponent             : 35
expression           : 4 7 8 8 8 9 10 42
input_function       : 5
iterative_statement  : 2
multiply_statement   : 28 29 30 32 33 34
or_statement         : 14 15 17
output_function      : 6
relational_statement : 20 21 22 24 25 26 27
start                : 7 8 11 12 0
term                 : 38 39 55
then_statement       : 9 10
unary_statement      : 31 32 33 34 36 37 39

Parsing method: LALR

state 0

    (0) S' -> . start
    (1) start -> . code_entity
    (2) code_entity -> . iterative_statement
    (3) code_entity -> . conditional_statement
    (4) code_entity -> . expression
    (5) code_entity -> . input_function
    (6) code_entity -> . output_function
    (7) iterative_statement -> . WHILE expression COLON start ENDWHILE
    (8) iterative_statement -> . FOR expression COMMA expression COMMA expression COLON start ENDFOR
    (9) conditional_statement -> . IF expression then_statement else_statement ENDIF
    (10) conditional_statement -> . IF expression then_statement ENDIF
    (13) expression -> . assignment_statement
    (54) input_function -> . INPUT LPAREN IDENTIFIER RPAREN
    (55) output_function -> . PRINT LPAREN term RPAREN
    (14) assignment_statement -> . or_statement
    (15) assignment_statement -> . IDENTIFIER EQUALS or_statement
    (16) or_statement -> . and_statement
    (17) or_statement -> . or_statement OR and_statement
    (18) and_statement -> . equality_statement
    (19) and_statement -> . and_statement AND equality_statement
    (20) equality_statement -> . relational_statement
    (21) equality_statement -> . equality_statement EQ relational_statement
    (22) equality_statement -> . equality_statement NEQ relational_statement
    (23) relational_statement -> . add_statement
    (24) relational_statement -> . relational_statement LT add_statement
    (25) relational_statement -> . relational_statement GT add_statement
    (26) relational_statement -> . relational_statement LTEQ add_statement
    (27) relational_statement -> . relational_statement GTEQ add_statement
    (28) add_statement -> . multiply_statement
    (29) add_statement -> . add_statement PLUS multiply_statement
    (30) add_statement -> . add_statement MINUS multiply_statement
    (31) multiply_statement -> . unary_statement
    (32) multiply_statement -> . multiply_statement TIMES unary_statement
    (33) multiply_statement -> . multiply_statement DIVIDE unary_statement
    (34) multiply_statement -> . multiply_statement MOD unary_statement
    (35) unary_statement -> . exponent
    (36) unary_statement -> . MINUS unary_statement
    (37) unary_statement -> . NOT unary_statement
    (38) exponent -> . term
    (39) exponent -> . term POWER unary_statement
    (40) term -> . IDENTIFIER
    (41) term -> . atom
    (42) term -> . LPAREN expression RPAREN
    (43) atom -> . INTEGER
    (44) atom -> . FLOAT
    (45) atom -> . CHARACTER
    (46) atom -> . STRING
    (47) atom -> . TRUE
    (48) atom -> . FALSE
    (49) atom -> . LBRACKET elements RBRACKET
    (50) atom -> . IDENTIFIER LBRACKET INTEGER RBRACKET

    WHILE           shift and go to state 8
    FOR             shift and go to state 9
    IF              shift and go to state 10
    INPUT           shift and go to state 12
    PRINT           shift and go to state 15
    IDENTIFIER      shift and go to state 14
    MINUS           shift and go to state 23
    NOT             shift and go to state 26
    LPAREN          shift and go to state 13
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 29
    CHARACTER       shift and go to state 30
    STRING          shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    LBRACKET        shift and go to state 34

    start                          shift and go to state 1
    code_entity                    shift and go to state 2
    iterative_statement            shift and go to state 3
    conditional_statement          shift and go to state 4
    expression                     shift and go to state 5
    input_function                 shift and go to state 6
    output_function                shift and go to state 7
    assignment_statement           shift and go to state 11
    term                           shift and go to state 16
    or_statement                   shift and go to state 17
    and_statement                  shift and go to state 18
    equality_statement             shift and go to state 19
    relational_statement           shift and go to state 20
    add_statement                  shift and go to state 21
    multiply_statement             shift and go to state 22
    unary_statement                shift and go to state 24
    exponent                       shift and go to state 25
    atom                           shift and go to state 27

state 1

    (0) S' -> start .



state 2

    (1) start -> code_entity .

    $end            reduce using rule 1 (start -> code_entity .)
    ENDWHILE        reduce using rule 1 (start -> code_entity .)
    ENDIF           reduce using rule 1 (start -> code_entity .)
    ELSE            reduce using rule 1 (start -> code_entity .)
    ENDFOR          reduce using rule 1 (start -> code_entity .)


state 3

    (2) code_entity -> iterative_statement .

    $end            reduce using rule 2 (code_entity -> iterative_statement .)
    ENDWHILE        reduce using rule 2 (code_entity -> iterative_statement .)
    ENDIF           reduce using rule 2 (code_entity -> iterative_statement .)
    ELSE            reduce using rule 2 (code_entity -> iterative_statement .)
    ENDFOR          reduce using rule 2 (code_entity -> iterative_statement .)


state 4

    (3) code_entity -> conditional_statement .

    $end            reduce using rule 3 (code_entity -> conditional_statement .)
    ENDWHILE        reduce using rule 3 (code_entity -> conditional_statement .)
    ENDIF           reduce using rule 3 (code_entity -> conditional_statement .)
    ELSE            reduce using rule 3 (code_entity -> conditional_statement .)
    ENDFOR          reduce using rule 3 (code_entity -> conditional_statement .)


state 5

    (4) code_entity -> expression .

    $end            reduce using rule 4 (code_entity -> expression .)
    ENDWHILE        reduce using rule 4 (code_entity -> expression .)
    ENDIF           reduce using rule 4 (code_entity -> expression .)
    ELSE            reduce using rule 4 (code_entity -> expression .)
    ENDFOR          reduce using rule 4 (code_entity -> expression .)


state 6

    (5) code_entity -> input_function .

    $end            reduce using rule 5 (code_entity -> input_function .)
    ENDWHILE        reduce using rule 5 (code_entity -> input_function .)
    ENDIF           reduce using rule 5 (code_entity -> input_function .)
    ELSE            reduce using rule 5 (code_entity -> input_function .)
    ENDFOR          reduce using rule 5 (code_entity -> input_function .)


state 7

    (6) code_entity -> output_function .

    $end            reduce using rule 6 (code_entity -> output_function .)
    ENDWHILE        reduce using rule 6 (code_entity -> output_function .)
    ENDIF           reduce using rule 6 (code_entity -> output_function .)
    ELSE            reduce using rule 6 (code_entity -> output_function .)
    ENDFOR          reduce using rule 6 (code_entity -> output_function .)


state 8

    (7) iterative_statement -> WHILE . expression COLON start ENDWHILE
    (13) expression -> . assignment_statement
    (14) assignment_statement -> . or_statement
    (15) assignment_statement -> . IDENTIFIER EQUALS or_statement
    (16) or_statement -> . and_statement
    (17) or_statement -> . or_statement OR and_statement
    (18) and_statement -> . equality_statement
    (19) and_statement -> . and_statement AND equality_statement
    (20) equality_statement -> . relational_statement
    (21) equality_statement -> . equality_statement EQ relational_statement
    (22) equality_statement -> . equality_statement NEQ relational_statement
    (23) relational_statement -> . add_statement
    (24) relational_statement -> . relational_statement LT add_statement
    (25) relational_statement -> . relational_statement GT add_statement
    (26) relational_statement -> . relational_statement LTEQ add_statement
    (27) relational_statement -> . relational_statement GTEQ add_statement
    (28) add_statement -> . multiply_statement
    (29) add_statement -> . add_statement PLUS multiply_statement
    (30) add_statement -> . add_statement MINUS multiply_statement
    (31) multiply_statement -> . unary_statement
    (32) multiply_statement -> . multiply_statement TIMES unary_statement
    (33) multiply_statement -> . multiply_statement DIVIDE unary_statement
    (34) multiply_statement -> . multiply_statement MOD unary_statement
    (35) unary_statement -> . exponent
    (36) unary_statement -> . MINUS unary_statement
    (37) unary_statement -> . NOT unary_statement
    (38) exponent -> . term
    (39) exponent -> . term POWER unary_statement
    (40) term -> . IDENTIFIER
    (41) term -> . atom
    (42) term -> . LPAREN expression RPAREN
    (43) atom -> . INTEGER
    (44) atom -> . FLOAT
    (45) atom -> . CHARACTER
    (46) atom -> . STRING
    (47) atom -> . TRUE
    (48) atom -> . FALSE
    (49) atom -> . LBRACKET elements RBRACKET
    (50) atom -> . IDENTIFIER LBRACKET INTEGER RBRACKET

    IDENTIFIER      shift and go to state 14
    MINUS           shift and go to state 23
    NOT             shift and go to state 26
    LPAREN          shift and go to state 13
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 29
    CHARACTER       shift and go to state 30
    STRING          shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    LBRACKET        shift and go to state 34

    expression                     shift and go to state 35
    assignment_statement           shift and go to state 11
    or_statement                   shift and go to state 17
    and_statement                  shift and go to state 18
    equality_statement             shift and go to state 19
    relational_statement           shift and go to state 20
    add_statement                  shift and go to state 21
    multiply_statement             shift and go to state 22
    unary_statement                shift and go to state 24
    exponent                       shift and go to state 25
    term                           shift and go to state 16
    atom                           shift and go to state 27

state 9

    (8) iterative_statement -> FOR . expression COMMA expression COMMA expression COLON start ENDFOR
    (13) expression -> . assignment_statement
    (14) assignment_statement -> . or_statement
    (15) assignment_statement -> . IDENTIFIER EQUALS or_statement
    (16) or_statement -> . and_statement
    (17) or_statement -> . or_statement OR and_statement
    (18) and_statement -> . equality_statement
    (19) and_statement -> . and_statement AND equality_statement
    (20) equality_statement -> . relational_statement
    (21) equality_statement -> . equality_statement EQ relational_statement
    (22) equality_statement -> . equality_statement NEQ relational_statement
    (23) relational_statement -> . add_statement
    (24) relational_statement -> . relational_statement LT add_statement
    (25) relational_statement -> . relational_statement GT add_statement
    (26) relational_statement -> . relational_statement LTEQ add_statement
    (27) relational_statement -> . relational_statement GTEQ add_statement
    (28) add_statement -> . multiply_statement
    (29) add_statement -> . add_statement PLUS multiply_statement
    (30) add_statement -> . add_statement MINUS multiply_statement
    (31) multiply_statement -> . unary_statement
    (32) multiply_statement -> . multiply_statement TIMES unary_statement
    (33) multiply_statement -> . multiply_statement DIVIDE unary_statement
    (34) multiply_statement -> . multiply_statement MOD unary_statement
    (35) unary_statement -> . exponent
    (36) unary_statement -> . MINUS unary_statement
    (37) unary_statement -> . NOT unary_statement
    (38) exponent -> . term
    (39) exponent -> . term POWER unary_statement
    (40) term -> . IDENTIFIER
    (41) term -> . atom
    (42) term -> . LPAREN expression RPAREN
    (43) atom -> . INTEGER
    (44) atom -> . FLOAT
    (45) atom -> . CHARACTER
    (46) atom -> . STRING
    (47) atom -> . TRUE
    (48) atom -> . FALSE
    (49) atom -> . LBRACKET elements RBRACKET
    (50) atom -> . IDENTIFIER LBRACKET INTEGER RBRACKET

    IDENTIFIER      shift and go to state 14
    MINUS           shift and go to state 23
    NOT             shift and go to state 26
    LPAREN          shift and go to state 13
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 29
    CHARACTER       shift and go to state 30
    STRING          shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    LBRACKET        shift and go to state 34

    expression                     shift and go to state 36
    assignment_statement           shift and go to state 11
    or_statement                   shift and go to state 17
    and_statement                  shift and go to state 18
    equality_statement             shift and go to state 19
    relational_statement           shift and go to state 20
    add_statement                  shift and go to state 21
    multiply_statement             shift and go to state 22
    unary_statement                shift and go to state 24
    exponent                       shift and go to state 25
    term                           shift and go to state 16
    atom                           shift and go to state 27

state 10

    (9) conditional_statement -> IF . expression then_statement else_statement ENDIF
    (10) conditional_statement -> IF . expression then_statement ENDIF
    (13) expression -> . assignment_statement
    (14) assignment_statement -> . or_statement
    (15) assignment_statement -> . IDENTIFIER EQUALS or_statement
    (16) or_statement -> . and_statement
    (17) or_statement -> . or_statement OR and_statement
    (18) and_statement -> . equality_statement
    (19) and_statement -> . and_statement AND equality_statement
    (20) equality_statement -> . relational_statement
    (21) equality_statement -> . equality_statement EQ relational_statement
    (22) equality_statement -> . equality_statement NEQ relational_statement
    (23) relational_statement -> . add_statement
    (24) relational_statement -> . relational_statement LT add_statement
    (25) relational_statement -> . relational_statement GT add_statement
    (26) relational_statement -> . relational_statement LTEQ add_statement
    (27) relational_statement -> . relational_statement GTEQ add_statement
    (28) add_statement -> . multiply_statement
    (29) add_statement -> . add_statement PLUS multiply_statement
    (30) add_statement -> . add_statement MINUS multiply_statement
    (31) multiply_statement -> . unary_statement
    (32) multiply_statement -> . multiply_statement TIMES unary_statement
    (33) multiply_statement -> . multiply_statement DIVIDE unary_statement
    (34) multiply_statement -> . multiply_statement MOD unary_statement
    (35) unary_statement -> . exponent
    (36) unary_statement -> . MINUS unary_statement
    (37) unary_statement -> . NOT unary_statement
    (38) exponent -> . term
    (39) exponent -> . term POWER unary_statement
    (40) term -> . IDENTIFIER
    (41) term -> . atom
    (42) term -> . LPAREN expression RPAREN
    (43) atom -> . INTEGER
    (44) atom -> . FLOAT
    (45) atom -> . CHARACTER
    (46) atom -> . STRING
    (47) atom -> . TRUE
    (48) atom -> . FALSE
    (49) atom -> . LBRACKET elements RBRACKET
    (50) atom -> . IDENTIFIER LBRACKET INTEGER RBRACKET

    IDENTIFIER      shift and go to state 14
    MINUS           shift and go to state 23
    NOT             shift and go to state 26
    LPAREN          shift and go to state 13
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 29
    CHARACTER       shift and go to state 30
    STRING          shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    LBRACKET        shift and go to state 34

    expression                     shift and go to state 37
    assignment_statement           shift and go to state 11
    or_statement                   shift and go to state 17
    and_statement                  shift and go to state 18
    equality_statement             shift and go to state 19
    relational_statement           shift and go to state 20
    add_statement                  shift and go to state 21
    multiply_statement             shift and go to state 22
    unary_statement                shift and go to state 24
    exponent                       shift and go to state 25
    term                           shift and go to state 16
    atom                           shift and go to state 27

state 11

    (13) expression -> assignment_statement .

    $end            reduce using rule 13 (expression -> assignment_statement .)
    COLON           reduce using rule 13 (expression -> assignment_statement .)
    COMMA           reduce using rule 13 (expression -> assignment_statement .)
    RPAREN          reduce using rule 13 (expression -> assignment_statement .)
    ENDWHILE        reduce using rule 13 (expression -> assignment_statement .)
    ENDIF           reduce using rule 13 (expression -> assignment_statement .)
    ELSE            reduce using rule 13 (expression -> assignment_statement .)
    ENDFOR          reduce using rule 13 (expression -> assignment_statement .)


state 12

    (54) input_function -> INPUT . LPAREN IDENTIFIER RPAREN

    LPAREN          shift and go to state 38


state 13

    (42) term -> LPAREN . expression RPAREN
    (13) expression -> . assignment_statement
    (14) assignment_statement -> . or_statement
    (15) assignment_statement -> . IDENTIFIER EQUALS or_statement
    (16) or_statement -> . and_statement
    (17) or_statement -> . or_statement OR and_statement
    (18) and_statement -> . equality_statement
    (19) and_statement -> . and_statement AND equality_statement
    (20) equality_statement -> . relational_statement
    (21) equality_statement -> . equality_statement EQ relational_statement
    (22) equality_statement -> . equality_statement NEQ relational_statement
    (23) relational_statement -> . add_statement
    (24) relational_statement -> . relational_statement LT add_statement
    (25) relational_statement -> . relational_statement GT add_statement
    (26) relational_statement -> . relational_statement LTEQ add_statement
    (27) relational_statement -> . relational_statement GTEQ add_statement
    (28) add_statement -> . multiply_statement
    (29) add_statement -> . add_statement PLUS multiply_statement
    (30) add_statement -> . add_statement MINUS multiply_statement
    (31) multiply_statement -> . unary_statement
    (32) multiply_statement -> . multiply_statement TIMES unary_statement
    (33) multiply_statement -> . multiply_statement DIVIDE unary_statement
    (34) multiply_statement -> . multiply_statement MOD unary_statement
    (35) unary_statement -> . exponent
    (36) unary_statement -> . MINUS unary_statement
    (37) unary_statement -> . NOT unary_statement
    (38) exponent -> . term
    (39) exponent -> . term POWER unary_statement
    (40) term -> . IDENTIFIER
    (41) term -> . atom
    (42) term -> . LPAREN expression RPAREN
    (43) atom -> . INTEGER
    (44) atom -> . FLOAT
    (45) atom -> . CHARACTER
    (46) atom -> . STRING
    (47) atom -> . TRUE
    (48) atom -> . FALSE
    (49) atom -> . LBRACKET elements RBRACKET
    (50) atom -> . IDENTIFIER LBRACKET INTEGER RBRACKET

    IDENTIFIER      shift and go to state 14
    MINUS           shift and go to state 23
    NOT             shift and go to state 26
    LPAREN          shift and go to state 13
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 29
    CHARACTER       shift and go to state 30
    STRING          shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    LBRACKET        shift and go to state 34

    expression                     shift and go to state 39
    assignment_statement           shift and go to state 11
    or_statement                   shift and go to state 17
    and_statement                  shift and go to state 18
    equality_statement             shift and go to state 19
    relational_statement           shift and go to state 20
    add_statement                  shift and go to state 21
    multiply_statement             shift and go to state 22
    unary_statement                shift and go to state 24
    exponent                       shift and go to state 25
    term                           shift and go to state 16
    atom                           shift and go to state 27

state 14

    (15) assignment_statement -> IDENTIFIER . EQUALS or_statement
    (40) term -> IDENTIFIER .
    (50) atom -> IDENTIFIER . LBRACKET INTEGER RBRACKET

    EQUALS          shift and go to state 40
    POWER           reduce using rule 40 (term -> IDENTIFIER .)
    TIMES           reduce using rule 40 (term -> IDENTIFIER .)
    DIVIDE          reduce using rule 40 (term -> IDENTIFIER .)
    MOD             reduce using rule 40 (term -> IDENTIFIER .)
    PLUS            reduce using rule 40 (term -> IDENTIFIER .)
    MINUS           reduce using rule 40 (term -> IDENTIFIER .)
    LT              reduce using rule 40 (term -> IDENTIFIER .)
    GT              reduce using rule 40 (term -> IDENTIFIER .)
    LTEQ            reduce using rule 40 (term -> IDENTIFIER .)
    GTEQ            reduce using rule 40 (term -> IDENTIFIER .)
    EQ              reduce using rule 40 (term -> IDENTIFIER .)
    NEQ             reduce using rule 40 (term -> IDENTIFIER .)
    AND             reduce using rule 40 (term -> IDENTIFIER .)
    OR              reduce using rule 40 (term -> IDENTIFIER .)
    $end            reduce using rule 40 (term -> IDENTIFIER .)
    COLON           reduce using rule 40 (term -> IDENTIFIER .)
    COMMA           reduce using rule 40 (term -> IDENTIFIER .)
    RPAREN          reduce using rule 40 (term -> IDENTIFIER .)
    ENDWHILE        reduce using rule 40 (term -> IDENTIFIER .)
    ENDIF           reduce using rule 40 (term -> IDENTIFIER .)
    ELSE            reduce using rule 40 (term -> IDENTIFIER .)
    ENDFOR          reduce using rule 40 (term -> IDENTIFIER .)
    LBRACKET        shift and go to state 41


state 15

    (55) output_function -> PRINT . LPAREN term RPAREN

    LPAREN          shift and go to state 42


state 16

    (38) exponent -> term .
    (39) exponent -> term . POWER unary_statement

    TIMES           reduce using rule 38 (exponent -> term .)
    DIVIDE          reduce using rule 38 (exponent -> term .)
    MOD             reduce using rule 38 (exponent -> term .)
    PLUS            reduce using rule 38 (exponent -> term .)
    MINUS           reduce using rule 38 (exponent -> term .)
    LT              reduce using rule 38 (exponent -> term .)
    GT              reduce using rule 38 (exponent -> term .)
    LTEQ            reduce using rule 38 (exponent -> term .)
    GTEQ            reduce using rule 38 (exponent -> term .)
    EQ              reduce using rule 38 (exponent -> term .)
    NEQ             reduce using rule 38 (exponent -> term .)
    AND             reduce using rule 38 (exponent -> term .)
    OR              reduce using rule 38 (exponent -> term .)
    $end            reduce using rule 38 (exponent -> term .)
    COLON           reduce using rule 38 (exponent -> term .)
    COMMA           reduce using rule 38 (exponent -> term .)
    RPAREN          reduce using rule 38 (exponent -> term .)
    ENDWHILE        reduce using rule 38 (exponent -> term .)
    ENDIF           reduce using rule 38 (exponent -> term .)
    ELSE            reduce using rule 38 (exponent -> term .)
    ENDFOR          reduce using rule 38 (exponent -> term .)
    POWER           shift and go to state 43


state 17

    (14) assignment_statement -> or_statement .
    (17) or_statement -> or_statement . OR and_statement

    $end            reduce using rule 14 (assignment_statement -> or_statement .)
    COLON           reduce using rule 14 (assignment_statement -> or_statement .)
    COMMA           reduce using rule 14 (assignment_statement -> or_statement .)
    RPAREN          reduce using rule 14 (assignment_statement -> or_statement .)
    ENDWHILE        reduce using rule 14 (assignment_statement -> or_statement .)
    ENDIF           reduce using rule 14 (assignment_statement -> or_statement .)
    ELSE            reduce using rule 14 (assignment_statement -> or_statement .)
    ENDFOR          reduce using rule 14 (assignment_statement -> or_statement .)
    OR              shift and go to state 44


state 18

    (16) or_statement -> and_statement .
    (19) and_statement -> and_statement . AND equality_statement

    OR              reduce using rule 16 (or_statement -> and_statement .)
    $end            reduce using rule 16 (or_statement -> and_statement .)
    COLON           reduce using rule 16 (or_statement -> and_statement .)
    COMMA           reduce using rule 16 (or_statement -> and_statement .)
    RPAREN          reduce using rule 16 (or_statement -> and_statement .)
    ENDWHILE        reduce using rule 16 (or_statement -> and_statement .)
    ENDIF           reduce using rule 16 (or_statement -> and_statement .)
    ELSE            reduce using rule 16 (or_statement -> and_statement .)
    ENDFOR          reduce using rule 16 (or_statement -> and_statement .)
    AND             shift and go to state 45


state 19

    (18) and_statement -> equality_statement .
    (21) equality_statement -> equality_statement . EQ relational_statement
    (22) equality_statement -> equality_statement . NEQ relational_statement

    AND             reduce using rule 18 (and_statement -> equality_statement .)
    OR              reduce using rule 18 (and_statement -> equality_statement .)
    $end            reduce using rule 18 (and_statement -> equality_statement .)
    COLON           reduce using rule 18 (and_statement -> equality_statement .)
    COMMA           reduce using rule 18 (and_statement -> equality_statement .)
    RPAREN          reduce using rule 18 (and_statement -> equality_statement .)
    ENDWHILE        reduce using rule 18 (and_statement -> equality_statement .)
    ENDIF           reduce using rule 18 (and_statement -> equality_statement .)
    ELSE            reduce using rule 18 (and_statement -> equality_statement .)
    ENDFOR          reduce using rule 18 (and_statement -> equality_statement .)
    EQ              shift and go to state 46
    NEQ             shift and go to state 47


state 20

    (20) equality_statement -> relational_statement .
    (24) relational_statement -> relational_statement . LT add_statement
    (25) relational_statement -> relational_statement . GT add_statement
    (26) relational_statement -> relational_statement . LTEQ add_statement
    (27) relational_statement -> relational_statement . GTEQ add_statement

    EQ              reduce using rule 20 (equality_statement -> relational_statement .)
    NEQ             reduce using rule 20 (equality_statement -> relational_statement .)
    AND             reduce using rule 20 (equality_statement -> relational_statement .)
    OR              reduce using rule 20 (equality_statement -> relational_statement .)
    $end            reduce using rule 20 (equality_statement -> relational_statement .)
    COLON           reduce using rule 20 (equality_statement -> relational_statement .)
    COMMA           reduce using rule 20 (equality_statement -> relational_statement .)
    RPAREN          reduce using rule 20 (equality_statement -> relational_statement .)
    ENDWHILE        reduce using rule 20 (equality_statement -> relational_statement .)
    ENDIF           reduce using rule 20 (equality_statement -> relational_statement .)
    ELSE            reduce using rule 20 (equality_statement -> relational_statement .)
    ENDFOR          reduce using rule 20 (equality_statement -> relational_statement .)
    LT              shift and go to state 48
    GT              shift and go to state 49
    LTEQ            shift and go to state 50
    GTEQ            shift and go to state 51


state 21

    (23) relational_statement -> add_statement .
    (29) add_statement -> add_statement . PLUS multiply_statement
    (30) add_statement -> add_statement . MINUS multiply_statement

    LT              reduce using rule 23 (relational_statement -> add_statement .)
    GT              reduce using rule 23 (relational_statement -> add_statement .)
    LTEQ            reduce using rule 23 (relational_statement -> add_statement .)
    GTEQ            reduce using rule 23 (relational_statement -> add_statement .)
    EQ              reduce using rule 23 (relational_statement -> add_statement .)
    NEQ             reduce using rule 23 (relational_statement -> add_statement .)
    AND             reduce using rule 23 (relational_statement -> add_statement .)
    OR              reduce using rule 23 (relational_statement -> add_statement .)
    $end            reduce using rule 23 (relational_statement -> add_statement .)
    COLON           reduce using rule 23 (relational_statement -> add_statement .)
    COMMA           reduce using rule 23 (relational_statement -> add_statement .)
    RPAREN          reduce using rule 23 (relational_statement -> add_statement .)
    ENDWHILE        reduce using rule 23 (relational_statement -> add_statement .)
    ENDIF           reduce using rule 23 (relational_statement -> add_statement .)
    ELSE            reduce using rule 23 (relational_statement -> add_statement .)
    ENDFOR          reduce using rule 23 (relational_statement -> add_statement .)
    PLUS            shift and go to state 52
    MINUS           shift and go to state 53


state 22

    (28) add_statement -> multiply_statement .
    (32) multiply_statement -> multiply_statement . TIMES unary_statement
    (33) multiply_statement -> multiply_statement . DIVIDE unary_statement
    (34) multiply_statement -> multiply_statement . MOD unary_statement

    PLUS            reduce using rule 28 (add_statement -> multiply_statement .)
    MINUS           reduce using rule 28 (add_statement -> multiply_statement .)
    LT              reduce using rule 28 (add_statement -> multiply_statement .)
    GT              reduce using rule 28 (add_statement -> multiply_statement .)
    LTEQ            reduce using rule 28 (add_statement -> multiply_statement .)
    GTEQ            reduce using rule 28 (add_statement -> multiply_statement .)
    EQ              reduce using rule 28 (add_statement -> multiply_statement .)
    NEQ             reduce using rule 28 (add_statement -> multiply_statement .)
    AND             reduce using rule 28 (add_statement -> multiply_statement .)
    OR              reduce using rule 28 (add_statement -> multiply_statement .)
    $end            reduce using rule 28 (add_statement -> multiply_statement .)
    COLON           reduce using rule 28 (add_statement -> multiply_statement .)
    COMMA           reduce using rule 28 (add_statement -> multiply_statement .)
    RPAREN          reduce using rule 28 (add_statement -> multiply_statement .)
    ENDWHILE        reduce using rule 28 (add_statement -> multiply_statement .)
    ENDIF           reduce using rule 28 (add_statement -> multiply_statement .)
    ELSE            reduce using rule 28 (add_statement -> multiply_statement .)
    ENDFOR          reduce using rule 28 (add_statement -> multiply_statement .)
    TIMES           shift and go to state 54
    DIVIDE          shift and go to state 55
    MOD             shift and go to state 56


state 23

    (36) unary_statement -> MINUS . unary_statement
    (35) unary_statement -> . exponent
    (36) unary_statement -> . MINUS unary_statement
    (37) unary_statement -> . NOT unary_statement
    (38) exponent -> . term
    (39) exponent -> . term POWER unary_statement
    (40) term -> . IDENTIFIER
    (41) term -> . atom
    (42) term -> . LPAREN expression RPAREN
    (43) atom -> . INTEGER
    (44) atom -> . FLOAT
    (45) atom -> . CHARACTER
    (46) atom -> . STRING
    (47) atom -> . TRUE
    (48) atom -> . FALSE
    (49) atom -> . LBRACKET elements RBRACKET
    (50) atom -> . IDENTIFIER LBRACKET INTEGER RBRACKET

    MINUS           shift and go to state 23
    NOT             shift and go to state 26
    IDENTIFIER      shift and go to state 58
    LPAREN          shift and go to state 13
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 29
    CHARACTER       shift and go to state 30
    STRING          shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    LBRACKET        shift and go to state 34

    unary_statement                shift and go to state 57
    exponent                       shift and go to state 25
    term                           shift and go to state 16
    atom                           shift and go to state 27

state 24

    (31) multiply_statement -> unary_statement .

    TIMES           reduce using rule 31 (multiply_statement -> unary_statement .)
    DIVIDE          reduce using rule 31 (multiply_statement -> unary_statement .)
    MOD             reduce using rule 31 (multiply_statement -> unary_statement .)
    PLUS            reduce using rule 31 (multiply_statement -> unary_statement .)
    MINUS           reduce using rule 31 (multiply_statement -> unary_statement .)
    LT              reduce using rule 31 (multiply_statement -> unary_statement .)
    GT              reduce using rule 31 (multiply_statement -> unary_statement .)
    LTEQ            reduce using rule 31 (multiply_statement -> unary_statement .)
    GTEQ            reduce using rule 31 (multiply_statement -> unary_statement .)
    EQ              reduce using rule 31 (multiply_statement -> unary_statement .)
    NEQ             reduce using rule 31 (multiply_statement -> unary_statement .)
    AND             reduce using rule 31 (multiply_statement -> unary_statement .)
    OR              reduce using rule 31 (multiply_statement -> unary_statement .)
    $end            reduce using rule 31 (multiply_statement -> unary_statement .)
    COLON           reduce using rule 31 (multiply_statement -> unary_statement .)
    COMMA           reduce using rule 31 (multiply_statement -> unary_statement .)
    RPAREN          reduce using rule 31 (multiply_statement -> unary_statement .)
    ENDWHILE        reduce using rule 31 (multiply_statement -> unary_statement .)
    ENDIF           reduce using rule 31 (multiply_statement -> unary_statement .)
    ELSE            reduce using rule 31 (multiply_statement -> unary_statement .)
    ENDFOR          reduce using rule 31 (multiply_statement -> unary_statement .)


state 25

    (35) unary_statement -> exponent .

    TIMES           reduce using rule 35 (unary_statement -> exponent .)
    DIVIDE          reduce using rule 35 (unary_statement -> exponent .)
    MOD             reduce using rule 35 (unary_statement -> exponent .)
    PLUS            reduce using rule 35 (unary_statement -> exponent .)
    MINUS           reduce using rule 35 (unary_statement -> exponent .)
    LT              reduce using rule 35 (unary_statement -> exponent .)
    GT              reduce using rule 35 (unary_statement -> exponent .)
    LTEQ            reduce using rule 35 (unary_statement -> exponent .)
    GTEQ            reduce using rule 35 (unary_statement -> exponent .)
    EQ              reduce using rule 35 (unary_statement -> exponent .)
    NEQ             reduce using rule 35 (unary_statement -> exponent .)
    AND             reduce using rule 35 (unary_statement -> exponent .)
    OR              reduce using rule 35 (unary_statement -> exponent .)
    $end            reduce using rule 35 (unary_statement -> exponent .)
    COLON           reduce using rule 35 (unary_statement -> exponent .)
    COMMA           reduce using rule 35 (unary_statement -> exponent .)
    RPAREN          reduce using rule 35 (unary_statement -> exponent .)
    ENDWHILE        reduce using rule 35 (unary_statement -> exponent .)
    ENDIF           reduce using rule 35 (unary_statement -> exponent .)
    ELSE            reduce using rule 35 (unary_statement -> exponent .)
    ENDFOR          reduce using rule 35 (unary_statement -> exponent .)


state 26

    (37) unary_statement -> NOT . unary_statement
    (35) unary_statement -> . exponent
    (36) unary_statement -> . MINUS unary_statement
    (37) unary_statement -> . NOT unary_statement
    (38) exponent -> . term
    (39) exponent -> . term POWER unary_statement
    (40) term -> . IDENTIFIER
    (41) term -> . atom
    (42) term -> . LPAREN expression RPAREN
    (43) atom -> . INTEGER
    (44) atom -> . FLOAT
    (45) atom -> . CHARACTER
    (46) atom -> . STRING
    (47) atom -> . TRUE
    (48) atom -> . FALSE
    (49) atom -> . LBRACKET elements RBRACKET
    (50) atom -> . IDENTIFIER LBRACKET INTEGER RBRACKET

    MINUS           shift and go to state 23
    NOT             shift and go to state 26
    IDENTIFIER      shift and go to state 58
    LPAREN          shift and go to state 13
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 29
    CHARACTER       shift and go to state 30
    STRING          shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    LBRACKET        shift and go to state 34

    unary_statement                shift and go to state 59
    exponent                       shift and go to state 25
    term                           shift and go to state 16
    atom                           shift and go to state 27

state 27

    (41) term -> atom .

    POWER           reduce using rule 41 (term -> atom .)
    TIMES           reduce using rule 41 (term -> atom .)
    DIVIDE          reduce using rule 41 (term -> atom .)
    MOD             reduce using rule 41 (term -> atom .)
    PLUS            reduce using rule 41 (term -> atom .)
    MINUS           reduce using rule 41 (term -> atom .)
    LT              reduce using rule 41 (term -> atom .)
    GT              reduce using rule 41 (term -> atom .)
    LTEQ            reduce using rule 41 (term -> atom .)
    GTEQ            reduce using rule 41 (term -> atom .)
    EQ              reduce using rule 41 (term -> atom .)
    NEQ             reduce using rule 41 (term -> atom .)
    AND             reduce using rule 41 (term -> atom .)
    OR              reduce using rule 41 (term -> atom .)
    $end            reduce using rule 41 (term -> atom .)
    COLON           reduce using rule 41 (term -> atom .)
    COMMA           reduce using rule 41 (term -> atom .)
    RPAREN          reduce using rule 41 (term -> atom .)
    ENDWHILE        reduce using rule 41 (term -> atom .)
    ENDIF           reduce using rule 41 (term -> atom .)
    ELSE            reduce using rule 41 (term -> atom .)
    ENDFOR          reduce using rule 41 (term -> atom .)


state 28

    (43) atom -> INTEGER .

    POWER           reduce using rule 43 (atom -> INTEGER .)
    TIMES           reduce using rule 43 (atom -> INTEGER .)
    DIVIDE          reduce using rule 43 (atom -> INTEGER .)
    MOD             reduce using rule 43 (atom -> INTEGER .)
    PLUS            reduce using rule 43 (atom -> INTEGER .)
    MINUS           reduce using rule 43 (atom -> INTEGER .)
    LT              reduce using rule 43 (atom -> INTEGER .)
    GT              reduce using rule 43 (atom -> INTEGER .)
    LTEQ            reduce using rule 43 (atom -> INTEGER .)
    GTEQ            reduce using rule 43 (atom -> INTEGER .)
    EQ              reduce using rule 43 (atom -> INTEGER .)
    NEQ             reduce using rule 43 (atom -> INTEGER .)
    AND             reduce using rule 43 (atom -> INTEGER .)
    OR              reduce using rule 43 (atom -> INTEGER .)
    $end            reduce using rule 43 (atom -> INTEGER .)
    COLON           reduce using rule 43 (atom -> INTEGER .)
    COMMA           reduce using rule 43 (atom -> INTEGER .)
    RPAREN          reduce using rule 43 (atom -> INTEGER .)
    ENDWHILE        reduce using rule 43 (atom -> INTEGER .)
    ENDIF           reduce using rule 43 (atom -> INTEGER .)
    ELSE            reduce using rule 43 (atom -> INTEGER .)
    ENDFOR          reduce using rule 43 (atom -> INTEGER .)


state 29

    (44) atom -> FLOAT .

    POWER           reduce using rule 44 (atom -> FLOAT .)
    TIMES           reduce using rule 44 (atom -> FLOAT .)
    DIVIDE          reduce using rule 44 (atom -> FLOAT .)
    MOD             reduce using rule 44 (atom -> FLOAT .)
    PLUS            reduce using rule 44 (atom -> FLOAT .)
    MINUS           reduce using rule 44 (atom -> FLOAT .)
    LT              reduce using rule 44 (atom -> FLOAT .)
    GT              reduce using rule 44 (atom -> FLOAT .)
    LTEQ            reduce using rule 44 (atom -> FLOAT .)
    GTEQ            reduce using rule 44 (atom -> FLOAT .)
    EQ              reduce using rule 44 (atom -> FLOAT .)
    NEQ             reduce using rule 44 (atom -> FLOAT .)
    AND             reduce using rule 44 (atom -> FLOAT .)
    OR              reduce using rule 44 (atom -> FLOAT .)
    $end            reduce using rule 44 (atom -> FLOAT .)
    COLON           reduce using rule 44 (atom -> FLOAT .)
    COMMA           reduce using rule 44 (atom -> FLOAT .)
    RPAREN          reduce using rule 44 (atom -> FLOAT .)
    ENDWHILE        reduce using rule 44 (atom -> FLOAT .)
    ENDIF           reduce using rule 44 (atom -> FLOAT .)
    ELSE            reduce using rule 44 (atom -> FLOAT .)
    ENDFOR          reduce using rule 44 (atom -> FLOAT .)


state 30

    (45) atom -> CHARACTER .

    POWER           reduce using rule 45 (atom -> CHARACTER .)
    TIMES           reduce using rule 45 (atom -> CHARACTER .)
    DIVIDE          reduce using rule 45 (atom -> CHARACTER .)
    MOD             reduce using rule 45 (atom -> CHARACTER .)
    PLUS            reduce using rule 45 (atom -> CHARACTER .)
    MINUS           reduce using rule 45 (atom -> CHARACTER .)
    LT              reduce using rule 45 (atom -> CHARACTER .)
    GT              reduce using rule 45 (atom -> CHARACTER .)
    LTEQ            reduce using rule 45 (atom -> CHARACTER .)
    GTEQ            reduce using rule 45 (atom -> CHARACTER .)
    EQ              reduce using rule 45 (atom -> CHARACTER .)
    NEQ             reduce using rule 45 (atom -> CHARACTER .)
    AND             reduce using rule 45 (atom -> CHARACTER .)
    OR              reduce using rule 45 (atom -> CHARACTER .)
    $end            reduce using rule 45 (atom -> CHARACTER .)
    COLON           reduce using rule 45 (atom -> CHARACTER .)
    COMMA           reduce using rule 45 (atom -> CHARACTER .)
    RPAREN          reduce using rule 45 (atom -> CHARACTER .)
    ENDWHILE        reduce using rule 45 (atom -> CHARACTER .)
    ENDIF           reduce using rule 45 (atom -> CHARACTER .)
    ELSE            reduce using rule 45 (atom -> CHARACTER .)
    ENDFOR          reduce using rule 45 (atom -> CHARACTER .)


state 31

    (46) atom -> STRING .

    POWER           reduce using rule 46 (atom -> STRING .)
    TIMES           reduce using rule 46 (atom -> STRING .)
    DIVIDE          reduce using rule 46 (atom -> STRING .)
    MOD             reduce using rule 46 (atom -> STRING .)
    PLUS            reduce using rule 46 (atom -> STRING .)
    MINUS           reduce using rule 46 (atom -> STRING .)
    LT              reduce using rule 46 (atom -> STRING .)
    GT              reduce using rule 46 (atom -> STRING .)
    LTEQ            reduce using rule 46 (atom -> STRING .)
    GTEQ            reduce using rule 46 (atom -> STRING .)
    EQ              reduce using rule 46 (atom -> STRING .)
    NEQ             reduce using rule 46 (atom -> STRING .)
    AND             reduce using rule 46 (atom -> STRING .)
    OR              reduce using rule 46 (atom -> STRING .)
    $end            reduce using rule 46 (atom -> STRING .)
    COLON           reduce using rule 46 (atom -> STRING .)
    COMMA           reduce using rule 46 (atom -> STRING .)
    RPAREN          reduce using rule 46 (atom -> STRING .)
    ENDWHILE        reduce using rule 46 (atom -> STRING .)
    ENDIF           reduce using rule 46 (atom -> STRING .)
    ELSE            reduce using rule 46 (atom -> STRING .)
    ENDFOR          reduce using rule 46 (atom -> STRING .)


state 32

    (47) atom -> TRUE .

    POWER           reduce using rule 47 (atom -> TRUE .)
    TIMES           reduce using rule 47 (atom -> TRUE .)
    DIVIDE          reduce using rule 47 (atom -> TRUE .)
    MOD             reduce using rule 47 (atom -> TRUE .)
    PLUS            reduce using rule 47 (atom -> TRUE .)
    MINUS           reduce using rule 47 (atom -> TRUE .)
    LT              reduce using rule 47 (atom -> TRUE .)
    GT              reduce using rule 47 (atom -> TRUE .)
    LTEQ            reduce using rule 47 (atom -> TRUE .)
    GTEQ            reduce using rule 47 (atom -> TRUE .)
    EQ              reduce using rule 47 (atom -> TRUE .)
    NEQ             reduce using rule 47 (atom -> TRUE .)
    AND             reduce using rule 47 (atom -> TRUE .)
    OR              reduce using rule 47 (atom -> TRUE .)
    $end            reduce using rule 47 (atom -> TRUE .)
    COLON           reduce using rule 47 (atom -> TRUE .)
    COMMA           reduce using rule 47 (atom -> TRUE .)
    RPAREN          reduce using rule 47 (atom -> TRUE .)
    ENDWHILE        reduce using rule 47 (atom -> TRUE .)
    ENDIF           reduce using rule 47 (atom -> TRUE .)
    ELSE            reduce using rule 47 (atom -> TRUE .)
    ENDFOR          reduce using rule 47 (atom -> TRUE .)


state 33

    (48) atom -> FALSE .

    POWER           reduce using rule 48 (atom -> FALSE .)
    TIMES           reduce using rule 48 (atom -> FALSE .)
    DIVIDE          reduce using rule 48 (atom -> FALSE .)
    MOD             reduce using rule 48 (atom -> FALSE .)
    PLUS            reduce using rule 48 (atom -> FALSE .)
    MINUS           reduce using rule 48 (atom -> FALSE .)
    LT              reduce using rule 48 (atom -> FALSE .)
    GT              reduce using rule 48 (atom -> FALSE .)
    LTEQ            reduce using rule 48 (atom -> FALSE .)
    GTEQ            reduce using rule 48 (atom -> FALSE .)
    EQ              reduce using rule 48 (atom -> FALSE .)
    NEQ             reduce using rule 48 (atom -> FALSE .)
    AND             reduce using rule 48 (atom -> FALSE .)
    OR              reduce using rule 48 (atom -> FALSE .)
    $end            reduce using rule 48 (atom -> FALSE .)
    COLON           reduce using rule 48 (atom -> FALSE .)
    COMMA           reduce using rule 48 (atom -> FALSE .)
    RPAREN          reduce using rule 48 (atom -> FALSE .)
    ENDWHILE        reduce using rule 48 (atom -> FALSE .)
    ENDIF           reduce using rule 48 (atom -> FALSE .)
    ELSE            reduce using rule 48 (atom -> FALSE .)
    ENDFOR          reduce using rule 48 (atom -> FALSE .)


state 34

    (49) atom -> LBRACKET . elements RBRACKET
    (51) elements -> . elements INTEGER
    (52) elements -> . elements FLOAT
    (53) elements -> .

    RBRACKET        reduce using rule 53 (elements -> .)
    INTEGER         reduce using rule 53 (elements -> .)
    FLOAT           reduce using rule 53 (elements -> .)

    elements                       shift and go to state 60

state 35

    (7) iterative_statement -> WHILE expression . COLON start ENDWHILE

    COLON           shift and go to state 61


state 36

    (8) iterative_statement -> FOR expression . COMMA expression COMMA expression COLON start ENDFOR

    COMMA           shift and go to state 62


state 37

    (9) conditional_statement -> IF expression . then_statement else_statement ENDIF
    (10) conditional_statement -> IF expression . then_statement ENDIF
    (11) then_statement -> . COLON start

    COLON           shift and go to state 64

    then_statement                 shift and go to state 63

state 38

    (54) input_function -> INPUT LPAREN . IDENTIFIER RPAREN

    IDENTIFIER      shift and go to state 65


state 39

    (42) term -> LPAREN expression . RPAREN

    RPAREN          shift and go to state 66


state 40

    (15) assignment_statement -> IDENTIFIER EQUALS . or_statement
    (16) or_statement -> . and_statement
    (17) or_statement -> . or_statement OR and_statement
    (18) and_statement -> . equality_statement
    (19) and_statement -> . and_statement AND equality_statement
    (20) equality_statement -> . relational_statement
    (21) equality_statement -> . equality_statement EQ relational_statement
    (22) equality_statement -> . equality_statement NEQ relational_statement
    (23) relational_statement -> . add_statement
    (24) relational_statement -> . relational_statement LT add_statement
    (25) relational_statement -> . relational_statement GT add_statement
    (26) relational_statement -> . relational_statement LTEQ add_statement
    (27) relational_statement -> . relational_statement GTEQ add_statement
    (28) add_statement -> . multiply_statement
    (29) add_statement -> . add_statement PLUS multiply_statement
    (30) add_statement -> . add_statement MINUS multiply_statement
    (31) multiply_statement -> . unary_statement
    (32) multiply_statement -> . multiply_statement TIMES unary_statement
    (33) multiply_statement -> . multiply_statement DIVIDE unary_statement
    (34) multiply_statement -> . multiply_statement MOD unary_statement
    (35) unary_statement -> . exponent
    (36) unary_statement -> . MINUS unary_statement
    (37) unary_statement -> . NOT unary_statement
    (38) exponent -> . term
    (39) exponent -> . term POWER unary_statement
    (40) term -> . IDENTIFIER
    (41) term -> . atom
    (42) term -> . LPAREN expression RPAREN
    (43) atom -> . INTEGER
    (44) atom -> . FLOAT
    (45) atom -> . CHARACTER
    (46) atom -> . STRING
    (47) atom -> . TRUE
    (48) atom -> . FALSE
    (49) atom -> . LBRACKET elements RBRACKET
    (50) atom -> . IDENTIFIER LBRACKET INTEGER RBRACKET

    MINUS           shift and go to state 23
    NOT             shift and go to state 26
    IDENTIFIER      shift and go to state 58
    LPAREN          shift and go to state 13
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 29
    CHARACTER       shift and go to state 30
    STRING          shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    LBRACKET        shift and go to state 34

    or_statement                   shift and go to state 67
    and_statement                  shift and go to state 18
    equality_statement             shift and go to state 19
    relational_statement           shift and go to state 20
    add_statement                  shift and go to state 21
    multiply_statement             shift and go to state 22
    unary_statement                shift and go to state 24
    exponent                       shift and go to state 25
    term                           shift and go to state 16
    atom                           shift and go to state 27

state 41

    (50) atom -> IDENTIFIER LBRACKET . INTEGER RBRACKET

    INTEGER         shift and go to state 68


state 42

    (55) output_function -> PRINT LPAREN . term RPAREN
    (40) term -> . IDENTIFIER
    (41) term -> . atom
    (42) term -> . LPAREN expression RPAREN
    (43) atom -> . INTEGER
    (44) atom -> . FLOAT
    (45) atom -> . CHARACTER
    (46) atom -> . STRING
    (47) atom -> . TRUE
    (48) atom -> . FALSE
    (49) atom -> . LBRACKET elements RBRACKET
    (50) atom -> . IDENTIFIER LBRACKET INTEGER RBRACKET

    IDENTIFIER      shift and go to state 58
    LPAREN          shift and go to state 13
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 29
    CHARACTER       shift and go to state 30
    STRING          shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    LBRACKET        shift and go to state 34

    term                           shift and go to state 69
    atom                           shift and go to state 27

state 43

    (39) exponent -> term POWER . unary_statement
    (35) unary_statement -> . exponent
    (36) unary_statement -> . MINUS unary_statement
    (37) unary_statement -> . NOT unary_statement
    (38) exponent -> . term
    (39) exponent -> . term POWER unary_statement
    (40) term -> . IDENTIFIER
    (41) term -> . atom
    (42) term -> . LPAREN expression RPAREN
    (43) atom -> . INTEGER
    (44) atom -> . FLOAT
    (45) atom -> . CHARACTER
    (46) atom -> . STRING
    (47) atom -> . TRUE
    (48) atom -> . FALSE
    (49) atom -> . LBRACKET elements RBRACKET
    (50) atom -> . IDENTIFIER LBRACKET INTEGER RBRACKET

    MINUS           shift and go to state 23
    NOT             shift and go to state 26
    IDENTIFIER      shift and go to state 58
    LPAREN          shift and go to state 13
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 29
    CHARACTER       shift and go to state 30
    STRING          shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    LBRACKET        shift and go to state 34

    term                           shift and go to state 16
    unary_statement                shift and go to state 70
    exponent                       shift and go to state 25
    atom                           shift and go to state 27

state 44

    (17) or_statement -> or_statement OR . and_statement
    (18) and_statement -> . equality_statement
    (19) and_statement -> . and_statement AND equality_statement
    (20) equality_statement -> . relational_statement
    (21) equality_statement -> . equality_statement EQ relational_statement
    (22) equality_statement -> . equality_statement NEQ relational_statement
    (23) relational_statement -> . add_statement
    (24) relational_statement -> . relational_statement LT add_statement
    (25) relational_statement -> . relational_statement GT add_statement
    (26) relational_statement -> . relational_statement LTEQ add_statement
    (27) relational_statement -> . relational_statement GTEQ add_statement
    (28) add_statement -> . multiply_statement
    (29) add_statement -> . add_statement PLUS multiply_statement
    (30) add_statement -> . add_statement MINUS multiply_statement
    (31) multiply_statement -> . unary_statement
    (32) multiply_statement -> . multiply_statement TIMES unary_statement
    (33) multiply_statement -> . multiply_statement DIVIDE unary_statement
    (34) multiply_statement -> . multiply_statement MOD unary_statement
    (35) unary_statement -> . exponent
    (36) unary_statement -> . MINUS unary_statement
    (37) unary_statement -> . NOT unary_statement
    (38) exponent -> . term
    (39) exponent -> . term POWER unary_statement
    (40) term -> . IDENTIFIER
    (41) term -> . atom
    (42) term -> . LPAREN expression RPAREN
    (43) atom -> . INTEGER
    (44) atom -> . FLOAT
    (45) atom -> . CHARACTER
    (46) atom -> . STRING
    (47) atom -> . TRUE
    (48) atom -> . FALSE
    (49) atom -> . LBRACKET elements RBRACKET
    (50) atom -> . IDENTIFIER LBRACKET INTEGER RBRACKET

    MINUS           shift and go to state 23
    NOT             shift and go to state 26
    IDENTIFIER      shift and go to state 58
    LPAREN          shift and go to state 13
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 29
    CHARACTER       shift and go to state 30
    STRING          shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    LBRACKET        shift and go to state 34

    and_statement                  shift and go to state 71
    equality_statement             shift and go to state 19
    relational_statement           shift and go to state 20
    add_statement                  shift and go to state 21
    multiply_statement             shift and go to state 22
    unary_statement                shift and go to state 24
    exponent                       shift and go to state 25
    term                           shift and go to state 16
    atom                           shift and go to state 27

state 45

    (19) and_statement -> and_statement AND . equality_statement
    (20) equality_statement -> . relational_statement
    (21) equality_statement -> . equality_statement EQ relational_statement
    (22) equality_statement -> . equality_statement NEQ relational_statement
    (23) relational_statement -> . add_statement
    (24) relational_statement -> . relational_statement LT add_statement
    (25) relational_statement -> . relational_statement GT add_statement
    (26) relational_statement -> . relational_statement LTEQ add_statement
    (27) relational_statement -> . relational_statement GTEQ add_statement
    (28) add_statement -> . multiply_statement
    (29) add_statement -> . add_statement PLUS multiply_statement
    (30) add_statement -> . add_statement MINUS multiply_statement
    (31) multiply_statement -> . unary_statement
    (32) multiply_statement -> . multiply_statement TIMES unary_statement
    (33) multiply_statement -> . multiply_statement DIVIDE unary_statement
    (34) multiply_statement -> . multiply_statement MOD unary_statement
    (35) unary_statement -> . exponent
    (36) unary_statement -> . MINUS unary_statement
    (37) unary_statement -> . NOT unary_statement
    (38) exponent -> . term
    (39) exponent -> . term POWER unary_statement
    (40) term -> . IDENTIFIER
    (41) term -> . atom
    (42) term -> . LPAREN expression RPAREN
    (43) atom -> . INTEGER
    (44) atom -> . FLOAT
    (45) atom -> . CHARACTER
    (46) atom -> . STRING
    (47) atom -> . TRUE
    (48) atom -> . FALSE
    (49) atom -> . LBRACKET elements RBRACKET
    (50) atom -> . IDENTIFIER LBRACKET INTEGER RBRACKET

    MINUS           shift and go to state 23
    NOT             shift and go to state 26
    IDENTIFIER      shift and go to state 58
    LPAREN          shift and go to state 13
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 29
    CHARACTER       shift and go to state 30
    STRING          shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    LBRACKET        shift and go to state 34

    equality_statement             shift and go to state 72
    relational_statement           shift and go to state 20
    add_statement                  shift and go to state 21
    multiply_statement             shift and go to state 22
    unary_statement                shift and go to state 24
    exponent                       shift and go to state 25
    term                           shift and go to state 16
    atom                           shift and go to state 27

state 46

    (21) equality_statement -> equality_statement EQ . relational_statement
    (23) relational_statement -> . add_statement
    (24) relational_statement -> . relational_statement LT add_statement
    (25) relational_statement -> . relational_statement GT add_statement
    (26) relational_statement -> . relational_statement LTEQ add_statement
    (27) relational_statement -> . relational_statement GTEQ add_statement
    (28) add_statement -> . multiply_statement
    (29) add_statement -> . add_statement PLUS multiply_statement
    (30) add_statement -> . add_statement MINUS multiply_statement
    (31) multiply_statement -> . unary_statement
    (32) multiply_statement -> . multiply_statement TIMES unary_statement
    (33) multiply_statement -> . multiply_statement DIVIDE unary_statement
    (34) multiply_statement -> . multiply_statement MOD unary_statement
    (35) unary_statement -> . exponent
    (36) unary_statement -> . MINUS unary_statement
    (37) unary_statement -> . NOT unary_statement
    (38) exponent -> . term
    (39) exponent -> . term POWER unary_statement
    (40) term -> . IDENTIFIER
    (41) term -> . atom
    (42) term -> . LPAREN expression RPAREN
    (43) atom -> . INTEGER
    (44) atom -> . FLOAT
    (45) atom -> . CHARACTER
    (46) atom -> . STRING
    (47) atom -> . TRUE
    (48) atom -> . FALSE
    (49) atom -> . LBRACKET elements RBRACKET
    (50) atom -> . IDENTIFIER LBRACKET INTEGER RBRACKET

    MINUS           shift and go to state 23
    NOT             shift and go to state 26
    IDENTIFIER      shift and go to state 58
    LPAREN          shift and go to state 13
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 29
    CHARACTER       shift and go to state 30
    STRING          shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    LBRACKET        shift and go to state 34

    relational_statement           shift and go to state 73
    add_statement                  shift and go to state 21
    multiply_statement             shift and go to state 22
    unary_statement                shift and go to state 24
    exponent                       shift and go to state 25
    term                           shift and go to state 16
    atom                           shift and go to state 27

state 47

    (22) equality_statement -> equality_statement NEQ . relational_statement
    (23) relational_statement -> . add_statement
    (24) relational_statement -> . relational_statement LT add_statement
    (25) relational_statement -> . relational_statement GT add_statement
    (26) relational_statement -> . relational_statement LTEQ add_statement
    (27) relational_statement -> . relational_statement GTEQ add_statement
    (28) add_statement -> . multiply_statement
    (29) add_statement -> . add_statement PLUS multiply_statement
    (30) add_statement -> . add_statement MINUS multiply_statement
    (31) multiply_statement -> . unary_statement
    (32) multiply_statement -> . multiply_statement TIMES unary_statement
    (33) multiply_statement -> . multiply_statement DIVIDE unary_statement
    (34) multiply_statement -> . multiply_statement MOD unary_statement
    (35) unary_statement -> . exponent
    (36) unary_statement -> . MINUS unary_statement
    (37) unary_statement -> . NOT unary_statement
    (38) exponent -> . term
    (39) exponent -> . term POWER unary_statement
    (40) term -> . IDENTIFIER
    (41) term -> . atom
    (42) term -> . LPAREN expression RPAREN
    (43) atom -> . INTEGER
    (44) atom -> . FLOAT
    (45) atom -> . CHARACTER
    (46) atom -> . STRING
    (47) atom -> . TRUE
    (48) atom -> . FALSE
    (49) atom -> . LBRACKET elements RBRACKET
    (50) atom -> . IDENTIFIER LBRACKET INTEGER RBRACKET

    MINUS           shift and go to state 23
    NOT             shift and go to state 26
    IDENTIFIER      shift and go to state 58
    LPAREN          shift and go to state 13
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 29
    CHARACTER       shift and go to state 30
    STRING          shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    LBRACKET        shift and go to state 34

    relational_statement           shift and go to state 74
    add_statement                  shift and go to state 21
    multiply_statement             shift and go to state 22
    unary_statement                shift and go to state 24
    exponent                       shift and go to state 25
    term                           shift and go to state 16
    atom                           shift and go to state 27

state 48

    (24) relational_statement -> relational_statement LT . add_statement
    (28) add_statement -> . multiply_statement
    (29) add_statement -> . add_statement PLUS multiply_statement
    (30) add_statement -> . add_statement MINUS multiply_statement
    (31) multiply_statement -> . unary_statement
    (32) multiply_statement -> . multiply_statement TIMES unary_statement
    (33) multiply_statement -> . multiply_statement DIVIDE unary_statement
    (34) multiply_statement -> . multiply_statement MOD unary_statement
    (35) unary_statement -> . exponent
    (36) unary_statement -> . MINUS unary_statement
    (37) unary_statement -> . NOT unary_statement
    (38) exponent -> . term
    (39) exponent -> . term POWER unary_statement
    (40) term -> . IDENTIFIER
    (41) term -> . atom
    (42) term -> . LPAREN expression RPAREN
    (43) atom -> . INTEGER
    (44) atom -> . FLOAT
    (45) atom -> . CHARACTER
    (46) atom -> . STRING
    (47) atom -> . TRUE
    (48) atom -> . FALSE
    (49) atom -> . LBRACKET elements RBRACKET
    (50) atom -> . IDENTIFIER LBRACKET INTEGER RBRACKET

    MINUS           shift and go to state 23
    NOT             shift and go to state 26
    IDENTIFIER      shift and go to state 58
    LPAREN          shift and go to state 13
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 29
    CHARACTER       shift and go to state 30
    STRING          shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    LBRACKET        shift and go to state 34

    add_statement                  shift and go to state 75
    multiply_statement             shift and go to state 22
    unary_statement                shift and go to state 24
    exponent                       shift and go to state 25
    term                           shift and go to state 16
    atom                           shift and go to state 27

state 49

    (25) relational_statement -> relational_statement GT . add_statement
    (28) add_statement -> . multiply_statement
    (29) add_statement -> . add_statement PLUS multiply_statement
    (30) add_statement -> . add_statement MINUS multiply_statement
    (31) multiply_statement -> . unary_statement
    (32) multiply_statement -> . multiply_statement TIMES unary_statement
    (33) multiply_statement -> . multiply_statement DIVIDE unary_statement
    (34) multiply_statement -> . multiply_statement MOD unary_statement
    (35) unary_statement -> . exponent
    (36) unary_statement -> . MINUS unary_statement
    (37) unary_statement -> . NOT unary_statement
    (38) exponent -> . term
    (39) exponent -> . term POWER unary_statement
    (40) term -> . IDENTIFIER
    (41) term -> . atom
    (42) term -> . LPAREN expression RPAREN
    (43) atom -> . INTEGER
    (44) atom -> . FLOAT
    (45) atom -> . CHARACTER
    (46) atom -> . STRING
    (47) atom -> . TRUE
    (48) atom -> . FALSE
    (49) atom -> . LBRACKET elements RBRACKET
    (50) atom -> . IDENTIFIER LBRACKET INTEGER RBRACKET

    MINUS           shift and go to state 23
    NOT             shift and go to state 26
    IDENTIFIER      shift and go to state 58
    LPAREN          shift and go to state 13
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 29
    CHARACTER       shift and go to state 30
    STRING          shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    LBRACKET        shift and go to state 34

    add_statement                  shift and go to state 76
    multiply_statement             shift and go to state 22
    unary_statement                shift and go to state 24
    exponent                       shift and go to state 25
    term                           shift and go to state 16
    atom                           shift and go to state 27

state 50

    (26) relational_statement -> relational_statement LTEQ . add_statement
    (28) add_statement -> . multiply_statement
    (29) add_statement -> . add_statement PLUS multiply_statement
    (30) add_statement -> . add_statement MINUS multiply_statement
    (31) multiply_statement -> . unary_statement
    (32) multiply_statement -> . multiply_statement TIMES unary_statement
    (33) multiply_statement -> . multiply_statement DIVIDE unary_statement
    (34) multiply_statement -> . multiply_statement MOD unary_statement
    (35) unary_statement -> . exponent
    (36) unary_statement -> . MINUS unary_statement
    (37) unary_statement -> . NOT unary_statement
    (38) exponent -> . term
    (39) exponent -> . term POWER unary_statement
    (40) term -> . IDENTIFIER
    (41) term -> . atom
    (42) term -> . LPAREN expression RPAREN
    (43) atom -> . INTEGER
    (44) atom -> . FLOAT
    (45) atom -> . CHARACTER
    (46) atom -> . STRING
    (47) atom -> . TRUE
    (48) atom -> . FALSE
    (49) atom -> . LBRACKET elements RBRACKET
    (50) atom -> . IDENTIFIER LBRACKET INTEGER RBRACKET

    MINUS           shift and go to state 23
    NOT             shift and go to state 26
    IDENTIFIER      shift and go to state 58
    LPAREN          shift and go to state 13
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 29
    CHARACTER       shift and go to state 30
    STRING          shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    LBRACKET        shift and go to state 34

    add_statement                  shift and go to state 77
    multiply_statement             shift and go to state 22
    unary_statement                shift and go to state 24
    exponent                       shift and go to state 25
    term                           shift and go to state 16
    atom                           shift and go to state 27

state 51

    (27) relational_statement -> relational_statement GTEQ . add_statement
    (28) add_statement -> . multiply_statement
    (29) add_statement -> . add_statement PLUS multiply_statement
    (30) add_statement -> . add_statement MINUS multiply_statement
    (31) multiply_statement -> . unary_statement
    (32) multiply_statement -> . multiply_statement TIMES unary_statement
    (33) multiply_statement -> . multiply_statement DIVIDE unary_statement
    (34) multiply_statement -> . multiply_statement MOD unary_statement
    (35) unary_statement -> . exponent
    (36) unary_statement -> . MINUS unary_statement
    (37) unary_statement -> . NOT unary_statement
    (38) exponent -> . term
    (39) exponent -> . term POWER unary_statement
    (40) term -> . IDENTIFIER
    (41) term -> . atom
    (42) term -> . LPAREN expression RPAREN
    (43) atom -> . INTEGER
    (44) atom -> . FLOAT
    (45) atom -> . CHARACTER
    (46) atom -> . STRING
    (47) atom -> . TRUE
    (48) atom -> . FALSE
    (49) atom -> . LBRACKET elements RBRACKET
    (50) atom -> . IDENTIFIER LBRACKET INTEGER RBRACKET

    MINUS           shift and go to state 23
    NOT             shift and go to state 26
    IDENTIFIER      shift and go to state 58
    LPAREN          shift and go to state 13
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 29
    CHARACTER       shift and go to state 30
    STRING          shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    LBRACKET        shift and go to state 34

    add_statement                  shift and go to state 78
    multiply_statement             shift and go to state 22
    unary_statement                shift and go to state 24
    exponent                       shift and go to state 25
    term                           shift and go to state 16
    atom                           shift and go to state 27

state 52

    (29) add_statement -> add_statement PLUS . multiply_statement
    (31) multiply_statement -> . unary_statement
    (32) multiply_statement -> . multiply_statement TIMES unary_statement
    (33) multiply_statement -> . multiply_statement DIVIDE unary_statement
    (34) multiply_statement -> . multiply_statement MOD unary_statement
    (35) unary_statement -> . exponent
    (36) unary_statement -> . MINUS unary_statement
    (37) unary_statement -> . NOT unary_statement
    (38) exponent -> . term
    (39) exponent -> . term POWER unary_statement
    (40) term -> . IDENTIFIER
    (41) term -> . atom
    (42) term -> . LPAREN expression RPAREN
    (43) atom -> . INTEGER
    (44) atom -> . FLOAT
    (45) atom -> . CHARACTER
    (46) atom -> . STRING
    (47) atom -> . TRUE
    (48) atom -> . FALSE
    (49) atom -> . LBRACKET elements RBRACKET
    (50) atom -> . IDENTIFIER LBRACKET INTEGER RBRACKET

    MINUS           shift and go to state 23
    NOT             shift and go to state 26
    IDENTIFIER      shift and go to state 58
    LPAREN          shift and go to state 13
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 29
    CHARACTER       shift and go to state 30
    STRING          shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    LBRACKET        shift and go to state 34

    multiply_statement             shift and go to state 79
    unary_statement                shift and go to state 24
    exponent                       shift and go to state 25
    term                           shift and go to state 16
    atom                           shift and go to state 27

state 53

    (30) add_statement -> add_statement MINUS . multiply_statement
    (31) multiply_statement -> . unary_statement
    (32) multiply_statement -> . multiply_statement TIMES unary_statement
    (33) multiply_statement -> . multiply_statement DIVIDE unary_statement
    (34) multiply_statement -> . multiply_statement MOD unary_statement
    (35) unary_statement -> . exponent
    (36) unary_statement -> . MINUS unary_statement
    (37) unary_statement -> . NOT unary_statement
    (38) exponent -> . term
    (39) exponent -> . term POWER unary_statement
    (40) term -> . IDENTIFIER
    (41) term -> . atom
    (42) term -> . LPAREN expression RPAREN
    (43) atom -> . INTEGER
    (44) atom -> . FLOAT
    (45) atom -> . CHARACTER
    (46) atom -> . STRING
    (47) atom -> . TRUE
    (48) atom -> . FALSE
    (49) atom -> . LBRACKET elements RBRACKET
    (50) atom -> . IDENTIFIER LBRACKET INTEGER RBRACKET

    MINUS           shift and go to state 23
    NOT             shift and go to state 26
    IDENTIFIER      shift and go to state 58
    LPAREN          shift and go to state 13
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 29
    CHARACTER       shift and go to state 30
    STRING          shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    LBRACKET        shift and go to state 34

    multiply_statement             shift and go to state 80
    unary_statement                shift and go to state 24
    exponent                       shift and go to state 25
    term                           shift and go to state 16
    atom                           shift and go to state 27

state 54

    (32) multiply_statement -> multiply_statement TIMES . unary_statement
    (35) unary_statement -> . exponent
    (36) unary_statement -> . MINUS unary_statement
    (37) unary_statement -> . NOT unary_statement
    (38) exponent -> . term
    (39) exponent -> . term POWER unary_statement
    (40) term -> . IDENTIFIER
    (41) term -> . atom
    (42) term -> . LPAREN expression RPAREN
    (43) atom -> . INTEGER
    (44) atom -> . FLOAT
    (45) atom -> . CHARACTER
    (46) atom -> . STRING
    (47) atom -> . TRUE
    (48) atom -> . FALSE
    (49) atom -> . LBRACKET elements RBRACKET
    (50) atom -> . IDENTIFIER LBRACKET INTEGER RBRACKET

    MINUS           shift and go to state 23
    NOT             shift and go to state 26
    IDENTIFIER      shift and go to state 58
    LPAREN          shift and go to state 13
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 29
    CHARACTER       shift and go to state 30
    STRING          shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    LBRACKET        shift and go to state 34

    unary_statement                shift and go to state 81
    exponent                       shift and go to state 25
    term                           shift and go to state 16
    atom                           shift and go to state 27

state 55

    (33) multiply_statement -> multiply_statement DIVIDE . unary_statement
    (35) unary_statement -> . exponent
    (36) unary_statement -> . MINUS unary_statement
    (37) unary_statement -> . NOT unary_statement
    (38) exponent -> . term
    (39) exponent -> . term POWER unary_statement
    (40) term -> . IDENTIFIER
    (41) term -> . atom
    (42) term -> . LPAREN expression RPAREN
    (43) atom -> . INTEGER
    (44) atom -> . FLOAT
    (45) atom -> . CHARACTER
    (46) atom -> . STRING
    (47) atom -> . TRUE
    (48) atom -> . FALSE
    (49) atom -> . LBRACKET elements RBRACKET
    (50) atom -> . IDENTIFIER LBRACKET INTEGER RBRACKET

    MINUS           shift and go to state 23
    NOT             shift and go to state 26
    IDENTIFIER      shift and go to state 58
    LPAREN          shift and go to state 13
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 29
    CHARACTER       shift and go to state 30
    STRING          shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    LBRACKET        shift and go to state 34

    unary_statement                shift and go to state 82
    exponent                       shift and go to state 25
    term                           shift and go to state 16
    atom                           shift and go to state 27

state 56

    (34) multiply_statement -> multiply_statement MOD . unary_statement
    (35) unary_statement -> . exponent
    (36) unary_statement -> . MINUS unary_statement
    (37) unary_statement -> . NOT unary_statement
    (38) exponent -> . term
    (39) exponent -> . term POWER unary_statement
    (40) term -> . IDENTIFIER
    (41) term -> . atom
    (42) term -> . LPAREN expression RPAREN
    (43) atom -> . INTEGER
    (44) atom -> . FLOAT
    (45) atom -> . CHARACTER
    (46) atom -> . STRING
    (47) atom -> . TRUE
    (48) atom -> . FALSE
    (49) atom -> . LBRACKET elements RBRACKET
    (50) atom -> . IDENTIFIER LBRACKET INTEGER RBRACKET

    MINUS           shift and go to state 23
    NOT             shift and go to state 26
    IDENTIFIER      shift and go to state 58
    LPAREN          shift and go to state 13
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 29
    CHARACTER       shift and go to state 30
    STRING          shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    LBRACKET        shift and go to state 34

    unary_statement                shift and go to state 83
    exponent                       shift and go to state 25
    term                           shift and go to state 16
    atom                           shift and go to state 27

state 57

    (36) unary_statement -> MINUS unary_statement .

    TIMES           reduce using rule 36 (unary_statement -> MINUS unary_statement .)
    DIVIDE          reduce using rule 36 (unary_statement -> MINUS unary_statement .)
    MOD             reduce using rule 36 (unary_statement -> MINUS unary_statement .)
    PLUS            reduce using rule 36 (unary_statement -> MINUS unary_statement .)
    MINUS           reduce using rule 36 (unary_statement -> MINUS unary_statement .)
    LT              reduce using rule 36 (unary_statement -> MINUS unary_statement .)
    GT              reduce using rule 36 (unary_statement -> MINUS unary_statement .)
    LTEQ            reduce using rule 36 (unary_statement -> MINUS unary_statement .)
    GTEQ            reduce using rule 36 (unary_statement -> MINUS unary_statement .)
    EQ              reduce using rule 36 (unary_statement -> MINUS unary_statement .)
    NEQ             reduce using rule 36 (unary_statement -> MINUS unary_statement .)
    AND             reduce using rule 36 (unary_statement -> MINUS unary_statement .)
    OR              reduce using rule 36 (unary_statement -> MINUS unary_statement .)
    $end            reduce using rule 36 (unary_statement -> MINUS unary_statement .)
    COLON           reduce using rule 36 (unary_statement -> MINUS unary_statement .)
    COMMA           reduce using rule 36 (unary_statement -> MINUS unary_statement .)
    RPAREN          reduce using rule 36 (unary_statement -> MINUS unary_statement .)
    ENDWHILE        reduce using rule 36 (unary_statement -> MINUS unary_statement .)
    ENDIF           reduce using rule 36 (unary_statement -> MINUS unary_statement .)
    ELSE            reduce using rule 36 (unary_statement -> MINUS unary_statement .)
    ENDFOR          reduce using rule 36 (unary_statement -> MINUS unary_statement .)


state 58

    (40) term -> IDENTIFIER .
    (50) atom -> IDENTIFIER . LBRACKET INTEGER RBRACKET

    POWER           reduce using rule 40 (term -> IDENTIFIER .)
    TIMES           reduce using rule 40 (term -> IDENTIFIER .)
    DIVIDE          reduce using rule 40 (term -> IDENTIFIER .)
    MOD             reduce using rule 40 (term -> IDENTIFIER .)
    PLUS            reduce using rule 40 (term -> IDENTIFIER .)
    MINUS           reduce using rule 40 (term -> IDENTIFIER .)
    LT              reduce using rule 40 (term -> IDENTIFIER .)
    GT              reduce using rule 40 (term -> IDENTIFIER .)
    LTEQ            reduce using rule 40 (term -> IDENTIFIER .)
    GTEQ            reduce using rule 40 (term -> IDENTIFIER .)
    EQ              reduce using rule 40 (term -> IDENTIFIER .)
    NEQ             reduce using rule 40 (term -> IDENTIFIER .)
    AND             reduce using rule 40 (term -> IDENTIFIER .)
    OR              reduce using rule 40 (term -> IDENTIFIER .)
    $end            reduce using rule 40 (term -> IDENTIFIER .)
    COLON           reduce using rule 40 (term -> IDENTIFIER .)
    COMMA           reduce using rule 40 (term -> IDENTIFIER .)
    RPAREN          reduce using rule 40 (term -> IDENTIFIER .)
    ENDWHILE        reduce using rule 40 (term -> IDENTIFIER .)
    ENDIF           reduce using rule 40 (term -> IDENTIFIER .)
    ELSE            reduce using rule 40 (term -> IDENTIFIER .)
    ENDFOR          reduce using rule 40 (term -> IDENTIFIER .)
    LBRACKET        shift and go to state 41


state 59

    (37) unary_statement -> NOT unary_statement .

    TIMES           reduce using rule 37 (unary_statement -> NOT unary_statement .)
    DIVIDE          reduce using rule 37 (unary_statement -> NOT unary_statement .)
    MOD             reduce using rule 37 (unary_statement -> NOT unary_statement .)
    PLUS            reduce using rule 37 (unary_statement -> NOT unary_statement .)
    MINUS           reduce using rule 37 (unary_statement -> NOT unary_statement .)
    LT              reduce using rule 37 (unary_statement -> NOT unary_statement .)
    GT              reduce using rule 37 (unary_statement -> NOT unary_statement .)
    LTEQ            reduce using rule 37 (unary_statement -> NOT unary_statement .)
    GTEQ            reduce using rule 37 (unary_statement -> NOT unary_statement .)
    EQ              reduce using rule 37 (unary_statement -> NOT unary_statement .)
    NEQ             reduce using rule 37 (unary_statement -> NOT unary_statement .)
    AND             reduce using rule 37 (unary_statement -> NOT unary_statement .)
    OR              reduce using rule 37 (unary_statement -> NOT unary_statement .)
    $end            reduce using rule 37 (unary_statement -> NOT unary_statement .)
    COLON           reduce using rule 37 (unary_statement -> NOT unary_statement .)
    COMMA           reduce using rule 37 (unary_statement -> NOT unary_statement .)
    RPAREN          reduce using rule 37 (unary_statement -> NOT unary_statement .)
    ENDWHILE        reduce using rule 37 (unary_statement -> NOT unary_statement .)
    ENDIF           reduce using rule 37 (unary_statement -> NOT unary_statement .)
    ELSE            reduce using rule 37 (unary_statement -> NOT unary_statement .)
    ENDFOR          reduce using rule 37 (unary_statement -> NOT unary_statement .)


state 60

    (49) atom -> LBRACKET elements . RBRACKET
    (51) elements -> elements . INTEGER
    (52) elements -> elements . FLOAT

    RBRACKET        shift and go to state 84
    INTEGER         shift and go to state 85
    FLOAT           shift and go to state 86


state 61

    (7) iterative_statement -> WHILE expression COLON . start ENDWHILE
    (1) start -> . code_entity
    (2) code_entity -> . iterative_statement
    (3) code_entity -> . conditional_statement
    (4) code_entity -> . expression
    (5) code_entity -> . input_function
    (6) code_entity -> . output_function
    (7) iterative_statement -> . WHILE expression COLON start ENDWHILE
    (8) iterative_statement -> . FOR expression COMMA expression COMMA expression COLON start ENDFOR
    (9) conditional_statement -> . IF expression then_statement else_statement ENDIF
    (10) conditional_statement -> . IF expression then_statement ENDIF
    (13) expression -> . assignment_statement
    (54) input_function -> . INPUT LPAREN IDENTIFIER RPAREN
    (55) output_function -> . PRINT LPAREN term RPAREN
    (14) assignment_statement -> . or_statement
    (15) assignment_statement -> . IDENTIFIER EQUALS or_statement
    (16) or_statement -> . and_statement
    (17) or_statement -> . or_statement OR and_statement
    (18) and_statement -> . equality_statement
    (19) and_statement -> . and_statement AND equality_statement
    (20) equality_statement -> . relational_statement
    (21) equality_statement -> . equality_statement EQ relational_statement
    (22) equality_statement -> . equality_statement NEQ relational_statement
    (23) relational_statement -> . add_statement
    (24) relational_statement -> . relational_statement LT add_statement
    (25) relational_statement -> . relational_statement GT add_statement
    (26) relational_statement -> . relational_statement LTEQ add_statement
    (27) relational_statement -> . relational_statement GTEQ add_statement
    (28) add_statement -> . multiply_statement
    (29) add_statement -> . add_statement PLUS multiply_statement
    (30) add_statement -> . add_statement MINUS multiply_statement
    (31) multiply_statement -> . unary_statement
    (32) multiply_statement -> . multiply_statement TIMES unary_statement
    (33) multiply_statement -> . multiply_statement DIVIDE unary_statement
    (34) multiply_statement -> . multiply_statement MOD unary_statement
    (35) unary_statement -> . exponent
    (36) unary_statement -> . MINUS unary_statement
    (37) unary_statement -> . NOT unary_statement
    (38) exponent -> . term
    (39) exponent -> . term POWER unary_statement
    (40) term -> . IDENTIFIER
    (41) term -> . atom
    (42) term -> . LPAREN expression RPAREN
    (43) atom -> . INTEGER
    (44) atom -> . FLOAT
    (45) atom -> . CHARACTER
    (46) atom -> . STRING
    (47) atom -> . TRUE
    (48) atom -> . FALSE
    (49) atom -> . LBRACKET elements RBRACKET
    (50) atom -> . IDENTIFIER LBRACKET INTEGER RBRACKET

    WHILE           shift and go to state 8
    FOR             shift and go to state 9
    IF              shift and go to state 10
    INPUT           shift and go to state 12
    PRINT           shift and go to state 15
    IDENTIFIER      shift and go to state 14
    MINUS           shift and go to state 23
    NOT             shift and go to state 26
    LPAREN          shift and go to state 13
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 29
    CHARACTER       shift and go to state 30
    STRING          shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    LBRACKET        shift and go to state 34

    expression                     shift and go to state 5
    start                          shift and go to state 87
    code_entity                    shift and go to state 2
    iterative_statement            shift and go to state 3
    conditional_statement          shift and go to state 4
    input_function                 shift and go to state 6
    output_function                shift and go to state 7
    assignment_statement           shift and go to state 11
    term                           shift and go to state 16
    or_statement                   shift and go to state 17
    and_statement                  shift and go to state 18
    equality_statement             shift and go to state 19
    relational_statement           shift and go to state 20
    add_statement                  shift and go to state 21
    multiply_statement             shift and go to state 22
    unary_statement                shift and go to state 24
    exponent                       shift and go to state 25
    atom                           shift and go to state 27

state 62

    (8) iterative_statement -> FOR expression COMMA . expression COMMA expression COLON start ENDFOR
    (13) expression -> . assignment_statement
    (14) assignment_statement -> . or_statement
    (15) assignment_statement -> . IDENTIFIER EQUALS or_statement
    (16) or_statement -> . and_statement
    (17) or_statement -> . or_statement OR and_statement
    (18) and_statement -> . equality_statement
    (19) and_statement -> . and_statement AND equality_statement
    (20) equality_statement -> . relational_statement
    (21) equality_statement -> . equality_statement EQ relational_statement
    (22) equality_statement -> . equality_statement NEQ relational_statement
    (23) relational_statement -> . add_statement
    (24) relational_statement -> . relational_statement LT add_statement
    (25) relational_statement -> . relational_statement GT add_statement
    (26) relational_statement -> . relational_statement LTEQ add_statement
    (27) relational_statement -> . relational_statement GTEQ add_statement
    (28) add_statement -> . multiply_statement
    (29) add_statement -> . add_statement PLUS multiply_statement
    (30) add_statement -> . add_statement MINUS multiply_statement
    (31) multiply_statement -> . unary_statement
    (32) multiply_statement -> . multiply_statement TIMES unary_statement
    (33) multiply_statement -> . multiply_statement DIVIDE unary_statement
    (34) multiply_statement -> . multiply_statement MOD unary_statement
    (35) unary_statement -> . exponent
    (36) unary_statement -> . MINUS unary_statement
    (37) unary_statement -> . NOT unary_statement
    (38) exponent -> . term
    (39) exponent -> . term POWER unary_statement
    (40) term -> . IDENTIFIER
    (41) term -> . atom
    (42) term -> . LPAREN expression RPAREN
    (43) atom -> . INTEGER
    (44) atom -> . FLOAT
    (45) atom -> . CHARACTER
    (46) atom -> . STRING
    (47) atom -> . TRUE
    (48) atom -> . FALSE
    (49) atom -> . LBRACKET elements RBRACKET
    (50) atom -> . IDENTIFIER LBRACKET INTEGER RBRACKET

    IDENTIFIER      shift and go to state 14
    MINUS           shift and go to state 23
    NOT             shift and go to state 26
    LPAREN          shift and go to state 13
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 29
    CHARACTER       shift and go to state 30
    STRING          shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    LBRACKET        shift and go to state 34

    expression                     shift and go to state 88
    assignment_statement           shift and go to state 11
    or_statement                   shift and go to state 17
    and_statement                  shift and go to state 18
    equality_statement             shift and go to state 19
    relational_statement           shift and go to state 20
    add_statement                  shift and go to state 21
    multiply_statement             shift and go to state 22
    unary_statement                shift and go to state 24
    exponent                       shift and go to state 25
    term                           shift and go to state 16
    atom                           shift and go to state 27

state 63

    (9) conditional_statement -> IF expression then_statement . else_statement ENDIF
    (10) conditional_statement -> IF expression then_statement . ENDIF
    (12) else_statement -> . ELSE start

    ENDIF           shift and go to state 90
    ELSE            shift and go to state 91

    else_statement                 shift and go to state 89

state 64

    (11) then_statement -> COLON . start
    (1) start -> . code_entity
    (2) code_entity -> . iterative_statement
    (3) code_entity -> . conditional_statement
    (4) code_entity -> . expression
    (5) code_entity -> . input_function
    (6) code_entity -> . output_function
    (7) iterative_statement -> . WHILE expression COLON start ENDWHILE
    (8) iterative_statement -> . FOR expression COMMA expression COMMA expression COLON start ENDFOR
    (9) conditional_statement -> . IF expression then_statement else_statement ENDIF
    (10) conditional_statement -> . IF expression then_statement ENDIF
    (13) expression -> . assignment_statement
    (54) input_function -> . INPUT LPAREN IDENTIFIER RPAREN
    (55) output_function -> . PRINT LPAREN term RPAREN
    (14) assignment_statement -> . or_statement
    (15) assignment_statement -> . IDENTIFIER EQUALS or_statement
    (16) or_statement -> . and_statement
    (17) or_statement -> . or_statement OR and_statement
    (18) and_statement -> . equality_statement
    (19) and_statement -> . and_statement AND equality_statement
    (20) equality_statement -> . relational_statement
    (21) equality_statement -> . equality_statement EQ relational_statement
    (22) equality_statement -> . equality_statement NEQ relational_statement
    (23) relational_statement -> . add_statement
    (24) relational_statement -> . relational_statement LT add_statement
    (25) relational_statement -> . relational_statement GT add_statement
    (26) relational_statement -> . relational_statement LTEQ add_statement
    (27) relational_statement -> . relational_statement GTEQ add_statement
    (28) add_statement -> . multiply_statement
    (29) add_statement -> . add_statement PLUS multiply_statement
    (30) add_statement -> . add_statement MINUS multiply_statement
    (31) multiply_statement -> . unary_statement
    (32) multiply_statement -> . multiply_statement TIMES unary_statement
    (33) multiply_statement -> . multiply_statement DIVIDE unary_statement
    (34) multiply_statement -> . multiply_statement MOD unary_statement
    (35) unary_statement -> . exponent
    (36) unary_statement -> . MINUS unary_statement
    (37) unary_statement -> . NOT unary_statement
    (38) exponent -> . term
    (39) exponent -> . term POWER unary_statement
    (40) term -> . IDENTIFIER
    (41) term -> . atom
    (42) term -> . LPAREN expression RPAREN
    (43) atom -> . INTEGER
    (44) atom -> . FLOAT
    (45) atom -> . CHARACTER
    (46) atom -> . STRING
    (47) atom -> . TRUE
    (48) atom -> . FALSE
    (49) atom -> . LBRACKET elements RBRACKET
    (50) atom -> . IDENTIFIER LBRACKET INTEGER RBRACKET

    WHILE           shift and go to state 8
    FOR             shift and go to state 9
    IF              shift and go to state 10
    INPUT           shift and go to state 12
    PRINT           shift and go to state 15
    IDENTIFIER      shift and go to state 14
    MINUS           shift and go to state 23
    NOT             shift and go to state 26
    LPAREN          shift and go to state 13
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 29
    CHARACTER       shift and go to state 30
    STRING          shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    LBRACKET        shift and go to state 34

    start                          shift and go to state 92
    code_entity                    shift and go to state 2
    iterative_statement            shift and go to state 3
    conditional_statement          shift and go to state 4
    expression                     shift and go to state 5
    input_function                 shift and go to state 6
    output_function                shift and go to state 7
    assignment_statement           shift and go to state 11
    term                           shift and go to state 16
    or_statement                   shift and go to state 17
    and_statement                  shift and go to state 18
    equality_statement             shift and go to state 19
    relational_statement           shift and go to state 20
    add_statement                  shift and go to state 21
    multiply_statement             shift and go to state 22
    unary_statement                shift and go to state 24
    exponent                       shift and go to state 25
    atom                           shift and go to state 27

state 65

    (54) input_function -> INPUT LPAREN IDENTIFIER . RPAREN

    RPAREN          shift and go to state 93


state 66

    (42) term -> LPAREN expression RPAREN .

    POWER           reduce using rule 42 (term -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 42 (term -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 42 (term -> LPAREN expression RPAREN .)
    MOD             reduce using rule 42 (term -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 42 (term -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 42 (term -> LPAREN expression RPAREN .)
    LT              reduce using rule 42 (term -> LPAREN expression RPAREN .)
    GT              reduce using rule 42 (term -> LPAREN expression RPAREN .)
    LTEQ            reduce using rule 42 (term -> LPAREN expression RPAREN .)
    GTEQ            reduce using rule 42 (term -> LPAREN expression RPAREN .)
    EQ              reduce using rule 42 (term -> LPAREN expression RPAREN .)
    NEQ             reduce using rule 42 (term -> LPAREN expression RPAREN .)
    AND             reduce using rule 42 (term -> LPAREN expression RPAREN .)
    OR              reduce using rule 42 (term -> LPAREN expression RPAREN .)
    $end            reduce using rule 42 (term -> LPAREN expression RPAREN .)
    COLON           reduce using rule 42 (term -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 42 (term -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 42 (term -> LPAREN expression RPAREN .)
    ENDWHILE        reduce using rule 42 (term -> LPAREN expression RPAREN .)
    ENDIF           reduce using rule 42 (term -> LPAREN expression RPAREN .)
    ELSE            reduce using rule 42 (term -> LPAREN expression RPAREN .)
    ENDFOR          reduce using rule 42 (term -> LPAREN expression RPAREN .)


state 67

    (15) assignment_statement -> IDENTIFIER EQUALS or_statement .
    (17) or_statement -> or_statement . OR and_statement

    $end            reduce using rule 15 (assignment_statement -> IDENTIFIER EQUALS or_statement .)
    COLON           reduce using rule 15 (assignment_statement -> IDENTIFIER EQUALS or_statement .)
    COMMA           reduce using rule 15 (assignment_statement -> IDENTIFIER EQUALS or_statement .)
    RPAREN          reduce using rule 15 (assignment_statement -> IDENTIFIER EQUALS or_statement .)
    ENDWHILE        reduce using rule 15 (assignment_statement -> IDENTIFIER EQUALS or_statement .)
    ENDIF           reduce using rule 15 (assignment_statement -> IDENTIFIER EQUALS or_statement .)
    ELSE            reduce using rule 15 (assignment_statement -> IDENTIFIER EQUALS or_statement .)
    ENDFOR          reduce using rule 15 (assignment_statement -> IDENTIFIER EQUALS or_statement .)
    OR              shift and go to state 44


state 68

    (50) atom -> IDENTIFIER LBRACKET INTEGER . RBRACKET

    RBRACKET        shift and go to state 94


state 69

    (55) output_function -> PRINT LPAREN term . RPAREN

    RPAREN          shift and go to state 95


state 70

    (39) exponent -> term POWER unary_statement .

    TIMES           reduce using rule 39 (exponent -> term POWER unary_statement .)
    DIVIDE          reduce using rule 39 (exponent -> term POWER unary_statement .)
    MOD             reduce using rule 39 (exponent -> term POWER unary_statement .)
    PLUS            reduce using rule 39 (exponent -> term POWER unary_statement .)
    MINUS           reduce using rule 39 (exponent -> term POWER unary_statement .)
    LT              reduce using rule 39 (exponent -> term POWER unary_statement .)
    GT              reduce using rule 39 (exponent -> term POWER unary_statement .)
    LTEQ            reduce using rule 39 (exponent -> term POWER unary_statement .)
    GTEQ            reduce using rule 39 (exponent -> term POWER unary_statement .)
    EQ              reduce using rule 39 (exponent -> term POWER unary_statement .)
    NEQ             reduce using rule 39 (exponent -> term POWER unary_statement .)
    AND             reduce using rule 39 (exponent -> term POWER unary_statement .)
    OR              reduce using rule 39 (exponent -> term POWER unary_statement .)
    $end            reduce using rule 39 (exponent -> term POWER unary_statement .)
    COLON           reduce using rule 39 (exponent -> term POWER unary_statement .)
    COMMA           reduce using rule 39 (exponent -> term POWER unary_statement .)
    RPAREN          reduce using rule 39 (exponent -> term POWER unary_statement .)
    ENDWHILE        reduce using rule 39 (exponent -> term POWER unary_statement .)
    ENDIF           reduce using rule 39 (exponent -> term POWER unary_statement .)
    ELSE            reduce using rule 39 (exponent -> term POWER unary_statement .)
    ENDFOR          reduce using rule 39 (exponent -> term POWER unary_statement .)


state 71

    (17) or_statement -> or_statement OR and_statement .
    (19) and_statement -> and_statement . AND equality_statement

    OR              reduce using rule 17 (or_statement -> or_statement OR and_statement .)
    $end            reduce using rule 17 (or_statement -> or_statement OR and_statement .)
    COLON           reduce using rule 17 (or_statement -> or_statement OR and_statement .)
    COMMA           reduce using rule 17 (or_statement -> or_statement OR and_statement .)
    RPAREN          reduce using rule 17 (or_statement -> or_statement OR and_statement .)
    ENDWHILE        reduce using rule 17 (or_statement -> or_statement OR and_statement .)
    ENDIF           reduce using rule 17 (or_statement -> or_statement OR and_statement .)
    ELSE            reduce using rule 17 (or_statement -> or_statement OR and_statement .)
    ENDFOR          reduce using rule 17 (or_statement -> or_statement OR and_statement .)
    AND             shift and go to state 45


state 72

    (19) and_statement -> and_statement AND equality_statement .
    (21) equality_statement -> equality_statement . EQ relational_statement
    (22) equality_statement -> equality_statement . NEQ relational_statement

    AND             reduce using rule 19 (and_statement -> and_statement AND equality_statement .)
    OR              reduce using rule 19 (and_statement -> and_statement AND equality_statement .)
    $end            reduce using rule 19 (and_statement -> and_statement AND equality_statement .)
    COLON           reduce using rule 19 (and_statement -> and_statement AND equality_statement .)
    COMMA           reduce using rule 19 (and_statement -> and_statement AND equality_statement .)
    RPAREN          reduce using rule 19 (and_statement -> and_statement AND equality_statement .)
    ENDWHILE        reduce using rule 19 (and_statement -> and_statement AND equality_statement .)
    ENDIF           reduce using rule 19 (and_statement -> and_statement AND equality_statement .)
    ELSE            reduce using rule 19 (and_statement -> and_statement AND equality_statement .)
    ENDFOR          reduce using rule 19 (and_statement -> and_statement AND equality_statement .)
    EQ              shift and go to state 46
    NEQ             shift and go to state 47


state 73

    (21) equality_statement -> equality_statement EQ relational_statement .
    (24) relational_statement -> relational_statement . LT add_statement
    (25) relational_statement -> relational_statement . GT add_statement
    (26) relational_statement -> relational_statement . LTEQ add_statement
    (27) relational_statement -> relational_statement . GTEQ add_statement

    EQ              reduce using rule 21 (equality_statement -> equality_statement EQ relational_statement .)
    NEQ             reduce using rule 21 (equality_statement -> equality_statement EQ relational_statement .)
    AND             reduce using rule 21 (equality_statement -> equality_statement EQ relational_statement .)
    OR              reduce using rule 21 (equality_statement -> equality_statement EQ relational_statement .)
    $end            reduce using rule 21 (equality_statement -> equality_statement EQ relational_statement .)
    COLON           reduce using rule 21 (equality_statement -> equality_statement EQ relational_statement .)
    COMMA           reduce using rule 21 (equality_statement -> equality_statement EQ relational_statement .)
    RPAREN          reduce using rule 21 (equality_statement -> equality_statement EQ relational_statement .)
    ENDWHILE        reduce using rule 21 (equality_statement -> equality_statement EQ relational_statement .)
    ENDIF           reduce using rule 21 (equality_statement -> equality_statement EQ relational_statement .)
    ELSE            reduce using rule 21 (equality_statement -> equality_statement EQ relational_statement .)
    ENDFOR          reduce using rule 21 (equality_statement -> equality_statement EQ relational_statement .)
    LT              shift and go to state 48
    GT              shift and go to state 49
    LTEQ            shift and go to state 50
    GTEQ            shift and go to state 51


state 74

    (22) equality_statement -> equality_statement NEQ relational_statement .
    (24) relational_statement -> relational_statement . LT add_statement
    (25) relational_statement -> relational_statement . GT add_statement
    (26) relational_statement -> relational_statement . LTEQ add_statement
    (27) relational_statement -> relational_statement . GTEQ add_statement

    EQ              reduce using rule 22 (equality_statement -> equality_statement NEQ relational_statement .)
    NEQ             reduce using rule 22 (equality_statement -> equality_statement NEQ relational_statement .)
    AND             reduce using rule 22 (equality_statement -> equality_statement NEQ relational_statement .)
    OR              reduce using rule 22 (equality_statement -> equality_statement NEQ relational_statement .)
    $end            reduce using rule 22 (equality_statement -> equality_statement NEQ relational_statement .)
    COLON           reduce using rule 22 (equality_statement -> equality_statement NEQ relational_statement .)
    COMMA           reduce using rule 22 (equality_statement -> equality_statement NEQ relational_statement .)
    RPAREN          reduce using rule 22 (equality_statement -> equality_statement NEQ relational_statement .)
    ENDWHILE        reduce using rule 22 (equality_statement -> equality_statement NEQ relational_statement .)
    ENDIF           reduce using rule 22 (equality_statement -> equality_statement NEQ relational_statement .)
    ELSE            reduce using rule 22 (equality_statement -> equality_statement NEQ relational_statement .)
    ENDFOR          reduce using rule 22 (equality_statement -> equality_statement NEQ relational_statement .)
    LT              shift and go to state 48
    GT              shift and go to state 49
    LTEQ            shift and go to state 50
    GTEQ            shift and go to state 51


state 75

    (24) relational_statement -> relational_statement LT add_statement .
    (29) add_statement -> add_statement . PLUS multiply_statement
    (30) add_statement -> add_statement . MINUS multiply_statement

    LT              reduce using rule 24 (relational_statement -> relational_statement LT add_statement .)
    GT              reduce using rule 24 (relational_statement -> relational_statement LT add_statement .)
    LTEQ            reduce using rule 24 (relational_statement -> relational_statement LT add_statement .)
    GTEQ            reduce using rule 24 (relational_statement -> relational_statement LT add_statement .)
    EQ              reduce using rule 24 (relational_statement -> relational_statement LT add_statement .)
    NEQ             reduce using rule 24 (relational_statement -> relational_statement LT add_statement .)
    AND             reduce using rule 24 (relational_statement -> relational_statement LT add_statement .)
    OR              reduce using rule 24 (relational_statement -> relational_statement LT add_statement .)
    $end            reduce using rule 24 (relational_statement -> relational_statement LT add_statement .)
    COLON           reduce using rule 24 (relational_statement -> relational_statement LT add_statement .)
    COMMA           reduce using rule 24 (relational_statement -> relational_statement LT add_statement .)
    RPAREN          reduce using rule 24 (relational_statement -> relational_statement LT add_statement .)
    ENDWHILE        reduce using rule 24 (relational_statement -> relational_statement LT add_statement .)
    ENDIF           reduce using rule 24 (relational_statement -> relational_statement LT add_statement .)
    ELSE            reduce using rule 24 (relational_statement -> relational_statement LT add_statement .)
    ENDFOR          reduce using rule 24 (relational_statement -> relational_statement LT add_statement .)
    PLUS            shift and go to state 52
    MINUS           shift and go to state 53


state 76

    (25) relational_statement -> relational_statement GT add_statement .
    (29) add_statement -> add_statement . PLUS multiply_statement
    (30) add_statement -> add_statement . MINUS multiply_statement

    LT              reduce using rule 25 (relational_statement -> relational_statement GT add_statement .)
    GT              reduce using rule 25 (relational_statement -> relational_statement GT add_statement .)
    LTEQ            reduce using rule 25 (relational_statement -> relational_statement GT add_statement .)
    GTEQ            reduce using rule 25 (relational_statement -> relational_statement GT add_statement .)
    EQ              reduce using rule 25 (relational_statement -> relational_statement GT add_statement .)
    NEQ             reduce using rule 25 (relational_statement -> relational_statement GT add_statement .)
    AND             reduce using rule 25 (relational_statement -> relational_statement GT add_statement .)
    OR              reduce using rule 25 (relational_statement -> relational_statement GT add_statement .)
    $end            reduce using rule 25 (relational_statement -> relational_statement GT add_statement .)
    COLON           reduce using rule 25 (relational_statement -> relational_statement GT add_statement .)
    COMMA           reduce using rule 25 (relational_statement -> relational_statement GT add_statement .)
    RPAREN          reduce using rule 25 (relational_statement -> relational_statement GT add_statement .)
    ENDWHILE        reduce using rule 25 (relational_statement -> relational_statement GT add_statement .)
    ENDIF           reduce using rule 25 (relational_statement -> relational_statement GT add_statement .)
    ELSE            reduce using rule 25 (relational_statement -> relational_statement GT add_statement .)
    ENDFOR          reduce using rule 25 (relational_statement -> relational_statement GT add_statement .)
    PLUS            shift and go to state 52
    MINUS           shift and go to state 53


state 77

    (26) relational_statement -> relational_statement LTEQ add_statement .
    (29) add_statement -> add_statement . PLUS multiply_statement
    (30) add_statement -> add_statement . MINUS multiply_statement

    LT              reduce using rule 26 (relational_statement -> relational_statement LTEQ add_statement .)
    GT              reduce using rule 26 (relational_statement -> relational_statement LTEQ add_statement .)
    LTEQ            reduce using rule 26 (relational_statement -> relational_statement LTEQ add_statement .)
    GTEQ            reduce using rule 26 (relational_statement -> relational_statement LTEQ add_statement .)
    EQ              reduce using rule 26 (relational_statement -> relational_statement LTEQ add_statement .)
    NEQ             reduce using rule 26 (relational_statement -> relational_statement LTEQ add_statement .)
    AND             reduce using rule 26 (relational_statement -> relational_statement LTEQ add_statement .)
    OR              reduce using rule 26 (relational_statement -> relational_statement LTEQ add_statement .)
    $end            reduce using rule 26 (relational_statement -> relational_statement LTEQ add_statement .)
    COLON           reduce using rule 26 (relational_statement -> relational_statement LTEQ add_statement .)
    COMMA           reduce using rule 26 (relational_statement -> relational_statement LTEQ add_statement .)
    RPAREN          reduce using rule 26 (relational_statement -> relational_statement LTEQ add_statement .)
    ENDWHILE        reduce using rule 26 (relational_statement -> relational_statement LTEQ add_statement .)
    ENDIF           reduce using rule 26 (relational_statement -> relational_statement LTEQ add_statement .)
    ELSE            reduce using rule 26 (relational_statement -> relational_statement LTEQ add_statement .)
    ENDFOR          reduce using rule 26 (relational_statement -> relational_statement LTEQ add_statement .)
    PLUS            shift and go to state 52
    MINUS           shift and go to state 53


state 78

    (27) relational_statement -> relational_statement GTEQ add_statement .
    (29) add_statement -> add_statement . PLUS multiply_statement
    (30) add_statement -> add_statement . MINUS multiply_statement

    LT              reduce using rule 27 (relational_statement -> relational_statement GTEQ add_statement .)
    GT              reduce using rule 27 (relational_statement -> relational_statement GTEQ add_statement .)
    LTEQ            reduce using rule 27 (relational_statement -> relational_statement GTEQ add_statement .)
    GTEQ            reduce using rule 27 (relational_statement -> relational_statement GTEQ add_statement .)
    EQ              reduce using rule 27 (relational_statement -> relational_statement GTEQ add_statement .)
    NEQ             reduce using rule 27 (relational_statement -> relational_statement GTEQ add_statement .)
    AND             reduce using rule 27 (relational_statement -> relational_statement GTEQ add_statement .)
    OR              reduce using rule 27 (relational_statement -> relational_statement GTEQ add_statement .)
    $end            reduce using rule 27 (relational_statement -> relational_statement GTEQ add_statement .)
    COLON           reduce using rule 27 (relational_statement -> relational_statement GTEQ add_statement .)
    COMMA           reduce using rule 27 (relational_statement -> relational_statement GTEQ add_statement .)
    RPAREN          reduce using rule 27 (relational_statement -> relational_statement GTEQ add_statement .)
    ENDWHILE        reduce using rule 27 (relational_statement -> relational_statement GTEQ add_statement .)
    ENDIF           reduce using rule 27 (relational_statement -> relational_statement GTEQ add_statement .)
    ELSE            reduce using rule 27 (relational_statement -> relational_statement GTEQ add_statement .)
    ENDFOR          reduce using rule 27 (relational_statement -> relational_statement GTEQ add_statement .)
    PLUS            shift and go to state 52
    MINUS           shift and go to state 53


state 79

    (29) add_statement -> add_statement PLUS multiply_statement .
    (32) multiply_statement -> multiply_statement . TIMES unary_statement
    (33) multiply_statement -> multiply_statement . DIVIDE unary_statement
    (34) multiply_statement -> multiply_statement . MOD unary_statement

    PLUS            reduce using rule 29 (add_statement -> add_statement PLUS multiply_statement .)
    MINUS           reduce using rule 29 (add_statement -> add_statement PLUS multiply_statement .)
    LT              reduce using rule 29 (add_statement -> add_statement PLUS multiply_statement .)
    GT              reduce using rule 29 (add_statement -> add_statement PLUS multiply_statement .)
    LTEQ            reduce using rule 29 (add_statement -> add_statement PLUS multiply_statement .)
    GTEQ            reduce using rule 29 (add_statement -> add_statement PLUS multiply_statement .)
    EQ              reduce using rule 29 (add_statement -> add_statement PLUS multiply_statement .)
    NEQ             reduce using rule 29 (add_statement -> add_statement PLUS multiply_statement .)
    AND             reduce using rule 29 (add_statement -> add_statement PLUS multiply_statement .)
    OR              reduce using rule 29 (add_statement -> add_statement PLUS multiply_statement .)
    $end            reduce using rule 29 (add_statement -> add_statement PLUS multiply_statement .)
    COLON           reduce using rule 29 (add_statement -> add_statement PLUS multiply_statement .)
    COMMA           reduce using rule 29 (add_statement -> add_statement PLUS multiply_statement .)
    RPAREN          reduce using rule 29 (add_statement -> add_statement PLUS multiply_statement .)
    ENDWHILE        reduce using rule 29 (add_statement -> add_statement PLUS multiply_statement .)
    ENDIF           reduce using rule 29 (add_statement -> add_statement PLUS multiply_statement .)
    ELSE            reduce using rule 29 (add_statement -> add_statement PLUS multiply_statement .)
    ENDFOR          reduce using rule 29 (add_statement -> add_statement PLUS multiply_statement .)
    TIMES           shift and go to state 54
    DIVIDE          shift and go to state 55
    MOD             shift and go to state 56


state 80

    (30) add_statement -> add_statement MINUS multiply_statement .
    (32) multiply_statement -> multiply_statement . TIMES unary_statement
    (33) multiply_statement -> multiply_statement . DIVIDE unary_statement
    (34) multiply_statement -> multiply_statement . MOD unary_statement

    PLUS            reduce using rule 30 (add_statement -> add_statement MINUS multiply_statement .)
    MINUS           reduce using rule 30 (add_statement -> add_statement MINUS multiply_statement .)
    LT              reduce using rule 30 (add_statement -> add_statement MINUS multiply_statement .)
    GT              reduce using rule 30 (add_statement -> add_statement MINUS multiply_statement .)
    LTEQ            reduce using rule 30 (add_statement -> add_statement MINUS multiply_statement .)
    GTEQ            reduce using rule 30 (add_statement -> add_statement MINUS multiply_statement .)
    EQ              reduce using rule 30 (add_statement -> add_statement MINUS multiply_statement .)
    NEQ             reduce using rule 30 (add_statement -> add_statement MINUS multiply_statement .)
    AND             reduce using rule 30 (add_statement -> add_statement MINUS multiply_statement .)
    OR              reduce using rule 30 (add_statement -> add_statement MINUS multiply_statement .)
    $end            reduce using rule 30 (add_statement -> add_statement MINUS multiply_statement .)
    COLON           reduce using rule 30 (add_statement -> add_statement MINUS multiply_statement .)
    COMMA           reduce using rule 30 (add_statement -> add_statement MINUS multiply_statement .)
    RPAREN          reduce using rule 30 (add_statement -> add_statement MINUS multiply_statement .)
    ENDWHILE        reduce using rule 30 (add_statement -> add_statement MINUS multiply_statement .)
    ENDIF           reduce using rule 30 (add_statement -> add_statement MINUS multiply_statement .)
    ELSE            reduce using rule 30 (add_statement -> add_statement MINUS multiply_statement .)
    ENDFOR          reduce using rule 30 (add_statement -> add_statement MINUS multiply_statement .)
    TIMES           shift and go to state 54
    DIVIDE          shift and go to state 55
    MOD             shift and go to state 56


state 81

    (32) multiply_statement -> multiply_statement TIMES unary_statement .

    TIMES           reduce using rule 32 (multiply_statement -> multiply_statement TIMES unary_statement .)
    DIVIDE          reduce using rule 32 (multiply_statement -> multiply_statement TIMES unary_statement .)
    MOD             reduce using rule 32 (multiply_statement -> multiply_statement TIMES unary_statement .)
    PLUS            reduce using rule 32 (multiply_statement -> multiply_statement TIMES unary_statement .)
    MINUS           reduce using rule 32 (multiply_statement -> multiply_statement TIMES unary_statement .)
    LT              reduce using rule 32 (multiply_statement -> multiply_statement TIMES unary_statement .)
    GT              reduce using rule 32 (multiply_statement -> multiply_statement TIMES unary_statement .)
    LTEQ            reduce using rule 32 (multiply_statement -> multiply_statement TIMES unary_statement .)
    GTEQ            reduce using rule 32 (multiply_statement -> multiply_statement TIMES unary_statement .)
    EQ              reduce using rule 32 (multiply_statement -> multiply_statement TIMES unary_statement .)
    NEQ             reduce using rule 32 (multiply_statement -> multiply_statement TIMES unary_statement .)
    AND             reduce using rule 32 (multiply_statement -> multiply_statement TIMES unary_statement .)
    OR              reduce using rule 32 (multiply_statement -> multiply_statement TIMES unary_statement .)
    $end            reduce using rule 32 (multiply_statement -> multiply_statement TIMES unary_statement .)
    COLON           reduce using rule 32 (multiply_statement -> multiply_statement TIMES unary_statement .)
    COMMA           reduce using rule 32 (multiply_statement -> multiply_statement TIMES unary_statement .)
    RPAREN          reduce using rule 32 (multiply_statement -> multiply_statement TIMES unary_statement .)
    ENDWHILE        reduce using rule 32 (multiply_statement -> multiply_statement TIMES unary_statement .)
    ENDIF           reduce using rule 32 (multiply_statement -> multiply_statement TIMES unary_statement .)
    ELSE            reduce using rule 32 (multiply_statement -> multiply_statement TIMES unary_statement .)
    ENDFOR          reduce using rule 32 (multiply_statement -> multiply_statement TIMES unary_statement .)


state 82

    (33) multiply_statement -> multiply_statement DIVIDE unary_statement .

    TIMES           reduce using rule 33 (multiply_statement -> multiply_statement DIVIDE unary_statement .)
    DIVIDE          reduce using rule 33 (multiply_statement -> multiply_statement DIVIDE unary_statement .)
    MOD             reduce using rule 33 (multiply_statement -> multiply_statement DIVIDE unary_statement .)
    PLUS            reduce using rule 33 (multiply_statement -> multiply_statement DIVIDE unary_statement .)
    MINUS           reduce using rule 33 (multiply_statement -> multiply_statement DIVIDE unary_statement .)
    LT              reduce using rule 33 (multiply_statement -> multiply_statement DIVIDE unary_statement .)
    GT              reduce using rule 33 (multiply_statement -> multiply_statement DIVIDE unary_statement .)
    LTEQ            reduce using rule 33 (multiply_statement -> multiply_statement DIVIDE unary_statement .)
    GTEQ            reduce using rule 33 (multiply_statement -> multiply_statement DIVIDE unary_statement .)
    EQ              reduce using rule 33 (multiply_statement -> multiply_statement DIVIDE unary_statement .)
    NEQ             reduce using rule 33 (multiply_statement -> multiply_statement DIVIDE unary_statement .)
    AND             reduce using rule 33 (multiply_statement -> multiply_statement DIVIDE unary_statement .)
    OR              reduce using rule 33 (multiply_statement -> multiply_statement DIVIDE unary_statement .)
    $end            reduce using rule 33 (multiply_statement -> multiply_statement DIVIDE unary_statement .)
    COLON           reduce using rule 33 (multiply_statement -> multiply_statement DIVIDE unary_statement .)
    COMMA           reduce using rule 33 (multiply_statement -> multiply_statement DIVIDE unary_statement .)
    RPAREN          reduce using rule 33 (multiply_statement -> multiply_statement DIVIDE unary_statement .)
    ENDWHILE        reduce using rule 33 (multiply_statement -> multiply_statement DIVIDE unary_statement .)
    ENDIF           reduce using rule 33 (multiply_statement -> multiply_statement DIVIDE unary_statement .)
    ELSE            reduce using rule 33 (multiply_statement -> multiply_statement DIVIDE unary_statement .)
    ENDFOR          reduce using rule 33 (multiply_statement -> multiply_statement DIVIDE unary_statement .)


state 83

    (34) multiply_statement -> multiply_statement MOD unary_statement .

    TIMES           reduce using rule 34 (multiply_statement -> multiply_statement MOD unary_statement .)
    DIVIDE          reduce using rule 34 (multiply_statement -> multiply_statement MOD unary_statement .)
    MOD             reduce using rule 34 (multiply_statement -> multiply_statement MOD unary_statement .)
    PLUS            reduce using rule 34 (multiply_statement -> multiply_statement MOD unary_statement .)
    MINUS           reduce using rule 34 (multiply_statement -> multiply_statement MOD unary_statement .)
    LT              reduce using rule 34 (multiply_statement -> multiply_statement MOD unary_statement .)
    GT              reduce using rule 34 (multiply_statement -> multiply_statement MOD unary_statement .)
    LTEQ            reduce using rule 34 (multiply_statement -> multiply_statement MOD unary_statement .)
    GTEQ            reduce using rule 34 (multiply_statement -> multiply_statement MOD unary_statement .)
    EQ              reduce using rule 34 (multiply_statement -> multiply_statement MOD unary_statement .)
    NEQ             reduce using rule 34 (multiply_statement -> multiply_statement MOD unary_statement .)
    AND             reduce using rule 34 (multiply_statement -> multiply_statement MOD unary_statement .)
    OR              reduce using rule 34 (multiply_statement -> multiply_statement MOD unary_statement .)
    $end            reduce using rule 34 (multiply_statement -> multiply_statement MOD unary_statement .)
    COLON           reduce using rule 34 (multiply_statement -> multiply_statement MOD unary_statement .)
    COMMA           reduce using rule 34 (multiply_statement -> multiply_statement MOD unary_statement .)
    RPAREN          reduce using rule 34 (multiply_statement -> multiply_statement MOD unary_statement .)
    ENDWHILE        reduce using rule 34 (multiply_statement -> multiply_statement MOD unary_statement .)
    ENDIF           reduce using rule 34 (multiply_statement -> multiply_statement MOD unary_statement .)
    ELSE            reduce using rule 34 (multiply_statement -> multiply_statement MOD unary_statement .)
    ENDFOR          reduce using rule 34 (multiply_statement -> multiply_statement MOD unary_statement .)


state 84

    (49) atom -> LBRACKET elements RBRACKET .

    POWER           reduce using rule 49 (atom -> LBRACKET elements RBRACKET .)
    TIMES           reduce using rule 49 (atom -> LBRACKET elements RBRACKET .)
    DIVIDE          reduce using rule 49 (atom -> LBRACKET elements RBRACKET .)
    MOD             reduce using rule 49 (atom -> LBRACKET elements RBRACKET .)
    PLUS            reduce using rule 49 (atom -> LBRACKET elements RBRACKET .)
    MINUS           reduce using rule 49 (atom -> LBRACKET elements RBRACKET .)
    LT              reduce using rule 49 (atom -> LBRACKET elements RBRACKET .)
    GT              reduce using rule 49 (atom -> LBRACKET elements RBRACKET .)
    LTEQ            reduce using rule 49 (atom -> LBRACKET elements RBRACKET .)
    GTEQ            reduce using rule 49 (atom -> LBRACKET elements RBRACKET .)
    EQ              reduce using rule 49 (atom -> LBRACKET elements RBRACKET .)
    NEQ             reduce using rule 49 (atom -> LBRACKET elements RBRACKET .)
    AND             reduce using rule 49 (atom -> LBRACKET elements RBRACKET .)
    OR              reduce using rule 49 (atom -> LBRACKET elements RBRACKET .)
    $end            reduce using rule 49 (atom -> LBRACKET elements RBRACKET .)
    COLON           reduce using rule 49 (atom -> LBRACKET elements RBRACKET .)
    COMMA           reduce using rule 49 (atom -> LBRACKET elements RBRACKET .)
    RPAREN          reduce using rule 49 (atom -> LBRACKET elements RBRACKET .)
    ENDWHILE        reduce using rule 49 (atom -> LBRACKET elements RBRACKET .)
    ENDIF           reduce using rule 49 (atom -> LBRACKET elements RBRACKET .)
    ELSE            reduce using rule 49 (atom -> LBRACKET elements RBRACKET .)
    ENDFOR          reduce using rule 49 (atom -> LBRACKET elements RBRACKET .)


state 85

    (51) elements -> elements INTEGER .

    RBRACKET        reduce using rule 51 (elements -> elements INTEGER .)
    INTEGER         reduce using rule 51 (elements -> elements INTEGER .)
    FLOAT           reduce using rule 51 (elements -> elements INTEGER .)


state 86

    (52) elements -> elements FLOAT .

    RBRACKET        reduce using rule 52 (elements -> elements FLOAT .)
    INTEGER         reduce using rule 52 (elements -> elements FLOAT .)
    FLOAT           reduce using rule 52 (elements -> elements FLOAT .)


state 87

    (7) iterative_statement -> WHILE expression COLON start . ENDWHILE

    ENDWHILE        shift and go to state 96


state 88

    (8) iterative_statement -> FOR expression COMMA expression . COMMA expression COLON start ENDFOR

    COMMA           shift and go to state 97


state 89

    (9) conditional_statement -> IF expression then_statement else_statement . ENDIF

    ENDIF           shift and go to state 98


state 90

    (10) conditional_statement -> IF expression then_statement ENDIF .

    $end            reduce using rule 10 (conditional_statement -> IF expression then_statement ENDIF .)
    ENDWHILE        reduce using rule 10 (conditional_statement -> IF expression then_statement ENDIF .)
    ENDIF           reduce using rule 10 (conditional_statement -> IF expression then_statement ENDIF .)
    ELSE            reduce using rule 10 (conditional_statement -> IF expression then_statement ENDIF .)
    ENDFOR          reduce using rule 10 (conditional_statement -> IF expression then_statement ENDIF .)


state 91

    (12) else_statement -> ELSE . start
    (1) start -> . code_entity
    (2) code_entity -> . iterative_statement
    (3) code_entity -> . conditional_statement
    (4) code_entity -> . expression
    (5) code_entity -> . input_function
    (6) code_entity -> . output_function
    (7) iterative_statement -> . WHILE expression COLON start ENDWHILE
    (8) iterative_statement -> . FOR expression COMMA expression COMMA expression COLON start ENDFOR
    (9) conditional_statement -> . IF expression then_statement else_statement ENDIF
    (10) conditional_statement -> . IF expression then_statement ENDIF
    (13) expression -> . assignment_statement
    (54) input_function -> . INPUT LPAREN IDENTIFIER RPAREN
    (55) output_function -> . PRINT LPAREN term RPAREN
    (14) assignment_statement -> . or_statement
    (15) assignment_statement -> . IDENTIFIER EQUALS or_statement
    (16) or_statement -> . and_statement
    (17) or_statement -> . or_statement OR and_statement
    (18) and_statement -> . equality_statement
    (19) and_statement -> . and_statement AND equality_statement
    (20) equality_statement -> . relational_statement
    (21) equality_statement -> . equality_statement EQ relational_statement
    (22) equality_statement -> . equality_statement NEQ relational_statement
    (23) relational_statement -> . add_statement
    (24) relational_statement -> . relational_statement LT add_statement
    (25) relational_statement -> . relational_statement GT add_statement
    (26) relational_statement -> . relational_statement LTEQ add_statement
    (27) relational_statement -> . relational_statement GTEQ add_statement
    (28) add_statement -> . multiply_statement
    (29) add_statement -> . add_statement PLUS multiply_statement
    (30) add_statement -> . add_statement MINUS multiply_statement
    (31) multiply_statement -> . unary_statement
    (32) multiply_statement -> . multiply_statement TIMES unary_statement
    (33) multiply_statement -> . multiply_statement DIVIDE unary_statement
    (34) multiply_statement -> . multiply_statement MOD unary_statement
    (35) unary_statement -> . exponent
    (36) unary_statement -> . MINUS unary_statement
    (37) unary_statement -> . NOT unary_statement
    (38) exponent -> . term
    (39) exponent -> . term POWER unary_statement
    (40) term -> . IDENTIFIER
    (41) term -> . atom
    (42) term -> . LPAREN expression RPAREN
    (43) atom -> . INTEGER
    (44) atom -> . FLOAT
    (45) atom -> . CHARACTER
    (46) atom -> . STRING
    (47) atom -> . TRUE
    (48) atom -> . FALSE
    (49) atom -> . LBRACKET elements RBRACKET
    (50) atom -> . IDENTIFIER LBRACKET INTEGER RBRACKET

    WHILE           shift and go to state 8
    FOR             shift and go to state 9
    IF              shift and go to state 10
    INPUT           shift and go to state 12
    PRINT           shift and go to state 15
    IDENTIFIER      shift and go to state 14
    MINUS           shift and go to state 23
    NOT             shift and go to state 26
    LPAREN          shift and go to state 13
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 29
    CHARACTER       shift and go to state 30
    STRING          shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    LBRACKET        shift and go to state 34

    start                          shift and go to state 99
    code_entity                    shift and go to state 2
    iterative_statement            shift and go to state 3
    conditional_statement          shift and go to state 4
    expression                     shift and go to state 5
    input_function                 shift and go to state 6
    output_function                shift and go to state 7
    assignment_statement           shift and go to state 11
    term                           shift and go to state 16
    or_statement                   shift and go to state 17
    and_statement                  shift and go to state 18
    equality_statement             shift and go to state 19
    relational_statement           shift and go to state 20
    add_statement                  shift and go to state 21
    multiply_statement             shift and go to state 22
    unary_statement                shift and go to state 24
    exponent                       shift and go to state 25
    atom                           shift and go to state 27

state 92

    (11) then_statement -> COLON start .

    ENDIF           reduce using rule 11 (then_statement -> COLON start .)
    ELSE            reduce using rule 11 (then_statement -> COLON start .)


state 93

    (54) input_function -> INPUT LPAREN IDENTIFIER RPAREN .

    $end            reduce using rule 54 (input_function -> INPUT LPAREN IDENTIFIER RPAREN .)
    ENDWHILE        reduce using rule 54 (input_function -> INPUT LPAREN IDENTIFIER RPAREN .)
    ENDIF           reduce using rule 54 (input_function -> INPUT LPAREN IDENTIFIER RPAREN .)
    ELSE            reduce using rule 54 (input_function -> INPUT LPAREN IDENTIFIER RPAREN .)
    ENDFOR          reduce using rule 54 (input_function -> INPUT LPAREN IDENTIFIER RPAREN .)


state 94

    (50) atom -> IDENTIFIER LBRACKET INTEGER RBRACKET .

    POWER           reduce using rule 50 (atom -> IDENTIFIER LBRACKET INTEGER RBRACKET .)
    TIMES           reduce using rule 50 (atom -> IDENTIFIER LBRACKET INTEGER RBRACKET .)
    DIVIDE          reduce using rule 50 (atom -> IDENTIFIER LBRACKET INTEGER RBRACKET .)
    MOD             reduce using rule 50 (atom -> IDENTIFIER LBRACKET INTEGER RBRACKET .)
    PLUS            reduce using rule 50 (atom -> IDENTIFIER LBRACKET INTEGER RBRACKET .)
    MINUS           reduce using rule 50 (atom -> IDENTIFIER LBRACKET INTEGER RBRACKET .)
    LT              reduce using rule 50 (atom -> IDENTIFIER LBRACKET INTEGER RBRACKET .)
    GT              reduce using rule 50 (atom -> IDENTIFIER LBRACKET INTEGER RBRACKET .)
    LTEQ            reduce using rule 50 (atom -> IDENTIFIER LBRACKET INTEGER RBRACKET .)
    GTEQ            reduce using rule 50 (atom -> IDENTIFIER LBRACKET INTEGER RBRACKET .)
    EQ              reduce using rule 50 (atom -> IDENTIFIER LBRACKET INTEGER RBRACKET .)
    NEQ             reduce using rule 50 (atom -> IDENTIFIER LBRACKET INTEGER RBRACKET .)
    AND             reduce using rule 50 (atom -> IDENTIFIER LBRACKET INTEGER RBRACKET .)
    OR              reduce using rule 50 (atom -> IDENTIFIER LBRACKET INTEGER RBRACKET .)
    $end            reduce using rule 50 (atom -> IDENTIFIER LBRACKET INTEGER RBRACKET .)
    COLON           reduce using rule 50 (atom -> IDENTIFIER LBRACKET INTEGER RBRACKET .)
    COMMA           reduce using rule 50 (atom -> IDENTIFIER LBRACKET INTEGER RBRACKET .)
    RPAREN          reduce using rule 50 (atom -> IDENTIFIER LBRACKET INTEGER RBRACKET .)
    ENDWHILE        reduce using rule 50 (atom -> IDENTIFIER LBRACKET INTEGER RBRACKET .)
    ENDIF           reduce using rule 50 (atom -> IDENTIFIER LBRACKET INTEGER RBRACKET .)
    ELSE            reduce using rule 50 (atom -> IDENTIFIER LBRACKET INTEGER RBRACKET .)
    ENDFOR          reduce using rule 50 (atom -> IDENTIFIER LBRACKET INTEGER RBRACKET .)


state 95

    (55) output_function -> PRINT LPAREN term RPAREN .

    $end            reduce using rule 55 (output_function -> PRINT LPAREN term RPAREN .)
    ENDWHILE        reduce using rule 55 (output_function -> PRINT LPAREN term RPAREN .)
    ENDIF           reduce using rule 55 (output_function -> PRINT LPAREN term RPAREN .)
    ELSE            reduce using rule 55 (output_function -> PRINT LPAREN term RPAREN .)
    ENDFOR          reduce using rule 55 (output_function -> PRINT LPAREN term RPAREN .)


state 96

    (7) iterative_statement -> WHILE expression COLON start ENDWHILE .

    $end            reduce using rule 7 (iterative_statement -> WHILE expression COLON start ENDWHILE .)
    ENDWHILE        reduce using rule 7 (iterative_statement -> WHILE expression COLON start ENDWHILE .)
    ENDIF           reduce using rule 7 (iterative_statement -> WHILE expression COLON start ENDWHILE .)
    ELSE            reduce using rule 7 (iterative_statement -> WHILE expression COLON start ENDWHILE .)
    ENDFOR          reduce using rule 7 (iterative_statement -> WHILE expression COLON start ENDWHILE .)


state 97

    (8) iterative_statement -> FOR expression COMMA expression COMMA . expression COLON start ENDFOR
    (13) expression -> . assignment_statement
    (14) assignment_statement -> . or_statement
    (15) assignment_statement -> . IDENTIFIER EQUALS or_statement
    (16) or_statement -> . and_statement
    (17) or_statement -> . or_statement OR and_statement
    (18) and_statement -> . equality_statement
    (19) and_statement -> . and_statement AND equality_statement
    (20) equality_statement -> . relational_statement
    (21) equality_statement -> . equality_statement EQ relational_statement
    (22) equality_statement -> . equality_statement NEQ relational_statement
    (23) relational_statement -> . add_statement
    (24) relational_statement -> . relational_statement LT add_statement
    (25) relational_statement -> . relational_statement GT add_statement
    (26) relational_statement -> . relational_statement LTEQ add_statement
    (27) relational_statement -> . relational_statement GTEQ add_statement
    (28) add_statement -> . multiply_statement
    (29) add_statement -> . add_statement PLUS multiply_statement
    (30) add_statement -> . add_statement MINUS multiply_statement
    (31) multiply_statement -> . unary_statement
    (32) multiply_statement -> . multiply_statement TIMES unary_statement
    (33) multiply_statement -> . multiply_statement DIVIDE unary_statement
    (34) multiply_statement -> . multiply_statement MOD unary_statement
    (35) unary_statement -> . exponent
    (36) unary_statement -> . MINUS unary_statement
    (37) unary_statement -> . NOT unary_statement
    (38) exponent -> . term
    (39) exponent -> . term POWER unary_statement
    (40) term -> . IDENTIFIER
    (41) term -> . atom
    (42) term -> . LPAREN expression RPAREN
    (43) atom -> . INTEGER
    (44) atom -> . FLOAT
    (45) atom -> . CHARACTER
    (46) atom -> . STRING
    (47) atom -> . TRUE
    (48) atom -> . FALSE
    (49) atom -> . LBRACKET elements RBRACKET
    (50) atom -> . IDENTIFIER LBRACKET INTEGER RBRACKET

    IDENTIFIER      shift and go to state 14
    MINUS           shift and go to state 23
    NOT             shift and go to state 26
    LPAREN          shift and go to state 13
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 29
    CHARACTER       shift and go to state 30
    STRING          shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    LBRACKET        shift and go to state 34

    expression                     shift and go to state 100
    assignment_statement           shift and go to state 11
    or_statement                   shift and go to state 17
    and_statement                  shift and go to state 18
    equality_statement             shift and go to state 19
    relational_statement           shift and go to state 20
    add_statement                  shift and go to state 21
    multiply_statement             shift and go to state 22
    unary_statement                shift and go to state 24
    exponent                       shift and go to state 25
    term                           shift and go to state 16
    atom                           shift and go to state 27

state 98

    (9) conditional_statement -> IF expression then_statement else_statement ENDIF .

    $end            reduce using rule 9 (conditional_statement -> IF expression then_statement else_statement ENDIF .)
    ENDWHILE        reduce using rule 9 (conditional_statement -> IF expression then_statement else_statement ENDIF .)
    ENDIF           reduce using rule 9 (conditional_statement -> IF expression then_statement else_statement ENDIF .)
    ELSE            reduce using rule 9 (conditional_statement -> IF expression then_statement else_statement ENDIF .)
    ENDFOR          reduce using rule 9 (conditional_statement -> IF expression then_statement else_statement ENDIF .)


state 99

    (12) else_statement -> ELSE start .

    ENDIF           reduce using rule 12 (else_statement -> ELSE start .)


state 100

    (8) iterative_statement -> FOR expression COMMA expression COMMA expression . COLON start ENDFOR

    COLON           shift and go to state 101


state 101

    (8) iterative_statement -> FOR expression COMMA expression COMMA expression COLON . start ENDFOR
    (1) start -> . code_entity
    (2) code_entity -> . iterative_statement
    (3) code_entity -> . conditional_statement
    (4) code_entity -> . expression
    (5) code_entity -> . input_function
    (6) code_entity -> . output_function
    (7) iterative_statement -> . WHILE expression COLON start ENDWHILE
    (8) iterative_statement -> . FOR expression COMMA expression COMMA expression COLON start ENDFOR
    (9) conditional_statement -> . IF expression then_statement else_statement ENDIF
    (10) conditional_statement -> . IF expression then_statement ENDIF
    (13) expression -> . assignment_statement
    (54) input_function -> . INPUT LPAREN IDENTIFIER RPAREN
    (55) output_function -> . PRINT LPAREN term RPAREN
    (14) assignment_statement -> . or_statement
    (15) assignment_statement -> . IDENTIFIER EQUALS or_statement
    (16) or_statement -> . and_statement
    (17) or_statement -> . or_statement OR and_statement
    (18) and_statement -> . equality_statement
    (19) and_statement -> . and_statement AND equality_statement
    (20) equality_statement -> . relational_statement
    (21) equality_statement -> . equality_statement EQ relational_statement
    (22) equality_statement -> . equality_statement NEQ relational_statement
    (23) relational_statement -> . add_statement
    (24) relational_statement -> . relational_statement LT add_statement
    (25) relational_statement -> . relational_statement GT add_statement
    (26) relational_statement -> . relational_statement LTEQ add_statement
    (27) relational_statement -> . relational_statement GTEQ add_statement
    (28) add_statement -> . multiply_statement
    (29) add_statement -> . add_statement PLUS multiply_statement
    (30) add_statement -> . add_statement MINUS multiply_statement
    (31) multiply_statement -> . unary_statement
    (32) multiply_statement -> . multiply_statement TIMES unary_statement
    (33) multiply_statement -> . multiply_statement DIVIDE unary_statement
    (34) multiply_statement -> . multiply_statement MOD unary_statement
    (35) unary_statement -> . exponent
    (36) unary_statement -> . MINUS unary_statement
    (37) unary_statement -> . NOT unary_statement
    (38) exponent -> . term
    (39) exponent -> . term POWER unary_statement
    (40) term -> . IDENTIFIER
    (41) term -> . atom
    (42) term -> . LPAREN expression RPAREN
    (43) atom -> . INTEGER
    (44) atom -> . FLOAT
    (45) atom -> . CHARACTER
    (46) atom -> . STRING
    (47) atom -> . TRUE
    (48) atom -> . FALSE
    (49) atom -> . LBRACKET elements RBRACKET
    (50) atom -> . IDENTIFIER LBRACKET INTEGER RBRACKET

    WHILE           shift and go to state 8
    FOR             shift and go to state 9
    IF              shift and go to state 10
    INPUT           shift and go to state 12
    PRINT           shift and go to state 15
    IDENTIFIER      shift and go to state 14
    MINUS           shift and go to state 23
    NOT             shift and go to state 26
    LPAREN          shift and go to state 13
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 29
    CHARACTER       shift and go to state 30
    STRING          shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    LBRACKET        shift and go to state 34

    expression                     shift and go to state 5
    start                          shift and go to state 102
    code_entity                    shift and go to state 2
    iterative_statement            shift and go to state 3
    conditional_statement          shift and go to state 4
    input_function                 shift and go to state 6
    output_function                shift and go to state 7
    assignment_statement           shift and go to state 11
    term                           shift and go to state 16
    or_statement                   shift and go to state 17
    and_statement                  shift and go to state 18
    equality_statement             shift and go to state 19
    relational_statement           shift and go to state 20
    add_statement                  shift and go to state 21
    multiply_statement             shift and go to state 22
    unary_statement                shift and go to state 24
    exponent                       shift and go to state 25
    atom                           shift and go to state 27

state 102

    (8) iterative_statement -> FOR expression COMMA expression COMMA expression COLON start . ENDFOR

    ENDFOR          shift and go to state 103


state 103

    (8) iterative_statement -> FOR expression COMMA expression COMMA expression COLON start ENDFOR .

    $end            reduce using rule 8 (iterative_statement -> FOR expression COMMA expression COMMA expression COLON start ENDFOR .)
    ENDWHILE        reduce using rule 8 (iterative_statement -> FOR expression COMMA expression COMMA expression COLON start ENDFOR .)
    ENDIF           reduce using rule 8 (iterative_statement -> FOR expression COMMA expression COMMA expression COLON start ENDFOR .)
    ELSE            reduce using rule 8 (iterative_statement -> FOR expression COMMA expression COMMA expression COLON start ENDFOR .)
    ENDFOR          reduce using rule 8 (iterative_statement -> FOR expression COMMA expression COMMA expression COLON start ENDFOR .)

