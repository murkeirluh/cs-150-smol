Created by PLY version 3.10 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> start
Rule 1     start -> code_entity
Rule 2     code_entity -> iterative_statement
Rule 3     code_entity -> conditional_statement
Rule 4     code_entity -> expression
Rule 5     code_entity -> input_function
Rule 6     code_entity -> output_function
Rule 7     iterative_statement -> WHILE expression COLON start ENDWHILE
Rule 8     iterative_statement -> FOR expression COMMA expression COMMA expression COLON start ENDFOR
Rule 9     conditional_statement -> IF expression seen_exp COLON start seen_start ELSE seen_else start seen_start ENDIF
Rule 10    conditional_statement -> IF expression seen_exp COLON start seen_start ENDIF
Rule 11    seen_exp -> <empty>
Rule 12    seen_else -> <empty>
Rule 13    seen_start -> <empty>
Rule 14    expression -> assignment_statement
Rule 15    assignment_statement -> or_statement
Rule 16    assignment_statement -> IDENTIFIER EQUALS or_statement
Rule 17    or_statement -> and_statement
Rule 18    or_statement -> or_statement OR and_statement
Rule 19    and_statement -> equality_statement
Rule 20    and_statement -> and_statement AND equality_statement
Rule 21    equality_statement -> relational_statement
Rule 22    equality_statement -> equality_statement EQ relational_statement
Rule 23    equality_statement -> equality_statement NEQ relational_statement
Rule 24    relational_statement -> add_statement
Rule 25    relational_statement -> relational_statement LT add_statement
Rule 26    relational_statement -> relational_statement GT add_statement
Rule 27    relational_statement -> relational_statement LTEQ add_statement
Rule 28    relational_statement -> relational_statement GTEQ add_statement
Rule 29    add_statement -> multiply_statement
Rule 30    add_statement -> add_statement PLUS multiply_statement
Rule 31    add_statement -> add_statement MINUS multiply_statement
Rule 32    multiply_statement -> unary_statement
Rule 33    multiply_statement -> multiply_statement TIMES unary_statement
Rule 34    multiply_statement -> multiply_statement DIVIDE unary_statement
Rule 35    multiply_statement -> multiply_statement MOD unary_statement
Rule 36    unary_statement -> exponent
Rule 37    unary_statement -> MINUS unary_statement
Rule 38    unary_statement -> NOT unary_statement
Rule 39    exponent -> term
Rule 40    exponent -> term POWER unary_statement
Rule 41    term -> IDENTIFIER
Rule 42    term -> atom
Rule 43    term -> LPAREN expression RPAREN
Rule 44    atom -> INTEGER
Rule 45    atom -> FLOAT
Rule 46    atom -> CHARACTER
Rule 47    atom -> STRING
Rule 48    atom -> TRUE
Rule 49    atom -> FALSE
Rule 50    atom -> LBRACKET elements RBRACKET
Rule 51    atom -> IDENTIFIER LBRACKET INTEGER RBRACKET
Rule 52    elements -> elements INTEGER
Rule 53    elements -> elements FLOAT
Rule 54    elements -> <empty>
Rule 55    input_function -> INPUT LPAREN IDENTIFIER RPAREN
Rule 56    output_function -> PRINT LPAREN term RPAREN

Terminals, with rules where they appear

AND                  : 20
CHARACTER            : 46
COLON                : 7 8 9 10
COMMA                : 8 8
DIVIDE               : 34
ELSE                 : 9
ENDFOR               : 8
ENDIF                : 9 10
ENDWHILE             : 7
EQ                   : 22
EQUALS               : 16
FALSE                : 49
FLOAT                : 45 53
FOR                  : 8
GT                   : 26
GTEQ                 : 28
IDENTIFIER           : 16 41 51 55
IF                   : 9 10
INPUT                : 55
INTEGER              : 44 51 52
LBRACKET             : 50 51
LPAREN               : 43 55 56
LT                   : 25
LTEQ                 : 27
MINUS                : 31 37
MOD                  : 35
NEQ                  : 23
NOT                  : 38
OR                   : 18
PLUS                 : 30
POWER                : 40
PRINT                : 56
RBRACKET             : 50 51
RPAREN               : 43 55 56
STRING               : 47
TIMES                : 33
TRUE                 : 48
WHILE                : 7
error                : 

Nonterminals, with rules where they appear

add_statement        : 24 25 26 27 28 30 31
and_statement        : 17 18 20
assignment_statement : 14
atom                 : 42
code_entity          : 1
conditional_statement : 3
elements             : 50 52 53
equality_statement   : 19 20 22 23
exponent             : 36
expression           : 4 7 8 8 8 9 10 43
input_function       : 5
iterative_statement  : 2
multiply_statement   : 29 30 31 33 34 35
or_statement         : 15 16 18
output_function      : 6
relational_statement : 21 22 23 25 26 27 28
seen_else            : 9
seen_exp             : 9 10
seen_start           : 9 9 10
start                : 7 8 9 9 10 0
term                 : 39 40 56
unary_statement      : 32 33 34 35 37 38 40

Parsing method: LALR

state 0

    (0) S' -> . start
    (1) start -> . code_entity
    (2) code_entity -> . iterative_statement
    (3) code_entity -> . conditional_statement
    (4) code_entity -> . expression
    (5) code_entity -> . input_function
    (6) code_entity -> . output_function
    (7) iterative_statement -> . WHILE expression COLON start ENDWHILE
    (8) iterative_statement -> . FOR expression COMMA expression COMMA expression COLON start ENDFOR
    (9) conditional_statement -> . IF expression seen_exp COLON start seen_start ELSE seen_else start seen_start ENDIF
    (10) conditional_statement -> . IF expression seen_exp COLON start seen_start ENDIF
    (14) expression -> . assignment_statement
    (55) input_function -> . INPUT LPAREN IDENTIFIER RPAREN
    (56) output_function -> . PRINT LPAREN term RPAREN
    (15) assignment_statement -> . or_statement
    (16) assignment_statement -> . IDENTIFIER EQUALS or_statement
    (17) or_statement -> . and_statement
    (18) or_statement -> . or_statement OR and_statement
    (19) and_statement -> . equality_statement
    (20) and_statement -> . and_statement AND equality_statement
    (21) equality_statement -> . relational_statement
    (22) equality_statement -> . equality_statement EQ relational_statement
    (23) equality_statement -> . equality_statement NEQ relational_statement
    (24) relational_statement -> . add_statement
    (25) relational_statement -> . relational_statement LT add_statement
    (26) relational_statement -> . relational_statement GT add_statement
    (27) relational_statement -> . relational_statement LTEQ add_statement
    (28) relational_statement -> . relational_statement GTEQ add_statement
    (29) add_statement -> . multiply_statement
    (30) add_statement -> . add_statement PLUS multiply_statement
    (31) add_statement -> . add_statement MINUS multiply_statement
    (32) multiply_statement -> . unary_statement
    (33) multiply_statement -> . multiply_statement TIMES unary_statement
    (34) multiply_statement -> . multiply_statement DIVIDE unary_statement
    (35) multiply_statement -> . multiply_statement MOD unary_statement
    (36) unary_statement -> . exponent
    (37) unary_statement -> . MINUS unary_statement
    (38) unary_statement -> . NOT unary_statement
    (39) exponent -> . term
    (40) exponent -> . term POWER unary_statement
    (41) term -> . IDENTIFIER
    (42) term -> . atom
    (43) term -> . LPAREN expression RPAREN
    (44) atom -> . INTEGER
    (45) atom -> . FLOAT
    (46) atom -> . CHARACTER
    (47) atom -> . STRING
    (48) atom -> . TRUE
    (49) atom -> . FALSE
    (50) atom -> . LBRACKET elements RBRACKET
    (51) atom -> . IDENTIFIER LBRACKET INTEGER RBRACKET

    WHILE           shift and go to state 8
    FOR             shift and go to state 9
    IF              shift and go to state 10
    INPUT           shift and go to state 12
    PRINT           shift and go to state 15
    IDENTIFIER      shift and go to state 14
    MINUS           shift and go to state 23
    NOT             shift and go to state 26
    LPAREN          shift and go to state 13
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 29
    CHARACTER       shift and go to state 30
    STRING          shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    LBRACKET        shift and go to state 34

    start                          shift and go to state 1
    code_entity                    shift and go to state 2
    iterative_statement            shift and go to state 3
    conditional_statement          shift and go to state 4
    expression                     shift and go to state 5
    input_function                 shift and go to state 6
    output_function                shift and go to state 7
    assignment_statement           shift and go to state 11
    term                           shift and go to state 16
    or_statement                   shift and go to state 17
    and_statement                  shift and go to state 18
    equality_statement             shift and go to state 19
    relational_statement           shift and go to state 20
    add_statement                  shift and go to state 21
    multiply_statement             shift and go to state 22
    unary_statement                shift and go to state 24
    exponent                       shift and go to state 25
    atom                           shift and go to state 27

state 1

    (0) S' -> start .



state 2

    (1) start -> code_entity .

    $end            reduce using rule 1 (start -> code_entity .)
    ENDWHILE        reduce using rule 1 (start -> code_entity .)
    ELSE            reduce using rule 1 (start -> code_entity .)
    ENDIF           reduce using rule 1 (start -> code_entity .)
    ENDFOR          reduce using rule 1 (start -> code_entity .)


state 3

    (2) code_entity -> iterative_statement .

    $end            reduce using rule 2 (code_entity -> iterative_statement .)
    ENDWHILE        reduce using rule 2 (code_entity -> iterative_statement .)
    ELSE            reduce using rule 2 (code_entity -> iterative_statement .)
    ENDIF           reduce using rule 2 (code_entity -> iterative_statement .)
    ENDFOR          reduce using rule 2 (code_entity -> iterative_statement .)


state 4

    (3) code_entity -> conditional_statement .

    $end            reduce using rule 3 (code_entity -> conditional_statement .)
    ENDWHILE        reduce using rule 3 (code_entity -> conditional_statement .)
    ELSE            reduce using rule 3 (code_entity -> conditional_statement .)
    ENDIF           reduce using rule 3 (code_entity -> conditional_statement .)
    ENDFOR          reduce using rule 3 (code_entity -> conditional_statement .)


state 5

    (4) code_entity -> expression .

    $end            reduce using rule 4 (code_entity -> expression .)
    ENDWHILE        reduce using rule 4 (code_entity -> expression .)
    ELSE            reduce using rule 4 (code_entity -> expression .)
    ENDIF           reduce using rule 4 (code_entity -> expression .)
    ENDFOR          reduce using rule 4 (code_entity -> expression .)


state 6

    (5) code_entity -> input_function .

    $end            reduce using rule 5 (code_entity -> input_function .)
    ENDWHILE        reduce using rule 5 (code_entity -> input_function .)
    ELSE            reduce using rule 5 (code_entity -> input_function .)
    ENDIF           reduce using rule 5 (code_entity -> input_function .)
    ENDFOR          reduce using rule 5 (code_entity -> input_function .)


state 7

    (6) code_entity -> output_function .

    $end            reduce using rule 6 (code_entity -> output_function .)
    ENDWHILE        reduce using rule 6 (code_entity -> output_function .)
    ELSE            reduce using rule 6 (code_entity -> output_function .)
    ENDIF           reduce using rule 6 (code_entity -> output_function .)
    ENDFOR          reduce using rule 6 (code_entity -> output_function .)


state 8

    (7) iterative_statement -> WHILE . expression COLON start ENDWHILE
    (14) expression -> . assignment_statement
    (15) assignment_statement -> . or_statement
    (16) assignment_statement -> . IDENTIFIER EQUALS or_statement
    (17) or_statement -> . and_statement
    (18) or_statement -> . or_statement OR and_statement
    (19) and_statement -> . equality_statement
    (20) and_statement -> . and_statement AND equality_statement
    (21) equality_statement -> . relational_statement
    (22) equality_statement -> . equality_statement EQ relational_statement
    (23) equality_statement -> . equality_statement NEQ relational_statement
    (24) relational_statement -> . add_statement
    (25) relational_statement -> . relational_statement LT add_statement
    (26) relational_statement -> . relational_statement GT add_statement
    (27) relational_statement -> . relational_statement LTEQ add_statement
    (28) relational_statement -> . relational_statement GTEQ add_statement
    (29) add_statement -> . multiply_statement
    (30) add_statement -> . add_statement PLUS multiply_statement
    (31) add_statement -> . add_statement MINUS multiply_statement
    (32) multiply_statement -> . unary_statement
    (33) multiply_statement -> . multiply_statement TIMES unary_statement
    (34) multiply_statement -> . multiply_statement DIVIDE unary_statement
    (35) multiply_statement -> . multiply_statement MOD unary_statement
    (36) unary_statement -> . exponent
    (37) unary_statement -> . MINUS unary_statement
    (38) unary_statement -> . NOT unary_statement
    (39) exponent -> . term
    (40) exponent -> . term POWER unary_statement
    (41) term -> . IDENTIFIER
    (42) term -> . atom
    (43) term -> . LPAREN expression RPAREN
    (44) atom -> . INTEGER
    (45) atom -> . FLOAT
    (46) atom -> . CHARACTER
    (47) atom -> . STRING
    (48) atom -> . TRUE
    (49) atom -> . FALSE
    (50) atom -> . LBRACKET elements RBRACKET
    (51) atom -> . IDENTIFIER LBRACKET INTEGER RBRACKET

    IDENTIFIER      shift and go to state 14
    MINUS           shift and go to state 23
    NOT             shift and go to state 26
    LPAREN          shift and go to state 13
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 29
    CHARACTER       shift and go to state 30
    STRING          shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    LBRACKET        shift and go to state 34

    expression                     shift and go to state 35
    assignment_statement           shift and go to state 11
    or_statement                   shift and go to state 17
    and_statement                  shift and go to state 18
    equality_statement             shift and go to state 19
    relational_statement           shift and go to state 20
    add_statement                  shift and go to state 21
    multiply_statement             shift and go to state 22
    unary_statement                shift and go to state 24
    exponent                       shift and go to state 25
    term                           shift and go to state 16
    atom                           shift and go to state 27

state 9

    (8) iterative_statement -> FOR . expression COMMA expression COMMA expression COLON start ENDFOR
    (14) expression -> . assignment_statement
    (15) assignment_statement -> . or_statement
    (16) assignment_statement -> . IDENTIFIER EQUALS or_statement
    (17) or_statement -> . and_statement
    (18) or_statement -> . or_statement OR and_statement
    (19) and_statement -> . equality_statement
    (20) and_statement -> . and_statement AND equality_statement
    (21) equality_statement -> . relational_statement
    (22) equality_statement -> . equality_statement EQ relational_statement
    (23) equality_statement -> . equality_statement NEQ relational_statement
    (24) relational_statement -> . add_statement
    (25) relational_statement -> . relational_statement LT add_statement
    (26) relational_statement -> . relational_statement GT add_statement
    (27) relational_statement -> . relational_statement LTEQ add_statement
    (28) relational_statement -> . relational_statement GTEQ add_statement
    (29) add_statement -> . multiply_statement
    (30) add_statement -> . add_statement PLUS multiply_statement
    (31) add_statement -> . add_statement MINUS multiply_statement
    (32) multiply_statement -> . unary_statement
    (33) multiply_statement -> . multiply_statement TIMES unary_statement
    (34) multiply_statement -> . multiply_statement DIVIDE unary_statement
    (35) multiply_statement -> . multiply_statement MOD unary_statement
    (36) unary_statement -> . exponent
    (37) unary_statement -> . MINUS unary_statement
    (38) unary_statement -> . NOT unary_statement
    (39) exponent -> . term
    (40) exponent -> . term POWER unary_statement
    (41) term -> . IDENTIFIER
    (42) term -> . atom
    (43) term -> . LPAREN expression RPAREN
    (44) atom -> . INTEGER
    (45) atom -> . FLOAT
    (46) atom -> . CHARACTER
    (47) atom -> . STRING
    (48) atom -> . TRUE
    (49) atom -> . FALSE
    (50) atom -> . LBRACKET elements RBRACKET
    (51) atom -> . IDENTIFIER LBRACKET INTEGER RBRACKET

    IDENTIFIER      shift and go to state 14
    MINUS           shift and go to state 23
    NOT             shift and go to state 26
    LPAREN          shift and go to state 13
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 29
    CHARACTER       shift and go to state 30
    STRING          shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    LBRACKET        shift and go to state 34

    expression                     shift and go to state 36
    assignment_statement           shift and go to state 11
    or_statement                   shift and go to state 17
    and_statement                  shift and go to state 18
    equality_statement             shift and go to state 19
    relational_statement           shift and go to state 20
    add_statement                  shift and go to state 21
    multiply_statement             shift and go to state 22
    unary_statement                shift and go to state 24
    exponent                       shift and go to state 25
    term                           shift and go to state 16
    atom                           shift and go to state 27

state 10

    (9) conditional_statement -> IF . expression seen_exp COLON start seen_start ELSE seen_else start seen_start ENDIF
    (10) conditional_statement -> IF . expression seen_exp COLON start seen_start ENDIF
    (14) expression -> . assignment_statement
    (15) assignment_statement -> . or_statement
    (16) assignment_statement -> . IDENTIFIER EQUALS or_statement
    (17) or_statement -> . and_statement
    (18) or_statement -> . or_statement OR and_statement
    (19) and_statement -> . equality_statement
    (20) and_statement -> . and_statement AND equality_statement
    (21) equality_statement -> . relational_statement
    (22) equality_statement -> . equality_statement EQ relational_statement
    (23) equality_statement -> . equality_statement NEQ relational_statement
    (24) relational_statement -> . add_statement
    (25) relational_statement -> . relational_statement LT add_statement
    (26) relational_statement -> . relational_statement GT add_statement
    (27) relational_statement -> . relational_statement LTEQ add_statement
    (28) relational_statement -> . relational_statement GTEQ add_statement
    (29) add_statement -> . multiply_statement
    (30) add_statement -> . add_statement PLUS multiply_statement
    (31) add_statement -> . add_statement MINUS multiply_statement
    (32) multiply_statement -> . unary_statement
    (33) multiply_statement -> . multiply_statement TIMES unary_statement
    (34) multiply_statement -> . multiply_statement DIVIDE unary_statement
    (35) multiply_statement -> . multiply_statement MOD unary_statement
    (36) unary_statement -> . exponent
    (37) unary_statement -> . MINUS unary_statement
    (38) unary_statement -> . NOT unary_statement
    (39) exponent -> . term
    (40) exponent -> . term POWER unary_statement
    (41) term -> . IDENTIFIER
    (42) term -> . atom
    (43) term -> . LPAREN expression RPAREN
    (44) atom -> . INTEGER
    (45) atom -> . FLOAT
    (46) atom -> . CHARACTER
    (47) atom -> . STRING
    (48) atom -> . TRUE
    (49) atom -> . FALSE
    (50) atom -> . LBRACKET elements RBRACKET
    (51) atom -> . IDENTIFIER LBRACKET INTEGER RBRACKET

    IDENTIFIER      shift and go to state 14
    MINUS           shift and go to state 23
    NOT             shift and go to state 26
    LPAREN          shift and go to state 13
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 29
    CHARACTER       shift and go to state 30
    STRING          shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    LBRACKET        shift and go to state 34

    expression                     shift and go to state 37
    assignment_statement           shift and go to state 11
    or_statement                   shift and go to state 17
    and_statement                  shift and go to state 18
    equality_statement             shift and go to state 19
    relational_statement           shift and go to state 20
    add_statement                  shift and go to state 21
    multiply_statement             shift and go to state 22
    unary_statement                shift and go to state 24
    exponent                       shift and go to state 25
    term                           shift and go to state 16
    atom                           shift and go to state 27

state 11

    (14) expression -> assignment_statement .

    $end            reduce using rule 14 (expression -> assignment_statement .)
    COLON           reduce using rule 14 (expression -> assignment_statement .)
    COMMA           reduce using rule 14 (expression -> assignment_statement .)
    RPAREN          reduce using rule 14 (expression -> assignment_statement .)
    ENDWHILE        reduce using rule 14 (expression -> assignment_statement .)
    ELSE            reduce using rule 14 (expression -> assignment_statement .)
    ENDIF           reduce using rule 14 (expression -> assignment_statement .)
    ENDFOR          reduce using rule 14 (expression -> assignment_statement .)


state 12

    (55) input_function -> INPUT . LPAREN IDENTIFIER RPAREN

    LPAREN          shift and go to state 38


state 13

    (43) term -> LPAREN . expression RPAREN
    (14) expression -> . assignment_statement
    (15) assignment_statement -> . or_statement
    (16) assignment_statement -> . IDENTIFIER EQUALS or_statement
    (17) or_statement -> . and_statement
    (18) or_statement -> . or_statement OR and_statement
    (19) and_statement -> . equality_statement
    (20) and_statement -> . and_statement AND equality_statement
    (21) equality_statement -> . relational_statement
    (22) equality_statement -> . equality_statement EQ relational_statement
    (23) equality_statement -> . equality_statement NEQ relational_statement
    (24) relational_statement -> . add_statement
    (25) relational_statement -> . relational_statement LT add_statement
    (26) relational_statement -> . relational_statement GT add_statement
    (27) relational_statement -> . relational_statement LTEQ add_statement
    (28) relational_statement -> . relational_statement GTEQ add_statement
    (29) add_statement -> . multiply_statement
    (30) add_statement -> . add_statement PLUS multiply_statement
    (31) add_statement -> . add_statement MINUS multiply_statement
    (32) multiply_statement -> . unary_statement
    (33) multiply_statement -> . multiply_statement TIMES unary_statement
    (34) multiply_statement -> . multiply_statement DIVIDE unary_statement
    (35) multiply_statement -> . multiply_statement MOD unary_statement
    (36) unary_statement -> . exponent
    (37) unary_statement -> . MINUS unary_statement
    (38) unary_statement -> . NOT unary_statement
    (39) exponent -> . term
    (40) exponent -> . term POWER unary_statement
    (41) term -> . IDENTIFIER
    (42) term -> . atom
    (43) term -> . LPAREN expression RPAREN
    (44) atom -> . INTEGER
    (45) atom -> . FLOAT
    (46) atom -> . CHARACTER
    (47) atom -> . STRING
    (48) atom -> . TRUE
    (49) atom -> . FALSE
    (50) atom -> . LBRACKET elements RBRACKET
    (51) atom -> . IDENTIFIER LBRACKET INTEGER RBRACKET

    IDENTIFIER      shift and go to state 14
    MINUS           shift and go to state 23
    NOT             shift and go to state 26
    LPAREN          shift and go to state 13
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 29
    CHARACTER       shift and go to state 30
    STRING          shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    LBRACKET        shift and go to state 34

    expression                     shift and go to state 39
    assignment_statement           shift and go to state 11
    or_statement                   shift and go to state 17
    and_statement                  shift and go to state 18
    equality_statement             shift and go to state 19
    relational_statement           shift and go to state 20
    add_statement                  shift and go to state 21
    multiply_statement             shift and go to state 22
    unary_statement                shift and go to state 24
    exponent                       shift and go to state 25
    term                           shift and go to state 16
    atom                           shift and go to state 27

state 14

    (16) assignment_statement -> IDENTIFIER . EQUALS or_statement
    (41) term -> IDENTIFIER .
    (51) atom -> IDENTIFIER . LBRACKET INTEGER RBRACKET

    EQUALS          shift and go to state 40
    POWER           reduce using rule 41 (term -> IDENTIFIER .)
    TIMES           reduce using rule 41 (term -> IDENTIFIER .)
    DIVIDE          reduce using rule 41 (term -> IDENTIFIER .)
    MOD             reduce using rule 41 (term -> IDENTIFIER .)
    PLUS            reduce using rule 41 (term -> IDENTIFIER .)
    MINUS           reduce using rule 41 (term -> IDENTIFIER .)
    LT              reduce using rule 41 (term -> IDENTIFIER .)
    GT              reduce using rule 41 (term -> IDENTIFIER .)
    LTEQ            reduce using rule 41 (term -> IDENTIFIER .)
    GTEQ            reduce using rule 41 (term -> IDENTIFIER .)
    EQ              reduce using rule 41 (term -> IDENTIFIER .)
    NEQ             reduce using rule 41 (term -> IDENTIFIER .)
    AND             reduce using rule 41 (term -> IDENTIFIER .)
    OR              reduce using rule 41 (term -> IDENTIFIER .)
    $end            reduce using rule 41 (term -> IDENTIFIER .)
    COLON           reduce using rule 41 (term -> IDENTIFIER .)
    COMMA           reduce using rule 41 (term -> IDENTIFIER .)
    RPAREN          reduce using rule 41 (term -> IDENTIFIER .)
    ENDWHILE        reduce using rule 41 (term -> IDENTIFIER .)
    ELSE            reduce using rule 41 (term -> IDENTIFIER .)
    ENDIF           reduce using rule 41 (term -> IDENTIFIER .)
    ENDFOR          reduce using rule 41 (term -> IDENTIFIER .)
    LBRACKET        shift and go to state 41


state 15

    (56) output_function -> PRINT . LPAREN term RPAREN

    LPAREN          shift and go to state 42


state 16

    (39) exponent -> term .
    (40) exponent -> term . POWER unary_statement

    TIMES           reduce using rule 39 (exponent -> term .)
    DIVIDE          reduce using rule 39 (exponent -> term .)
    MOD             reduce using rule 39 (exponent -> term .)
    PLUS            reduce using rule 39 (exponent -> term .)
    MINUS           reduce using rule 39 (exponent -> term .)
    LT              reduce using rule 39 (exponent -> term .)
    GT              reduce using rule 39 (exponent -> term .)
    LTEQ            reduce using rule 39 (exponent -> term .)
    GTEQ            reduce using rule 39 (exponent -> term .)
    EQ              reduce using rule 39 (exponent -> term .)
    NEQ             reduce using rule 39 (exponent -> term .)
    AND             reduce using rule 39 (exponent -> term .)
    OR              reduce using rule 39 (exponent -> term .)
    $end            reduce using rule 39 (exponent -> term .)
    COLON           reduce using rule 39 (exponent -> term .)
    COMMA           reduce using rule 39 (exponent -> term .)
    RPAREN          reduce using rule 39 (exponent -> term .)
    ENDWHILE        reduce using rule 39 (exponent -> term .)
    ELSE            reduce using rule 39 (exponent -> term .)
    ENDIF           reduce using rule 39 (exponent -> term .)
    ENDFOR          reduce using rule 39 (exponent -> term .)
    POWER           shift and go to state 43


state 17

    (15) assignment_statement -> or_statement .
    (18) or_statement -> or_statement . OR and_statement

    $end            reduce using rule 15 (assignment_statement -> or_statement .)
    COLON           reduce using rule 15 (assignment_statement -> or_statement .)
    COMMA           reduce using rule 15 (assignment_statement -> or_statement .)
    RPAREN          reduce using rule 15 (assignment_statement -> or_statement .)
    ENDWHILE        reduce using rule 15 (assignment_statement -> or_statement .)
    ELSE            reduce using rule 15 (assignment_statement -> or_statement .)
    ENDIF           reduce using rule 15 (assignment_statement -> or_statement .)
    ENDFOR          reduce using rule 15 (assignment_statement -> or_statement .)
    OR              shift and go to state 44


state 18

    (17) or_statement -> and_statement .
    (20) and_statement -> and_statement . AND equality_statement

    OR              reduce using rule 17 (or_statement -> and_statement .)
    $end            reduce using rule 17 (or_statement -> and_statement .)
    COLON           reduce using rule 17 (or_statement -> and_statement .)
    COMMA           reduce using rule 17 (or_statement -> and_statement .)
    RPAREN          reduce using rule 17 (or_statement -> and_statement .)
    ENDWHILE        reduce using rule 17 (or_statement -> and_statement .)
    ELSE            reduce using rule 17 (or_statement -> and_statement .)
    ENDIF           reduce using rule 17 (or_statement -> and_statement .)
    ENDFOR          reduce using rule 17 (or_statement -> and_statement .)
    AND             shift and go to state 45


state 19

    (19) and_statement -> equality_statement .
    (22) equality_statement -> equality_statement . EQ relational_statement
    (23) equality_statement -> equality_statement . NEQ relational_statement

    AND             reduce using rule 19 (and_statement -> equality_statement .)
    OR              reduce using rule 19 (and_statement -> equality_statement .)
    $end            reduce using rule 19 (and_statement -> equality_statement .)
    COLON           reduce using rule 19 (and_statement -> equality_statement .)
    COMMA           reduce using rule 19 (and_statement -> equality_statement .)
    RPAREN          reduce using rule 19 (and_statement -> equality_statement .)
    ENDWHILE        reduce using rule 19 (and_statement -> equality_statement .)
    ELSE            reduce using rule 19 (and_statement -> equality_statement .)
    ENDIF           reduce using rule 19 (and_statement -> equality_statement .)
    ENDFOR          reduce using rule 19 (and_statement -> equality_statement .)
    EQ              shift and go to state 46
    NEQ             shift and go to state 47


state 20

    (21) equality_statement -> relational_statement .
    (25) relational_statement -> relational_statement . LT add_statement
    (26) relational_statement -> relational_statement . GT add_statement
    (27) relational_statement -> relational_statement . LTEQ add_statement
    (28) relational_statement -> relational_statement . GTEQ add_statement

    EQ              reduce using rule 21 (equality_statement -> relational_statement .)
    NEQ             reduce using rule 21 (equality_statement -> relational_statement .)
    AND             reduce using rule 21 (equality_statement -> relational_statement .)
    OR              reduce using rule 21 (equality_statement -> relational_statement .)
    $end            reduce using rule 21 (equality_statement -> relational_statement .)
    COLON           reduce using rule 21 (equality_statement -> relational_statement .)
    COMMA           reduce using rule 21 (equality_statement -> relational_statement .)
    RPAREN          reduce using rule 21 (equality_statement -> relational_statement .)
    ENDWHILE        reduce using rule 21 (equality_statement -> relational_statement .)
    ELSE            reduce using rule 21 (equality_statement -> relational_statement .)
    ENDIF           reduce using rule 21 (equality_statement -> relational_statement .)
    ENDFOR          reduce using rule 21 (equality_statement -> relational_statement .)
    LT              shift and go to state 48
    GT              shift and go to state 49
    LTEQ            shift and go to state 50
    GTEQ            shift and go to state 51


state 21

    (24) relational_statement -> add_statement .
    (30) add_statement -> add_statement . PLUS multiply_statement
    (31) add_statement -> add_statement . MINUS multiply_statement

    LT              reduce using rule 24 (relational_statement -> add_statement .)
    GT              reduce using rule 24 (relational_statement -> add_statement .)
    LTEQ            reduce using rule 24 (relational_statement -> add_statement .)
    GTEQ            reduce using rule 24 (relational_statement -> add_statement .)
    EQ              reduce using rule 24 (relational_statement -> add_statement .)
    NEQ             reduce using rule 24 (relational_statement -> add_statement .)
    AND             reduce using rule 24 (relational_statement -> add_statement .)
    OR              reduce using rule 24 (relational_statement -> add_statement .)
    $end            reduce using rule 24 (relational_statement -> add_statement .)
    COLON           reduce using rule 24 (relational_statement -> add_statement .)
    COMMA           reduce using rule 24 (relational_statement -> add_statement .)
    RPAREN          reduce using rule 24 (relational_statement -> add_statement .)
    ENDWHILE        reduce using rule 24 (relational_statement -> add_statement .)
    ELSE            reduce using rule 24 (relational_statement -> add_statement .)
    ENDIF           reduce using rule 24 (relational_statement -> add_statement .)
    ENDFOR          reduce using rule 24 (relational_statement -> add_statement .)
    PLUS            shift and go to state 52
    MINUS           shift and go to state 53


state 22

    (29) add_statement -> multiply_statement .
    (33) multiply_statement -> multiply_statement . TIMES unary_statement
    (34) multiply_statement -> multiply_statement . DIVIDE unary_statement
    (35) multiply_statement -> multiply_statement . MOD unary_statement

    PLUS            reduce using rule 29 (add_statement -> multiply_statement .)
    MINUS           reduce using rule 29 (add_statement -> multiply_statement .)
    LT              reduce using rule 29 (add_statement -> multiply_statement .)
    GT              reduce using rule 29 (add_statement -> multiply_statement .)
    LTEQ            reduce using rule 29 (add_statement -> multiply_statement .)
    GTEQ            reduce using rule 29 (add_statement -> multiply_statement .)
    EQ              reduce using rule 29 (add_statement -> multiply_statement .)
    NEQ             reduce using rule 29 (add_statement -> multiply_statement .)
    AND             reduce using rule 29 (add_statement -> multiply_statement .)
    OR              reduce using rule 29 (add_statement -> multiply_statement .)
    $end            reduce using rule 29 (add_statement -> multiply_statement .)
    COLON           reduce using rule 29 (add_statement -> multiply_statement .)
    COMMA           reduce using rule 29 (add_statement -> multiply_statement .)
    RPAREN          reduce using rule 29 (add_statement -> multiply_statement .)
    ENDWHILE        reduce using rule 29 (add_statement -> multiply_statement .)
    ELSE            reduce using rule 29 (add_statement -> multiply_statement .)
    ENDIF           reduce using rule 29 (add_statement -> multiply_statement .)
    ENDFOR          reduce using rule 29 (add_statement -> multiply_statement .)
    TIMES           shift and go to state 54
    DIVIDE          shift and go to state 55
    MOD             shift and go to state 56


state 23

    (37) unary_statement -> MINUS . unary_statement
    (36) unary_statement -> . exponent
    (37) unary_statement -> . MINUS unary_statement
    (38) unary_statement -> . NOT unary_statement
    (39) exponent -> . term
    (40) exponent -> . term POWER unary_statement
    (41) term -> . IDENTIFIER
    (42) term -> . atom
    (43) term -> . LPAREN expression RPAREN
    (44) atom -> . INTEGER
    (45) atom -> . FLOAT
    (46) atom -> . CHARACTER
    (47) atom -> . STRING
    (48) atom -> . TRUE
    (49) atom -> . FALSE
    (50) atom -> . LBRACKET elements RBRACKET
    (51) atom -> . IDENTIFIER LBRACKET INTEGER RBRACKET

    MINUS           shift and go to state 23
    NOT             shift and go to state 26
    IDENTIFIER      shift and go to state 58
    LPAREN          shift and go to state 13
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 29
    CHARACTER       shift and go to state 30
    STRING          shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    LBRACKET        shift and go to state 34

    unary_statement                shift and go to state 57
    exponent                       shift and go to state 25
    term                           shift and go to state 16
    atom                           shift and go to state 27

state 24

    (32) multiply_statement -> unary_statement .

    TIMES           reduce using rule 32 (multiply_statement -> unary_statement .)
    DIVIDE          reduce using rule 32 (multiply_statement -> unary_statement .)
    MOD             reduce using rule 32 (multiply_statement -> unary_statement .)
    PLUS            reduce using rule 32 (multiply_statement -> unary_statement .)
    MINUS           reduce using rule 32 (multiply_statement -> unary_statement .)
    LT              reduce using rule 32 (multiply_statement -> unary_statement .)
    GT              reduce using rule 32 (multiply_statement -> unary_statement .)
    LTEQ            reduce using rule 32 (multiply_statement -> unary_statement .)
    GTEQ            reduce using rule 32 (multiply_statement -> unary_statement .)
    EQ              reduce using rule 32 (multiply_statement -> unary_statement .)
    NEQ             reduce using rule 32 (multiply_statement -> unary_statement .)
    AND             reduce using rule 32 (multiply_statement -> unary_statement .)
    OR              reduce using rule 32 (multiply_statement -> unary_statement .)
    $end            reduce using rule 32 (multiply_statement -> unary_statement .)
    COLON           reduce using rule 32 (multiply_statement -> unary_statement .)
    COMMA           reduce using rule 32 (multiply_statement -> unary_statement .)
    RPAREN          reduce using rule 32 (multiply_statement -> unary_statement .)
    ENDWHILE        reduce using rule 32 (multiply_statement -> unary_statement .)
    ELSE            reduce using rule 32 (multiply_statement -> unary_statement .)
    ENDIF           reduce using rule 32 (multiply_statement -> unary_statement .)
    ENDFOR          reduce using rule 32 (multiply_statement -> unary_statement .)


state 25

    (36) unary_statement -> exponent .

    TIMES           reduce using rule 36 (unary_statement -> exponent .)
    DIVIDE          reduce using rule 36 (unary_statement -> exponent .)
    MOD             reduce using rule 36 (unary_statement -> exponent .)
    PLUS            reduce using rule 36 (unary_statement -> exponent .)
    MINUS           reduce using rule 36 (unary_statement -> exponent .)
    LT              reduce using rule 36 (unary_statement -> exponent .)
    GT              reduce using rule 36 (unary_statement -> exponent .)
    LTEQ            reduce using rule 36 (unary_statement -> exponent .)
    GTEQ            reduce using rule 36 (unary_statement -> exponent .)
    EQ              reduce using rule 36 (unary_statement -> exponent .)
    NEQ             reduce using rule 36 (unary_statement -> exponent .)
    AND             reduce using rule 36 (unary_statement -> exponent .)
    OR              reduce using rule 36 (unary_statement -> exponent .)
    $end            reduce using rule 36 (unary_statement -> exponent .)
    COLON           reduce using rule 36 (unary_statement -> exponent .)
    COMMA           reduce using rule 36 (unary_statement -> exponent .)
    RPAREN          reduce using rule 36 (unary_statement -> exponent .)
    ENDWHILE        reduce using rule 36 (unary_statement -> exponent .)
    ELSE            reduce using rule 36 (unary_statement -> exponent .)
    ENDIF           reduce using rule 36 (unary_statement -> exponent .)
    ENDFOR          reduce using rule 36 (unary_statement -> exponent .)


state 26

    (38) unary_statement -> NOT . unary_statement
    (36) unary_statement -> . exponent
    (37) unary_statement -> . MINUS unary_statement
    (38) unary_statement -> . NOT unary_statement
    (39) exponent -> . term
    (40) exponent -> . term POWER unary_statement
    (41) term -> . IDENTIFIER
    (42) term -> . atom
    (43) term -> . LPAREN expression RPAREN
    (44) atom -> . INTEGER
    (45) atom -> . FLOAT
    (46) atom -> . CHARACTER
    (47) atom -> . STRING
    (48) atom -> . TRUE
    (49) atom -> . FALSE
    (50) atom -> . LBRACKET elements RBRACKET
    (51) atom -> . IDENTIFIER LBRACKET INTEGER RBRACKET

    MINUS           shift and go to state 23
    NOT             shift and go to state 26
    IDENTIFIER      shift and go to state 58
    LPAREN          shift and go to state 13
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 29
    CHARACTER       shift and go to state 30
    STRING          shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    LBRACKET        shift and go to state 34

    unary_statement                shift and go to state 59
    exponent                       shift and go to state 25
    term                           shift and go to state 16
    atom                           shift and go to state 27

state 27

    (42) term -> atom .

    POWER           reduce using rule 42 (term -> atom .)
    TIMES           reduce using rule 42 (term -> atom .)
    DIVIDE          reduce using rule 42 (term -> atom .)
    MOD             reduce using rule 42 (term -> atom .)
    PLUS            reduce using rule 42 (term -> atom .)
    MINUS           reduce using rule 42 (term -> atom .)
    LT              reduce using rule 42 (term -> atom .)
    GT              reduce using rule 42 (term -> atom .)
    LTEQ            reduce using rule 42 (term -> atom .)
    GTEQ            reduce using rule 42 (term -> atom .)
    EQ              reduce using rule 42 (term -> atom .)
    NEQ             reduce using rule 42 (term -> atom .)
    AND             reduce using rule 42 (term -> atom .)
    OR              reduce using rule 42 (term -> atom .)
    $end            reduce using rule 42 (term -> atom .)
    COLON           reduce using rule 42 (term -> atom .)
    COMMA           reduce using rule 42 (term -> atom .)
    RPAREN          reduce using rule 42 (term -> atom .)
    ENDWHILE        reduce using rule 42 (term -> atom .)
    ELSE            reduce using rule 42 (term -> atom .)
    ENDIF           reduce using rule 42 (term -> atom .)
    ENDFOR          reduce using rule 42 (term -> atom .)


state 28

    (44) atom -> INTEGER .

    POWER           reduce using rule 44 (atom -> INTEGER .)
    TIMES           reduce using rule 44 (atom -> INTEGER .)
    DIVIDE          reduce using rule 44 (atom -> INTEGER .)
    MOD             reduce using rule 44 (atom -> INTEGER .)
    PLUS            reduce using rule 44 (atom -> INTEGER .)
    MINUS           reduce using rule 44 (atom -> INTEGER .)
    LT              reduce using rule 44 (atom -> INTEGER .)
    GT              reduce using rule 44 (atom -> INTEGER .)
    LTEQ            reduce using rule 44 (atom -> INTEGER .)
    GTEQ            reduce using rule 44 (atom -> INTEGER .)
    EQ              reduce using rule 44 (atom -> INTEGER .)
    NEQ             reduce using rule 44 (atom -> INTEGER .)
    AND             reduce using rule 44 (atom -> INTEGER .)
    OR              reduce using rule 44 (atom -> INTEGER .)
    $end            reduce using rule 44 (atom -> INTEGER .)
    COLON           reduce using rule 44 (atom -> INTEGER .)
    COMMA           reduce using rule 44 (atom -> INTEGER .)
    RPAREN          reduce using rule 44 (atom -> INTEGER .)
    ENDWHILE        reduce using rule 44 (atom -> INTEGER .)
    ELSE            reduce using rule 44 (atom -> INTEGER .)
    ENDIF           reduce using rule 44 (atom -> INTEGER .)
    ENDFOR          reduce using rule 44 (atom -> INTEGER .)


state 29

    (45) atom -> FLOAT .

    POWER           reduce using rule 45 (atom -> FLOAT .)
    TIMES           reduce using rule 45 (atom -> FLOAT .)
    DIVIDE          reduce using rule 45 (atom -> FLOAT .)
    MOD             reduce using rule 45 (atom -> FLOAT .)
    PLUS            reduce using rule 45 (atom -> FLOAT .)
    MINUS           reduce using rule 45 (atom -> FLOAT .)
    LT              reduce using rule 45 (atom -> FLOAT .)
    GT              reduce using rule 45 (atom -> FLOAT .)
    LTEQ            reduce using rule 45 (atom -> FLOAT .)
    GTEQ            reduce using rule 45 (atom -> FLOAT .)
    EQ              reduce using rule 45 (atom -> FLOAT .)
    NEQ             reduce using rule 45 (atom -> FLOAT .)
    AND             reduce using rule 45 (atom -> FLOAT .)
    OR              reduce using rule 45 (atom -> FLOAT .)
    $end            reduce using rule 45 (atom -> FLOAT .)
    COLON           reduce using rule 45 (atom -> FLOAT .)
    COMMA           reduce using rule 45 (atom -> FLOAT .)
    RPAREN          reduce using rule 45 (atom -> FLOAT .)
    ENDWHILE        reduce using rule 45 (atom -> FLOAT .)
    ELSE            reduce using rule 45 (atom -> FLOAT .)
    ENDIF           reduce using rule 45 (atom -> FLOAT .)
    ENDFOR          reduce using rule 45 (atom -> FLOAT .)


state 30

    (46) atom -> CHARACTER .

    POWER           reduce using rule 46 (atom -> CHARACTER .)
    TIMES           reduce using rule 46 (atom -> CHARACTER .)
    DIVIDE          reduce using rule 46 (atom -> CHARACTER .)
    MOD             reduce using rule 46 (atom -> CHARACTER .)
    PLUS            reduce using rule 46 (atom -> CHARACTER .)
    MINUS           reduce using rule 46 (atom -> CHARACTER .)
    LT              reduce using rule 46 (atom -> CHARACTER .)
    GT              reduce using rule 46 (atom -> CHARACTER .)
    LTEQ            reduce using rule 46 (atom -> CHARACTER .)
    GTEQ            reduce using rule 46 (atom -> CHARACTER .)
    EQ              reduce using rule 46 (atom -> CHARACTER .)
    NEQ             reduce using rule 46 (atom -> CHARACTER .)
    AND             reduce using rule 46 (atom -> CHARACTER .)
    OR              reduce using rule 46 (atom -> CHARACTER .)
    $end            reduce using rule 46 (atom -> CHARACTER .)
    COLON           reduce using rule 46 (atom -> CHARACTER .)
    COMMA           reduce using rule 46 (atom -> CHARACTER .)
    RPAREN          reduce using rule 46 (atom -> CHARACTER .)
    ENDWHILE        reduce using rule 46 (atom -> CHARACTER .)
    ELSE            reduce using rule 46 (atom -> CHARACTER .)
    ENDIF           reduce using rule 46 (atom -> CHARACTER .)
    ENDFOR          reduce using rule 46 (atom -> CHARACTER .)


state 31

    (47) atom -> STRING .

    POWER           reduce using rule 47 (atom -> STRING .)
    TIMES           reduce using rule 47 (atom -> STRING .)
    DIVIDE          reduce using rule 47 (atom -> STRING .)
    MOD             reduce using rule 47 (atom -> STRING .)
    PLUS            reduce using rule 47 (atom -> STRING .)
    MINUS           reduce using rule 47 (atom -> STRING .)
    LT              reduce using rule 47 (atom -> STRING .)
    GT              reduce using rule 47 (atom -> STRING .)
    LTEQ            reduce using rule 47 (atom -> STRING .)
    GTEQ            reduce using rule 47 (atom -> STRING .)
    EQ              reduce using rule 47 (atom -> STRING .)
    NEQ             reduce using rule 47 (atom -> STRING .)
    AND             reduce using rule 47 (atom -> STRING .)
    OR              reduce using rule 47 (atom -> STRING .)
    $end            reduce using rule 47 (atom -> STRING .)
    COLON           reduce using rule 47 (atom -> STRING .)
    COMMA           reduce using rule 47 (atom -> STRING .)
    RPAREN          reduce using rule 47 (atom -> STRING .)
    ENDWHILE        reduce using rule 47 (atom -> STRING .)
    ELSE            reduce using rule 47 (atom -> STRING .)
    ENDIF           reduce using rule 47 (atom -> STRING .)
    ENDFOR          reduce using rule 47 (atom -> STRING .)


state 32

    (48) atom -> TRUE .

    POWER           reduce using rule 48 (atom -> TRUE .)
    TIMES           reduce using rule 48 (atom -> TRUE .)
    DIVIDE          reduce using rule 48 (atom -> TRUE .)
    MOD             reduce using rule 48 (atom -> TRUE .)
    PLUS            reduce using rule 48 (atom -> TRUE .)
    MINUS           reduce using rule 48 (atom -> TRUE .)
    LT              reduce using rule 48 (atom -> TRUE .)
    GT              reduce using rule 48 (atom -> TRUE .)
    LTEQ            reduce using rule 48 (atom -> TRUE .)
    GTEQ            reduce using rule 48 (atom -> TRUE .)
    EQ              reduce using rule 48 (atom -> TRUE .)
    NEQ             reduce using rule 48 (atom -> TRUE .)
    AND             reduce using rule 48 (atom -> TRUE .)
    OR              reduce using rule 48 (atom -> TRUE .)
    $end            reduce using rule 48 (atom -> TRUE .)
    COLON           reduce using rule 48 (atom -> TRUE .)
    COMMA           reduce using rule 48 (atom -> TRUE .)
    RPAREN          reduce using rule 48 (atom -> TRUE .)
    ENDWHILE        reduce using rule 48 (atom -> TRUE .)
    ELSE            reduce using rule 48 (atom -> TRUE .)
    ENDIF           reduce using rule 48 (atom -> TRUE .)
    ENDFOR          reduce using rule 48 (atom -> TRUE .)


state 33

    (49) atom -> FALSE .

    POWER           reduce using rule 49 (atom -> FALSE .)
    TIMES           reduce using rule 49 (atom -> FALSE .)
    DIVIDE          reduce using rule 49 (atom -> FALSE .)
    MOD             reduce using rule 49 (atom -> FALSE .)
    PLUS            reduce using rule 49 (atom -> FALSE .)
    MINUS           reduce using rule 49 (atom -> FALSE .)
    LT              reduce using rule 49 (atom -> FALSE .)
    GT              reduce using rule 49 (atom -> FALSE .)
    LTEQ            reduce using rule 49 (atom -> FALSE .)
    GTEQ            reduce using rule 49 (atom -> FALSE .)
    EQ              reduce using rule 49 (atom -> FALSE .)
    NEQ             reduce using rule 49 (atom -> FALSE .)
    AND             reduce using rule 49 (atom -> FALSE .)
    OR              reduce using rule 49 (atom -> FALSE .)
    $end            reduce using rule 49 (atom -> FALSE .)
    COLON           reduce using rule 49 (atom -> FALSE .)
    COMMA           reduce using rule 49 (atom -> FALSE .)
    RPAREN          reduce using rule 49 (atom -> FALSE .)
    ENDWHILE        reduce using rule 49 (atom -> FALSE .)
    ELSE            reduce using rule 49 (atom -> FALSE .)
    ENDIF           reduce using rule 49 (atom -> FALSE .)
    ENDFOR          reduce using rule 49 (atom -> FALSE .)


state 34

    (50) atom -> LBRACKET . elements RBRACKET
    (52) elements -> . elements INTEGER
    (53) elements -> . elements FLOAT
    (54) elements -> .

    RBRACKET        reduce using rule 54 (elements -> .)
    INTEGER         reduce using rule 54 (elements -> .)
    FLOAT           reduce using rule 54 (elements -> .)

    elements                       shift and go to state 60

state 35

    (7) iterative_statement -> WHILE expression . COLON start ENDWHILE

    COLON           shift and go to state 61


state 36

    (8) iterative_statement -> FOR expression . COMMA expression COMMA expression COLON start ENDFOR

    COMMA           shift and go to state 62


state 37

    (9) conditional_statement -> IF expression . seen_exp COLON start seen_start ELSE seen_else start seen_start ENDIF
    (10) conditional_statement -> IF expression . seen_exp COLON start seen_start ENDIF
    (11) seen_exp -> .

    COLON           reduce using rule 11 (seen_exp -> .)

    seen_exp                       shift and go to state 63

state 38

    (55) input_function -> INPUT LPAREN . IDENTIFIER RPAREN

    IDENTIFIER      shift and go to state 64


state 39

    (43) term -> LPAREN expression . RPAREN

    RPAREN          shift and go to state 65


state 40

    (16) assignment_statement -> IDENTIFIER EQUALS . or_statement
    (17) or_statement -> . and_statement
    (18) or_statement -> . or_statement OR and_statement
    (19) and_statement -> . equality_statement
    (20) and_statement -> . and_statement AND equality_statement
    (21) equality_statement -> . relational_statement
    (22) equality_statement -> . equality_statement EQ relational_statement
    (23) equality_statement -> . equality_statement NEQ relational_statement
    (24) relational_statement -> . add_statement
    (25) relational_statement -> . relational_statement LT add_statement
    (26) relational_statement -> . relational_statement GT add_statement
    (27) relational_statement -> . relational_statement LTEQ add_statement
    (28) relational_statement -> . relational_statement GTEQ add_statement
    (29) add_statement -> . multiply_statement
    (30) add_statement -> . add_statement PLUS multiply_statement
    (31) add_statement -> . add_statement MINUS multiply_statement
    (32) multiply_statement -> . unary_statement
    (33) multiply_statement -> . multiply_statement TIMES unary_statement
    (34) multiply_statement -> . multiply_statement DIVIDE unary_statement
    (35) multiply_statement -> . multiply_statement MOD unary_statement
    (36) unary_statement -> . exponent
    (37) unary_statement -> . MINUS unary_statement
    (38) unary_statement -> . NOT unary_statement
    (39) exponent -> . term
    (40) exponent -> . term POWER unary_statement
    (41) term -> . IDENTIFIER
    (42) term -> . atom
    (43) term -> . LPAREN expression RPAREN
    (44) atom -> . INTEGER
    (45) atom -> . FLOAT
    (46) atom -> . CHARACTER
    (47) atom -> . STRING
    (48) atom -> . TRUE
    (49) atom -> . FALSE
    (50) atom -> . LBRACKET elements RBRACKET
    (51) atom -> . IDENTIFIER LBRACKET INTEGER RBRACKET

    MINUS           shift and go to state 23
    NOT             shift and go to state 26
    IDENTIFIER      shift and go to state 58
    LPAREN          shift and go to state 13
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 29
    CHARACTER       shift and go to state 30
    STRING          shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    LBRACKET        shift and go to state 34

    or_statement                   shift and go to state 66
    and_statement                  shift and go to state 18
    equality_statement             shift and go to state 19
    relational_statement           shift and go to state 20
    add_statement                  shift and go to state 21
    multiply_statement             shift and go to state 22
    unary_statement                shift and go to state 24
    exponent                       shift and go to state 25
    term                           shift and go to state 16
    atom                           shift and go to state 27

state 41

    (51) atom -> IDENTIFIER LBRACKET . INTEGER RBRACKET

    INTEGER         shift and go to state 67


state 42

    (56) output_function -> PRINT LPAREN . term RPAREN
    (41) term -> . IDENTIFIER
    (42) term -> . atom
    (43) term -> . LPAREN expression RPAREN
    (44) atom -> . INTEGER
    (45) atom -> . FLOAT
    (46) atom -> . CHARACTER
    (47) atom -> . STRING
    (48) atom -> . TRUE
    (49) atom -> . FALSE
    (50) atom -> . LBRACKET elements RBRACKET
    (51) atom -> . IDENTIFIER LBRACKET INTEGER RBRACKET

    IDENTIFIER      shift and go to state 58
    LPAREN          shift and go to state 13
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 29
    CHARACTER       shift and go to state 30
    STRING          shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    LBRACKET        shift and go to state 34

    term                           shift and go to state 68
    atom                           shift and go to state 27

state 43

    (40) exponent -> term POWER . unary_statement
    (36) unary_statement -> . exponent
    (37) unary_statement -> . MINUS unary_statement
    (38) unary_statement -> . NOT unary_statement
    (39) exponent -> . term
    (40) exponent -> . term POWER unary_statement
    (41) term -> . IDENTIFIER
    (42) term -> . atom
    (43) term -> . LPAREN expression RPAREN
    (44) atom -> . INTEGER
    (45) atom -> . FLOAT
    (46) atom -> . CHARACTER
    (47) atom -> . STRING
    (48) atom -> . TRUE
    (49) atom -> . FALSE
    (50) atom -> . LBRACKET elements RBRACKET
    (51) atom -> . IDENTIFIER LBRACKET INTEGER RBRACKET

    MINUS           shift and go to state 23
    NOT             shift and go to state 26
    IDENTIFIER      shift and go to state 58
    LPAREN          shift and go to state 13
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 29
    CHARACTER       shift and go to state 30
    STRING          shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    LBRACKET        shift and go to state 34

    term                           shift and go to state 16
    unary_statement                shift and go to state 69
    exponent                       shift and go to state 25
    atom                           shift and go to state 27

state 44

    (18) or_statement -> or_statement OR . and_statement
    (19) and_statement -> . equality_statement
    (20) and_statement -> . and_statement AND equality_statement
    (21) equality_statement -> . relational_statement
    (22) equality_statement -> . equality_statement EQ relational_statement
    (23) equality_statement -> . equality_statement NEQ relational_statement
    (24) relational_statement -> . add_statement
    (25) relational_statement -> . relational_statement LT add_statement
    (26) relational_statement -> . relational_statement GT add_statement
    (27) relational_statement -> . relational_statement LTEQ add_statement
    (28) relational_statement -> . relational_statement GTEQ add_statement
    (29) add_statement -> . multiply_statement
    (30) add_statement -> . add_statement PLUS multiply_statement
    (31) add_statement -> . add_statement MINUS multiply_statement
    (32) multiply_statement -> . unary_statement
    (33) multiply_statement -> . multiply_statement TIMES unary_statement
    (34) multiply_statement -> . multiply_statement DIVIDE unary_statement
    (35) multiply_statement -> . multiply_statement MOD unary_statement
    (36) unary_statement -> . exponent
    (37) unary_statement -> . MINUS unary_statement
    (38) unary_statement -> . NOT unary_statement
    (39) exponent -> . term
    (40) exponent -> . term POWER unary_statement
    (41) term -> . IDENTIFIER
    (42) term -> . atom
    (43) term -> . LPAREN expression RPAREN
    (44) atom -> . INTEGER
    (45) atom -> . FLOAT
    (46) atom -> . CHARACTER
    (47) atom -> . STRING
    (48) atom -> . TRUE
    (49) atom -> . FALSE
    (50) atom -> . LBRACKET elements RBRACKET
    (51) atom -> . IDENTIFIER LBRACKET INTEGER RBRACKET

    MINUS           shift and go to state 23
    NOT             shift and go to state 26
    IDENTIFIER      shift and go to state 58
    LPAREN          shift and go to state 13
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 29
    CHARACTER       shift and go to state 30
    STRING          shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    LBRACKET        shift and go to state 34

    and_statement                  shift and go to state 70
    equality_statement             shift and go to state 19
    relational_statement           shift and go to state 20
    add_statement                  shift and go to state 21
    multiply_statement             shift and go to state 22
    unary_statement                shift and go to state 24
    exponent                       shift and go to state 25
    term                           shift and go to state 16
    atom                           shift and go to state 27

state 45

    (20) and_statement -> and_statement AND . equality_statement
    (21) equality_statement -> . relational_statement
    (22) equality_statement -> . equality_statement EQ relational_statement
    (23) equality_statement -> . equality_statement NEQ relational_statement
    (24) relational_statement -> . add_statement
    (25) relational_statement -> . relational_statement LT add_statement
    (26) relational_statement -> . relational_statement GT add_statement
    (27) relational_statement -> . relational_statement LTEQ add_statement
    (28) relational_statement -> . relational_statement GTEQ add_statement
    (29) add_statement -> . multiply_statement
    (30) add_statement -> . add_statement PLUS multiply_statement
    (31) add_statement -> . add_statement MINUS multiply_statement
    (32) multiply_statement -> . unary_statement
    (33) multiply_statement -> . multiply_statement TIMES unary_statement
    (34) multiply_statement -> . multiply_statement DIVIDE unary_statement
    (35) multiply_statement -> . multiply_statement MOD unary_statement
    (36) unary_statement -> . exponent
    (37) unary_statement -> . MINUS unary_statement
    (38) unary_statement -> . NOT unary_statement
    (39) exponent -> . term
    (40) exponent -> . term POWER unary_statement
    (41) term -> . IDENTIFIER
    (42) term -> . atom
    (43) term -> . LPAREN expression RPAREN
    (44) atom -> . INTEGER
    (45) atom -> . FLOAT
    (46) atom -> . CHARACTER
    (47) atom -> . STRING
    (48) atom -> . TRUE
    (49) atom -> . FALSE
    (50) atom -> . LBRACKET elements RBRACKET
    (51) atom -> . IDENTIFIER LBRACKET INTEGER RBRACKET

    MINUS           shift and go to state 23
    NOT             shift and go to state 26
    IDENTIFIER      shift and go to state 58
    LPAREN          shift and go to state 13
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 29
    CHARACTER       shift and go to state 30
    STRING          shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    LBRACKET        shift and go to state 34

    equality_statement             shift and go to state 71
    relational_statement           shift and go to state 20
    add_statement                  shift and go to state 21
    multiply_statement             shift and go to state 22
    unary_statement                shift and go to state 24
    exponent                       shift and go to state 25
    term                           shift and go to state 16
    atom                           shift and go to state 27

state 46

    (22) equality_statement -> equality_statement EQ . relational_statement
    (24) relational_statement -> . add_statement
    (25) relational_statement -> . relational_statement LT add_statement
    (26) relational_statement -> . relational_statement GT add_statement
    (27) relational_statement -> . relational_statement LTEQ add_statement
    (28) relational_statement -> . relational_statement GTEQ add_statement
    (29) add_statement -> . multiply_statement
    (30) add_statement -> . add_statement PLUS multiply_statement
    (31) add_statement -> . add_statement MINUS multiply_statement
    (32) multiply_statement -> . unary_statement
    (33) multiply_statement -> . multiply_statement TIMES unary_statement
    (34) multiply_statement -> . multiply_statement DIVIDE unary_statement
    (35) multiply_statement -> . multiply_statement MOD unary_statement
    (36) unary_statement -> . exponent
    (37) unary_statement -> . MINUS unary_statement
    (38) unary_statement -> . NOT unary_statement
    (39) exponent -> . term
    (40) exponent -> . term POWER unary_statement
    (41) term -> . IDENTIFIER
    (42) term -> . atom
    (43) term -> . LPAREN expression RPAREN
    (44) atom -> . INTEGER
    (45) atom -> . FLOAT
    (46) atom -> . CHARACTER
    (47) atom -> . STRING
    (48) atom -> . TRUE
    (49) atom -> . FALSE
    (50) atom -> . LBRACKET elements RBRACKET
    (51) atom -> . IDENTIFIER LBRACKET INTEGER RBRACKET

    MINUS           shift and go to state 23
    NOT             shift and go to state 26
    IDENTIFIER      shift and go to state 58
    LPAREN          shift and go to state 13
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 29
    CHARACTER       shift and go to state 30
    STRING          shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    LBRACKET        shift and go to state 34

    relational_statement           shift and go to state 72
    add_statement                  shift and go to state 21
    multiply_statement             shift and go to state 22
    unary_statement                shift and go to state 24
    exponent                       shift and go to state 25
    term                           shift and go to state 16
    atom                           shift and go to state 27

state 47

    (23) equality_statement -> equality_statement NEQ . relational_statement
    (24) relational_statement -> . add_statement
    (25) relational_statement -> . relational_statement LT add_statement
    (26) relational_statement -> . relational_statement GT add_statement
    (27) relational_statement -> . relational_statement LTEQ add_statement
    (28) relational_statement -> . relational_statement GTEQ add_statement
    (29) add_statement -> . multiply_statement
    (30) add_statement -> . add_statement PLUS multiply_statement
    (31) add_statement -> . add_statement MINUS multiply_statement
    (32) multiply_statement -> . unary_statement
    (33) multiply_statement -> . multiply_statement TIMES unary_statement
    (34) multiply_statement -> . multiply_statement DIVIDE unary_statement
    (35) multiply_statement -> . multiply_statement MOD unary_statement
    (36) unary_statement -> . exponent
    (37) unary_statement -> . MINUS unary_statement
    (38) unary_statement -> . NOT unary_statement
    (39) exponent -> . term
    (40) exponent -> . term POWER unary_statement
    (41) term -> . IDENTIFIER
    (42) term -> . atom
    (43) term -> . LPAREN expression RPAREN
    (44) atom -> . INTEGER
    (45) atom -> . FLOAT
    (46) atom -> . CHARACTER
    (47) atom -> . STRING
    (48) atom -> . TRUE
    (49) atom -> . FALSE
    (50) atom -> . LBRACKET elements RBRACKET
    (51) atom -> . IDENTIFIER LBRACKET INTEGER RBRACKET

    MINUS           shift and go to state 23
    NOT             shift and go to state 26
    IDENTIFIER      shift and go to state 58
    LPAREN          shift and go to state 13
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 29
    CHARACTER       shift and go to state 30
    STRING          shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    LBRACKET        shift and go to state 34

    relational_statement           shift and go to state 73
    add_statement                  shift and go to state 21
    multiply_statement             shift and go to state 22
    unary_statement                shift and go to state 24
    exponent                       shift and go to state 25
    term                           shift and go to state 16
    atom                           shift and go to state 27

state 48

    (25) relational_statement -> relational_statement LT . add_statement
    (29) add_statement -> . multiply_statement
    (30) add_statement -> . add_statement PLUS multiply_statement
    (31) add_statement -> . add_statement MINUS multiply_statement
    (32) multiply_statement -> . unary_statement
    (33) multiply_statement -> . multiply_statement TIMES unary_statement
    (34) multiply_statement -> . multiply_statement DIVIDE unary_statement
    (35) multiply_statement -> . multiply_statement MOD unary_statement
    (36) unary_statement -> . exponent
    (37) unary_statement -> . MINUS unary_statement
    (38) unary_statement -> . NOT unary_statement
    (39) exponent -> . term
    (40) exponent -> . term POWER unary_statement
    (41) term -> . IDENTIFIER
    (42) term -> . atom
    (43) term -> . LPAREN expression RPAREN
    (44) atom -> . INTEGER
    (45) atom -> . FLOAT
    (46) atom -> . CHARACTER
    (47) atom -> . STRING
    (48) atom -> . TRUE
    (49) atom -> . FALSE
    (50) atom -> . LBRACKET elements RBRACKET
    (51) atom -> . IDENTIFIER LBRACKET INTEGER RBRACKET

    MINUS           shift and go to state 23
    NOT             shift and go to state 26
    IDENTIFIER      shift and go to state 58
    LPAREN          shift and go to state 13
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 29
    CHARACTER       shift and go to state 30
    STRING          shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    LBRACKET        shift and go to state 34

    add_statement                  shift and go to state 74
    multiply_statement             shift and go to state 22
    unary_statement                shift and go to state 24
    exponent                       shift and go to state 25
    term                           shift and go to state 16
    atom                           shift and go to state 27

state 49

    (26) relational_statement -> relational_statement GT . add_statement
    (29) add_statement -> . multiply_statement
    (30) add_statement -> . add_statement PLUS multiply_statement
    (31) add_statement -> . add_statement MINUS multiply_statement
    (32) multiply_statement -> . unary_statement
    (33) multiply_statement -> . multiply_statement TIMES unary_statement
    (34) multiply_statement -> . multiply_statement DIVIDE unary_statement
    (35) multiply_statement -> . multiply_statement MOD unary_statement
    (36) unary_statement -> . exponent
    (37) unary_statement -> . MINUS unary_statement
    (38) unary_statement -> . NOT unary_statement
    (39) exponent -> . term
    (40) exponent -> . term POWER unary_statement
    (41) term -> . IDENTIFIER
    (42) term -> . atom
    (43) term -> . LPAREN expression RPAREN
    (44) atom -> . INTEGER
    (45) atom -> . FLOAT
    (46) atom -> . CHARACTER
    (47) atom -> . STRING
    (48) atom -> . TRUE
    (49) atom -> . FALSE
    (50) atom -> . LBRACKET elements RBRACKET
    (51) atom -> . IDENTIFIER LBRACKET INTEGER RBRACKET

    MINUS           shift and go to state 23
    NOT             shift and go to state 26
    IDENTIFIER      shift and go to state 58
    LPAREN          shift and go to state 13
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 29
    CHARACTER       shift and go to state 30
    STRING          shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    LBRACKET        shift and go to state 34

    add_statement                  shift and go to state 75
    multiply_statement             shift and go to state 22
    unary_statement                shift and go to state 24
    exponent                       shift and go to state 25
    term                           shift and go to state 16
    atom                           shift and go to state 27

state 50

    (27) relational_statement -> relational_statement LTEQ . add_statement
    (29) add_statement -> . multiply_statement
    (30) add_statement -> . add_statement PLUS multiply_statement
    (31) add_statement -> . add_statement MINUS multiply_statement
    (32) multiply_statement -> . unary_statement
    (33) multiply_statement -> . multiply_statement TIMES unary_statement
    (34) multiply_statement -> . multiply_statement DIVIDE unary_statement
    (35) multiply_statement -> . multiply_statement MOD unary_statement
    (36) unary_statement -> . exponent
    (37) unary_statement -> . MINUS unary_statement
    (38) unary_statement -> . NOT unary_statement
    (39) exponent -> . term
    (40) exponent -> . term POWER unary_statement
    (41) term -> . IDENTIFIER
    (42) term -> . atom
    (43) term -> . LPAREN expression RPAREN
    (44) atom -> . INTEGER
    (45) atom -> . FLOAT
    (46) atom -> . CHARACTER
    (47) atom -> . STRING
    (48) atom -> . TRUE
    (49) atom -> . FALSE
    (50) atom -> . LBRACKET elements RBRACKET
    (51) atom -> . IDENTIFIER LBRACKET INTEGER RBRACKET

    MINUS           shift and go to state 23
    NOT             shift and go to state 26
    IDENTIFIER      shift and go to state 58
    LPAREN          shift and go to state 13
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 29
    CHARACTER       shift and go to state 30
    STRING          shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    LBRACKET        shift and go to state 34

    add_statement                  shift and go to state 76
    multiply_statement             shift and go to state 22
    unary_statement                shift and go to state 24
    exponent                       shift and go to state 25
    term                           shift and go to state 16
    atom                           shift and go to state 27

state 51

    (28) relational_statement -> relational_statement GTEQ . add_statement
    (29) add_statement -> . multiply_statement
    (30) add_statement -> . add_statement PLUS multiply_statement
    (31) add_statement -> . add_statement MINUS multiply_statement
    (32) multiply_statement -> . unary_statement
    (33) multiply_statement -> . multiply_statement TIMES unary_statement
    (34) multiply_statement -> . multiply_statement DIVIDE unary_statement
    (35) multiply_statement -> . multiply_statement MOD unary_statement
    (36) unary_statement -> . exponent
    (37) unary_statement -> . MINUS unary_statement
    (38) unary_statement -> . NOT unary_statement
    (39) exponent -> . term
    (40) exponent -> . term POWER unary_statement
    (41) term -> . IDENTIFIER
    (42) term -> . atom
    (43) term -> . LPAREN expression RPAREN
    (44) atom -> . INTEGER
    (45) atom -> . FLOAT
    (46) atom -> . CHARACTER
    (47) atom -> . STRING
    (48) atom -> . TRUE
    (49) atom -> . FALSE
    (50) atom -> . LBRACKET elements RBRACKET
    (51) atom -> . IDENTIFIER LBRACKET INTEGER RBRACKET

    MINUS           shift and go to state 23
    NOT             shift and go to state 26
    IDENTIFIER      shift and go to state 58
    LPAREN          shift and go to state 13
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 29
    CHARACTER       shift and go to state 30
    STRING          shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    LBRACKET        shift and go to state 34

    add_statement                  shift and go to state 77
    multiply_statement             shift and go to state 22
    unary_statement                shift and go to state 24
    exponent                       shift and go to state 25
    term                           shift and go to state 16
    atom                           shift and go to state 27

state 52

    (30) add_statement -> add_statement PLUS . multiply_statement
    (32) multiply_statement -> . unary_statement
    (33) multiply_statement -> . multiply_statement TIMES unary_statement
    (34) multiply_statement -> . multiply_statement DIVIDE unary_statement
    (35) multiply_statement -> . multiply_statement MOD unary_statement
    (36) unary_statement -> . exponent
    (37) unary_statement -> . MINUS unary_statement
    (38) unary_statement -> . NOT unary_statement
    (39) exponent -> . term
    (40) exponent -> . term POWER unary_statement
    (41) term -> . IDENTIFIER
    (42) term -> . atom
    (43) term -> . LPAREN expression RPAREN
    (44) atom -> . INTEGER
    (45) atom -> . FLOAT
    (46) atom -> . CHARACTER
    (47) atom -> . STRING
    (48) atom -> . TRUE
    (49) atom -> . FALSE
    (50) atom -> . LBRACKET elements RBRACKET
    (51) atom -> . IDENTIFIER LBRACKET INTEGER RBRACKET

    MINUS           shift and go to state 23
    NOT             shift and go to state 26
    IDENTIFIER      shift and go to state 58
    LPAREN          shift and go to state 13
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 29
    CHARACTER       shift and go to state 30
    STRING          shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    LBRACKET        shift and go to state 34

    multiply_statement             shift and go to state 78
    unary_statement                shift and go to state 24
    exponent                       shift and go to state 25
    term                           shift and go to state 16
    atom                           shift and go to state 27

state 53

    (31) add_statement -> add_statement MINUS . multiply_statement
    (32) multiply_statement -> . unary_statement
    (33) multiply_statement -> . multiply_statement TIMES unary_statement
    (34) multiply_statement -> . multiply_statement DIVIDE unary_statement
    (35) multiply_statement -> . multiply_statement MOD unary_statement
    (36) unary_statement -> . exponent
    (37) unary_statement -> . MINUS unary_statement
    (38) unary_statement -> . NOT unary_statement
    (39) exponent -> . term
    (40) exponent -> . term POWER unary_statement
    (41) term -> . IDENTIFIER
    (42) term -> . atom
    (43) term -> . LPAREN expression RPAREN
    (44) atom -> . INTEGER
    (45) atom -> . FLOAT
    (46) atom -> . CHARACTER
    (47) atom -> . STRING
    (48) atom -> . TRUE
    (49) atom -> . FALSE
    (50) atom -> . LBRACKET elements RBRACKET
    (51) atom -> . IDENTIFIER LBRACKET INTEGER RBRACKET

    MINUS           shift and go to state 23
    NOT             shift and go to state 26
    IDENTIFIER      shift and go to state 58
    LPAREN          shift and go to state 13
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 29
    CHARACTER       shift and go to state 30
    STRING          shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    LBRACKET        shift and go to state 34

    multiply_statement             shift and go to state 79
    unary_statement                shift and go to state 24
    exponent                       shift and go to state 25
    term                           shift and go to state 16
    atom                           shift and go to state 27

state 54

    (33) multiply_statement -> multiply_statement TIMES . unary_statement
    (36) unary_statement -> . exponent
    (37) unary_statement -> . MINUS unary_statement
    (38) unary_statement -> . NOT unary_statement
    (39) exponent -> . term
    (40) exponent -> . term POWER unary_statement
    (41) term -> . IDENTIFIER
    (42) term -> . atom
    (43) term -> . LPAREN expression RPAREN
    (44) atom -> . INTEGER
    (45) atom -> . FLOAT
    (46) atom -> . CHARACTER
    (47) atom -> . STRING
    (48) atom -> . TRUE
    (49) atom -> . FALSE
    (50) atom -> . LBRACKET elements RBRACKET
    (51) atom -> . IDENTIFIER LBRACKET INTEGER RBRACKET

    MINUS           shift and go to state 23
    NOT             shift and go to state 26
    IDENTIFIER      shift and go to state 58
    LPAREN          shift and go to state 13
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 29
    CHARACTER       shift and go to state 30
    STRING          shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    LBRACKET        shift and go to state 34

    unary_statement                shift and go to state 80
    exponent                       shift and go to state 25
    term                           shift and go to state 16
    atom                           shift and go to state 27

state 55

    (34) multiply_statement -> multiply_statement DIVIDE . unary_statement
    (36) unary_statement -> . exponent
    (37) unary_statement -> . MINUS unary_statement
    (38) unary_statement -> . NOT unary_statement
    (39) exponent -> . term
    (40) exponent -> . term POWER unary_statement
    (41) term -> . IDENTIFIER
    (42) term -> . atom
    (43) term -> . LPAREN expression RPAREN
    (44) atom -> . INTEGER
    (45) atom -> . FLOAT
    (46) atom -> . CHARACTER
    (47) atom -> . STRING
    (48) atom -> . TRUE
    (49) atom -> . FALSE
    (50) atom -> . LBRACKET elements RBRACKET
    (51) atom -> . IDENTIFIER LBRACKET INTEGER RBRACKET

    MINUS           shift and go to state 23
    NOT             shift and go to state 26
    IDENTIFIER      shift and go to state 58
    LPAREN          shift and go to state 13
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 29
    CHARACTER       shift and go to state 30
    STRING          shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    LBRACKET        shift and go to state 34

    unary_statement                shift and go to state 81
    exponent                       shift and go to state 25
    term                           shift and go to state 16
    atom                           shift and go to state 27

state 56

    (35) multiply_statement -> multiply_statement MOD . unary_statement
    (36) unary_statement -> . exponent
    (37) unary_statement -> . MINUS unary_statement
    (38) unary_statement -> . NOT unary_statement
    (39) exponent -> . term
    (40) exponent -> . term POWER unary_statement
    (41) term -> . IDENTIFIER
    (42) term -> . atom
    (43) term -> . LPAREN expression RPAREN
    (44) atom -> . INTEGER
    (45) atom -> . FLOAT
    (46) atom -> . CHARACTER
    (47) atom -> . STRING
    (48) atom -> . TRUE
    (49) atom -> . FALSE
    (50) atom -> . LBRACKET elements RBRACKET
    (51) atom -> . IDENTIFIER LBRACKET INTEGER RBRACKET

    MINUS           shift and go to state 23
    NOT             shift and go to state 26
    IDENTIFIER      shift and go to state 58
    LPAREN          shift and go to state 13
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 29
    CHARACTER       shift and go to state 30
    STRING          shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    LBRACKET        shift and go to state 34

    unary_statement                shift and go to state 82
    exponent                       shift and go to state 25
    term                           shift and go to state 16
    atom                           shift and go to state 27

state 57

    (37) unary_statement -> MINUS unary_statement .

    TIMES           reduce using rule 37 (unary_statement -> MINUS unary_statement .)
    DIVIDE          reduce using rule 37 (unary_statement -> MINUS unary_statement .)
    MOD             reduce using rule 37 (unary_statement -> MINUS unary_statement .)
    PLUS            reduce using rule 37 (unary_statement -> MINUS unary_statement .)
    MINUS           reduce using rule 37 (unary_statement -> MINUS unary_statement .)
    LT              reduce using rule 37 (unary_statement -> MINUS unary_statement .)
    GT              reduce using rule 37 (unary_statement -> MINUS unary_statement .)
    LTEQ            reduce using rule 37 (unary_statement -> MINUS unary_statement .)
    GTEQ            reduce using rule 37 (unary_statement -> MINUS unary_statement .)
    EQ              reduce using rule 37 (unary_statement -> MINUS unary_statement .)
    NEQ             reduce using rule 37 (unary_statement -> MINUS unary_statement .)
    AND             reduce using rule 37 (unary_statement -> MINUS unary_statement .)
    OR              reduce using rule 37 (unary_statement -> MINUS unary_statement .)
    $end            reduce using rule 37 (unary_statement -> MINUS unary_statement .)
    COLON           reduce using rule 37 (unary_statement -> MINUS unary_statement .)
    COMMA           reduce using rule 37 (unary_statement -> MINUS unary_statement .)
    RPAREN          reduce using rule 37 (unary_statement -> MINUS unary_statement .)
    ENDWHILE        reduce using rule 37 (unary_statement -> MINUS unary_statement .)
    ELSE            reduce using rule 37 (unary_statement -> MINUS unary_statement .)
    ENDIF           reduce using rule 37 (unary_statement -> MINUS unary_statement .)
    ENDFOR          reduce using rule 37 (unary_statement -> MINUS unary_statement .)


state 58

    (41) term -> IDENTIFIER .
    (51) atom -> IDENTIFIER . LBRACKET INTEGER RBRACKET

    POWER           reduce using rule 41 (term -> IDENTIFIER .)
    TIMES           reduce using rule 41 (term -> IDENTIFIER .)
    DIVIDE          reduce using rule 41 (term -> IDENTIFIER .)
    MOD             reduce using rule 41 (term -> IDENTIFIER .)
    PLUS            reduce using rule 41 (term -> IDENTIFIER .)
    MINUS           reduce using rule 41 (term -> IDENTIFIER .)
    LT              reduce using rule 41 (term -> IDENTIFIER .)
    GT              reduce using rule 41 (term -> IDENTIFIER .)
    LTEQ            reduce using rule 41 (term -> IDENTIFIER .)
    GTEQ            reduce using rule 41 (term -> IDENTIFIER .)
    EQ              reduce using rule 41 (term -> IDENTIFIER .)
    NEQ             reduce using rule 41 (term -> IDENTIFIER .)
    AND             reduce using rule 41 (term -> IDENTIFIER .)
    OR              reduce using rule 41 (term -> IDENTIFIER .)
    $end            reduce using rule 41 (term -> IDENTIFIER .)
    COLON           reduce using rule 41 (term -> IDENTIFIER .)
    COMMA           reduce using rule 41 (term -> IDENTIFIER .)
    RPAREN          reduce using rule 41 (term -> IDENTIFIER .)
    ENDWHILE        reduce using rule 41 (term -> IDENTIFIER .)
    ELSE            reduce using rule 41 (term -> IDENTIFIER .)
    ENDIF           reduce using rule 41 (term -> IDENTIFIER .)
    ENDFOR          reduce using rule 41 (term -> IDENTIFIER .)
    LBRACKET        shift and go to state 41


state 59

    (38) unary_statement -> NOT unary_statement .

    TIMES           reduce using rule 38 (unary_statement -> NOT unary_statement .)
    DIVIDE          reduce using rule 38 (unary_statement -> NOT unary_statement .)
    MOD             reduce using rule 38 (unary_statement -> NOT unary_statement .)
    PLUS            reduce using rule 38 (unary_statement -> NOT unary_statement .)
    MINUS           reduce using rule 38 (unary_statement -> NOT unary_statement .)
    LT              reduce using rule 38 (unary_statement -> NOT unary_statement .)
    GT              reduce using rule 38 (unary_statement -> NOT unary_statement .)
    LTEQ            reduce using rule 38 (unary_statement -> NOT unary_statement .)
    GTEQ            reduce using rule 38 (unary_statement -> NOT unary_statement .)
    EQ              reduce using rule 38 (unary_statement -> NOT unary_statement .)
    NEQ             reduce using rule 38 (unary_statement -> NOT unary_statement .)
    AND             reduce using rule 38 (unary_statement -> NOT unary_statement .)
    OR              reduce using rule 38 (unary_statement -> NOT unary_statement .)
    $end            reduce using rule 38 (unary_statement -> NOT unary_statement .)
    COLON           reduce using rule 38 (unary_statement -> NOT unary_statement .)
    COMMA           reduce using rule 38 (unary_statement -> NOT unary_statement .)
    RPAREN          reduce using rule 38 (unary_statement -> NOT unary_statement .)
    ENDWHILE        reduce using rule 38 (unary_statement -> NOT unary_statement .)
    ELSE            reduce using rule 38 (unary_statement -> NOT unary_statement .)
    ENDIF           reduce using rule 38 (unary_statement -> NOT unary_statement .)
    ENDFOR          reduce using rule 38 (unary_statement -> NOT unary_statement .)


state 60

    (50) atom -> LBRACKET elements . RBRACKET
    (52) elements -> elements . INTEGER
    (53) elements -> elements . FLOAT

    RBRACKET        shift and go to state 83
    INTEGER         shift and go to state 84
    FLOAT           shift and go to state 85


state 61

    (7) iterative_statement -> WHILE expression COLON . start ENDWHILE
    (1) start -> . code_entity
    (2) code_entity -> . iterative_statement
    (3) code_entity -> . conditional_statement
    (4) code_entity -> . expression
    (5) code_entity -> . input_function
    (6) code_entity -> . output_function
    (7) iterative_statement -> . WHILE expression COLON start ENDWHILE
    (8) iterative_statement -> . FOR expression COMMA expression COMMA expression COLON start ENDFOR
    (9) conditional_statement -> . IF expression seen_exp COLON start seen_start ELSE seen_else start seen_start ENDIF
    (10) conditional_statement -> . IF expression seen_exp COLON start seen_start ENDIF
    (14) expression -> . assignment_statement
    (55) input_function -> . INPUT LPAREN IDENTIFIER RPAREN
    (56) output_function -> . PRINT LPAREN term RPAREN
    (15) assignment_statement -> . or_statement
    (16) assignment_statement -> . IDENTIFIER EQUALS or_statement
    (17) or_statement -> . and_statement
    (18) or_statement -> . or_statement OR and_statement
    (19) and_statement -> . equality_statement
    (20) and_statement -> . and_statement AND equality_statement
    (21) equality_statement -> . relational_statement
    (22) equality_statement -> . equality_statement EQ relational_statement
    (23) equality_statement -> . equality_statement NEQ relational_statement
    (24) relational_statement -> . add_statement
    (25) relational_statement -> . relational_statement LT add_statement
    (26) relational_statement -> . relational_statement GT add_statement
    (27) relational_statement -> . relational_statement LTEQ add_statement
    (28) relational_statement -> . relational_statement GTEQ add_statement
    (29) add_statement -> . multiply_statement
    (30) add_statement -> . add_statement PLUS multiply_statement
    (31) add_statement -> . add_statement MINUS multiply_statement
    (32) multiply_statement -> . unary_statement
    (33) multiply_statement -> . multiply_statement TIMES unary_statement
    (34) multiply_statement -> . multiply_statement DIVIDE unary_statement
    (35) multiply_statement -> . multiply_statement MOD unary_statement
    (36) unary_statement -> . exponent
    (37) unary_statement -> . MINUS unary_statement
    (38) unary_statement -> . NOT unary_statement
    (39) exponent -> . term
    (40) exponent -> . term POWER unary_statement
    (41) term -> . IDENTIFIER
    (42) term -> . atom
    (43) term -> . LPAREN expression RPAREN
    (44) atom -> . INTEGER
    (45) atom -> . FLOAT
    (46) atom -> . CHARACTER
    (47) atom -> . STRING
    (48) atom -> . TRUE
    (49) atom -> . FALSE
    (50) atom -> . LBRACKET elements RBRACKET
    (51) atom -> . IDENTIFIER LBRACKET INTEGER RBRACKET

    WHILE           shift and go to state 8
    FOR             shift and go to state 9
    IF              shift and go to state 10
    INPUT           shift and go to state 12
    PRINT           shift and go to state 15
    IDENTIFIER      shift and go to state 14
    MINUS           shift and go to state 23
    NOT             shift and go to state 26
    LPAREN          shift and go to state 13
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 29
    CHARACTER       shift and go to state 30
    STRING          shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    LBRACKET        shift and go to state 34

    expression                     shift and go to state 5
    start                          shift and go to state 86
    code_entity                    shift and go to state 2
    iterative_statement            shift and go to state 3
    conditional_statement          shift and go to state 4
    input_function                 shift and go to state 6
    output_function                shift and go to state 7
    assignment_statement           shift and go to state 11
    term                           shift and go to state 16
    or_statement                   shift and go to state 17
    and_statement                  shift and go to state 18
    equality_statement             shift and go to state 19
    relational_statement           shift and go to state 20
    add_statement                  shift and go to state 21
    multiply_statement             shift and go to state 22
    unary_statement                shift and go to state 24
    exponent                       shift and go to state 25
    atom                           shift and go to state 27

state 62

    (8) iterative_statement -> FOR expression COMMA . expression COMMA expression COLON start ENDFOR
    (14) expression -> . assignment_statement
    (15) assignment_statement -> . or_statement
    (16) assignment_statement -> . IDENTIFIER EQUALS or_statement
    (17) or_statement -> . and_statement
    (18) or_statement -> . or_statement OR and_statement
    (19) and_statement -> . equality_statement
    (20) and_statement -> . and_statement AND equality_statement
    (21) equality_statement -> . relational_statement
    (22) equality_statement -> . equality_statement EQ relational_statement
    (23) equality_statement -> . equality_statement NEQ relational_statement
    (24) relational_statement -> . add_statement
    (25) relational_statement -> . relational_statement LT add_statement
    (26) relational_statement -> . relational_statement GT add_statement
    (27) relational_statement -> . relational_statement LTEQ add_statement
    (28) relational_statement -> . relational_statement GTEQ add_statement
    (29) add_statement -> . multiply_statement
    (30) add_statement -> . add_statement PLUS multiply_statement
    (31) add_statement -> . add_statement MINUS multiply_statement
    (32) multiply_statement -> . unary_statement
    (33) multiply_statement -> . multiply_statement TIMES unary_statement
    (34) multiply_statement -> . multiply_statement DIVIDE unary_statement
    (35) multiply_statement -> . multiply_statement MOD unary_statement
    (36) unary_statement -> . exponent
    (37) unary_statement -> . MINUS unary_statement
    (38) unary_statement -> . NOT unary_statement
    (39) exponent -> . term
    (40) exponent -> . term POWER unary_statement
    (41) term -> . IDENTIFIER
    (42) term -> . atom
    (43) term -> . LPAREN expression RPAREN
    (44) atom -> . INTEGER
    (45) atom -> . FLOAT
    (46) atom -> . CHARACTER
    (47) atom -> . STRING
    (48) atom -> . TRUE
    (49) atom -> . FALSE
    (50) atom -> . LBRACKET elements RBRACKET
    (51) atom -> . IDENTIFIER LBRACKET INTEGER RBRACKET

    IDENTIFIER      shift and go to state 14
    MINUS           shift and go to state 23
    NOT             shift and go to state 26
    LPAREN          shift and go to state 13
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 29
    CHARACTER       shift and go to state 30
    STRING          shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    LBRACKET        shift and go to state 34

    expression                     shift and go to state 87
    assignment_statement           shift and go to state 11
    or_statement                   shift and go to state 17
    and_statement                  shift and go to state 18
    equality_statement             shift and go to state 19
    relational_statement           shift and go to state 20
    add_statement                  shift and go to state 21
    multiply_statement             shift and go to state 22
    unary_statement                shift and go to state 24
    exponent                       shift and go to state 25
    term                           shift and go to state 16
    atom                           shift and go to state 27

state 63

    (9) conditional_statement -> IF expression seen_exp . COLON start seen_start ELSE seen_else start seen_start ENDIF
    (10) conditional_statement -> IF expression seen_exp . COLON start seen_start ENDIF

    COLON           shift and go to state 88


state 64

    (55) input_function -> INPUT LPAREN IDENTIFIER . RPAREN

    RPAREN          shift and go to state 89


state 65

    (43) term -> LPAREN expression RPAREN .

    POWER           reduce using rule 43 (term -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 43 (term -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 43 (term -> LPAREN expression RPAREN .)
    MOD             reduce using rule 43 (term -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 43 (term -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 43 (term -> LPAREN expression RPAREN .)
    LT              reduce using rule 43 (term -> LPAREN expression RPAREN .)
    GT              reduce using rule 43 (term -> LPAREN expression RPAREN .)
    LTEQ            reduce using rule 43 (term -> LPAREN expression RPAREN .)
    GTEQ            reduce using rule 43 (term -> LPAREN expression RPAREN .)
    EQ              reduce using rule 43 (term -> LPAREN expression RPAREN .)
    NEQ             reduce using rule 43 (term -> LPAREN expression RPAREN .)
    AND             reduce using rule 43 (term -> LPAREN expression RPAREN .)
    OR              reduce using rule 43 (term -> LPAREN expression RPAREN .)
    $end            reduce using rule 43 (term -> LPAREN expression RPAREN .)
    COLON           reduce using rule 43 (term -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 43 (term -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 43 (term -> LPAREN expression RPAREN .)
    ENDWHILE        reduce using rule 43 (term -> LPAREN expression RPAREN .)
    ELSE            reduce using rule 43 (term -> LPAREN expression RPAREN .)
    ENDIF           reduce using rule 43 (term -> LPAREN expression RPAREN .)
    ENDFOR          reduce using rule 43 (term -> LPAREN expression RPAREN .)


state 66

    (16) assignment_statement -> IDENTIFIER EQUALS or_statement .
    (18) or_statement -> or_statement . OR and_statement

    $end            reduce using rule 16 (assignment_statement -> IDENTIFIER EQUALS or_statement .)
    COLON           reduce using rule 16 (assignment_statement -> IDENTIFIER EQUALS or_statement .)
    COMMA           reduce using rule 16 (assignment_statement -> IDENTIFIER EQUALS or_statement .)
    RPAREN          reduce using rule 16 (assignment_statement -> IDENTIFIER EQUALS or_statement .)
    ENDWHILE        reduce using rule 16 (assignment_statement -> IDENTIFIER EQUALS or_statement .)
    ELSE            reduce using rule 16 (assignment_statement -> IDENTIFIER EQUALS or_statement .)
    ENDIF           reduce using rule 16 (assignment_statement -> IDENTIFIER EQUALS or_statement .)
    ENDFOR          reduce using rule 16 (assignment_statement -> IDENTIFIER EQUALS or_statement .)
    OR              shift and go to state 44


state 67

    (51) atom -> IDENTIFIER LBRACKET INTEGER . RBRACKET

    RBRACKET        shift and go to state 90


state 68

    (56) output_function -> PRINT LPAREN term . RPAREN

    RPAREN          shift and go to state 91


state 69

    (40) exponent -> term POWER unary_statement .

    TIMES           reduce using rule 40 (exponent -> term POWER unary_statement .)
    DIVIDE          reduce using rule 40 (exponent -> term POWER unary_statement .)
    MOD             reduce using rule 40 (exponent -> term POWER unary_statement .)
    PLUS            reduce using rule 40 (exponent -> term POWER unary_statement .)
    MINUS           reduce using rule 40 (exponent -> term POWER unary_statement .)
    LT              reduce using rule 40 (exponent -> term POWER unary_statement .)
    GT              reduce using rule 40 (exponent -> term POWER unary_statement .)
    LTEQ            reduce using rule 40 (exponent -> term POWER unary_statement .)
    GTEQ            reduce using rule 40 (exponent -> term POWER unary_statement .)
    EQ              reduce using rule 40 (exponent -> term POWER unary_statement .)
    NEQ             reduce using rule 40 (exponent -> term POWER unary_statement .)
    AND             reduce using rule 40 (exponent -> term POWER unary_statement .)
    OR              reduce using rule 40 (exponent -> term POWER unary_statement .)
    $end            reduce using rule 40 (exponent -> term POWER unary_statement .)
    COLON           reduce using rule 40 (exponent -> term POWER unary_statement .)
    COMMA           reduce using rule 40 (exponent -> term POWER unary_statement .)
    RPAREN          reduce using rule 40 (exponent -> term POWER unary_statement .)
    ENDWHILE        reduce using rule 40 (exponent -> term POWER unary_statement .)
    ELSE            reduce using rule 40 (exponent -> term POWER unary_statement .)
    ENDIF           reduce using rule 40 (exponent -> term POWER unary_statement .)
    ENDFOR          reduce using rule 40 (exponent -> term POWER unary_statement .)


state 70

    (18) or_statement -> or_statement OR and_statement .
    (20) and_statement -> and_statement . AND equality_statement

    OR              reduce using rule 18 (or_statement -> or_statement OR and_statement .)
    $end            reduce using rule 18 (or_statement -> or_statement OR and_statement .)
    COLON           reduce using rule 18 (or_statement -> or_statement OR and_statement .)
    COMMA           reduce using rule 18 (or_statement -> or_statement OR and_statement .)
    RPAREN          reduce using rule 18 (or_statement -> or_statement OR and_statement .)
    ENDWHILE        reduce using rule 18 (or_statement -> or_statement OR and_statement .)
    ELSE            reduce using rule 18 (or_statement -> or_statement OR and_statement .)
    ENDIF           reduce using rule 18 (or_statement -> or_statement OR and_statement .)
    ENDFOR          reduce using rule 18 (or_statement -> or_statement OR and_statement .)
    AND             shift and go to state 45


state 71

    (20) and_statement -> and_statement AND equality_statement .
    (22) equality_statement -> equality_statement . EQ relational_statement
    (23) equality_statement -> equality_statement . NEQ relational_statement

    AND             reduce using rule 20 (and_statement -> and_statement AND equality_statement .)
    OR              reduce using rule 20 (and_statement -> and_statement AND equality_statement .)
    $end            reduce using rule 20 (and_statement -> and_statement AND equality_statement .)
    COLON           reduce using rule 20 (and_statement -> and_statement AND equality_statement .)
    COMMA           reduce using rule 20 (and_statement -> and_statement AND equality_statement .)
    RPAREN          reduce using rule 20 (and_statement -> and_statement AND equality_statement .)
    ENDWHILE        reduce using rule 20 (and_statement -> and_statement AND equality_statement .)
    ELSE            reduce using rule 20 (and_statement -> and_statement AND equality_statement .)
    ENDIF           reduce using rule 20 (and_statement -> and_statement AND equality_statement .)
    ENDFOR          reduce using rule 20 (and_statement -> and_statement AND equality_statement .)
    EQ              shift and go to state 46
    NEQ             shift and go to state 47


state 72

    (22) equality_statement -> equality_statement EQ relational_statement .
    (25) relational_statement -> relational_statement . LT add_statement
    (26) relational_statement -> relational_statement . GT add_statement
    (27) relational_statement -> relational_statement . LTEQ add_statement
    (28) relational_statement -> relational_statement . GTEQ add_statement

    EQ              reduce using rule 22 (equality_statement -> equality_statement EQ relational_statement .)
    NEQ             reduce using rule 22 (equality_statement -> equality_statement EQ relational_statement .)
    AND             reduce using rule 22 (equality_statement -> equality_statement EQ relational_statement .)
    OR              reduce using rule 22 (equality_statement -> equality_statement EQ relational_statement .)
    $end            reduce using rule 22 (equality_statement -> equality_statement EQ relational_statement .)
    COLON           reduce using rule 22 (equality_statement -> equality_statement EQ relational_statement .)
    COMMA           reduce using rule 22 (equality_statement -> equality_statement EQ relational_statement .)
    RPAREN          reduce using rule 22 (equality_statement -> equality_statement EQ relational_statement .)
    ENDWHILE        reduce using rule 22 (equality_statement -> equality_statement EQ relational_statement .)
    ELSE            reduce using rule 22 (equality_statement -> equality_statement EQ relational_statement .)
    ENDIF           reduce using rule 22 (equality_statement -> equality_statement EQ relational_statement .)
    ENDFOR          reduce using rule 22 (equality_statement -> equality_statement EQ relational_statement .)
    LT              shift and go to state 48
    GT              shift and go to state 49
    LTEQ            shift and go to state 50
    GTEQ            shift and go to state 51


state 73

    (23) equality_statement -> equality_statement NEQ relational_statement .
    (25) relational_statement -> relational_statement . LT add_statement
    (26) relational_statement -> relational_statement . GT add_statement
    (27) relational_statement -> relational_statement . LTEQ add_statement
    (28) relational_statement -> relational_statement . GTEQ add_statement

    EQ              reduce using rule 23 (equality_statement -> equality_statement NEQ relational_statement .)
    NEQ             reduce using rule 23 (equality_statement -> equality_statement NEQ relational_statement .)
    AND             reduce using rule 23 (equality_statement -> equality_statement NEQ relational_statement .)
    OR              reduce using rule 23 (equality_statement -> equality_statement NEQ relational_statement .)
    $end            reduce using rule 23 (equality_statement -> equality_statement NEQ relational_statement .)
    COLON           reduce using rule 23 (equality_statement -> equality_statement NEQ relational_statement .)
    COMMA           reduce using rule 23 (equality_statement -> equality_statement NEQ relational_statement .)
    RPAREN          reduce using rule 23 (equality_statement -> equality_statement NEQ relational_statement .)
    ENDWHILE        reduce using rule 23 (equality_statement -> equality_statement NEQ relational_statement .)
    ELSE            reduce using rule 23 (equality_statement -> equality_statement NEQ relational_statement .)
    ENDIF           reduce using rule 23 (equality_statement -> equality_statement NEQ relational_statement .)
    ENDFOR          reduce using rule 23 (equality_statement -> equality_statement NEQ relational_statement .)
    LT              shift and go to state 48
    GT              shift and go to state 49
    LTEQ            shift and go to state 50
    GTEQ            shift and go to state 51


state 74

    (25) relational_statement -> relational_statement LT add_statement .
    (30) add_statement -> add_statement . PLUS multiply_statement
    (31) add_statement -> add_statement . MINUS multiply_statement

    LT              reduce using rule 25 (relational_statement -> relational_statement LT add_statement .)
    GT              reduce using rule 25 (relational_statement -> relational_statement LT add_statement .)
    LTEQ            reduce using rule 25 (relational_statement -> relational_statement LT add_statement .)
    GTEQ            reduce using rule 25 (relational_statement -> relational_statement LT add_statement .)
    EQ              reduce using rule 25 (relational_statement -> relational_statement LT add_statement .)
    NEQ             reduce using rule 25 (relational_statement -> relational_statement LT add_statement .)
    AND             reduce using rule 25 (relational_statement -> relational_statement LT add_statement .)
    OR              reduce using rule 25 (relational_statement -> relational_statement LT add_statement .)
    $end            reduce using rule 25 (relational_statement -> relational_statement LT add_statement .)
    COLON           reduce using rule 25 (relational_statement -> relational_statement LT add_statement .)
    COMMA           reduce using rule 25 (relational_statement -> relational_statement LT add_statement .)
    RPAREN          reduce using rule 25 (relational_statement -> relational_statement LT add_statement .)
    ENDWHILE        reduce using rule 25 (relational_statement -> relational_statement LT add_statement .)
    ELSE            reduce using rule 25 (relational_statement -> relational_statement LT add_statement .)
    ENDIF           reduce using rule 25 (relational_statement -> relational_statement LT add_statement .)
    ENDFOR          reduce using rule 25 (relational_statement -> relational_statement LT add_statement .)
    PLUS            shift and go to state 52
    MINUS           shift and go to state 53


state 75

    (26) relational_statement -> relational_statement GT add_statement .
    (30) add_statement -> add_statement . PLUS multiply_statement
    (31) add_statement -> add_statement . MINUS multiply_statement

    LT              reduce using rule 26 (relational_statement -> relational_statement GT add_statement .)
    GT              reduce using rule 26 (relational_statement -> relational_statement GT add_statement .)
    LTEQ            reduce using rule 26 (relational_statement -> relational_statement GT add_statement .)
    GTEQ            reduce using rule 26 (relational_statement -> relational_statement GT add_statement .)
    EQ              reduce using rule 26 (relational_statement -> relational_statement GT add_statement .)
    NEQ             reduce using rule 26 (relational_statement -> relational_statement GT add_statement .)
    AND             reduce using rule 26 (relational_statement -> relational_statement GT add_statement .)
    OR              reduce using rule 26 (relational_statement -> relational_statement GT add_statement .)
    $end            reduce using rule 26 (relational_statement -> relational_statement GT add_statement .)
    COLON           reduce using rule 26 (relational_statement -> relational_statement GT add_statement .)
    COMMA           reduce using rule 26 (relational_statement -> relational_statement GT add_statement .)
    RPAREN          reduce using rule 26 (relational_statement -> relational_statement GT add_statement .)
    ENDWHILE        reduce using rule 26 (relational_statement -> relational_statement GT add_statement .)
    ELSE            reduce using rule 26 (relational_statement -> relational_statement GT add_statement .)
    ENDIF           reduce using rule 26 (relational_statement -> relational_statement GT add_statement .)
    ENDFOR          reduce using rule 26 (relational_statement -> relational_statement GT add_statement .)
    PLUS            shift and go to state 52
    MINUS           shift and go to state 53


state 76

    (27) relational_statement -> relational_statement LTEQ add_statement .
    (30) add_statement -> add_statement . PLUS multiply_statement
    (31) add_statement -> add_statement . MINUS multiply_statement

    LT              reduce using rule 27 (relational_statement -> relational_statement LTEQ add_statement .)
    GT              reduce using rule 27 (relational_statement -> relational_statement LTEQ add_statement .)
    LTEQ            reduce using rule 27 (relational_statement -> relational_statement LTEQ add_statement .)
    GTEQ            reduce using rule 27 (relational_statement -> relational_statement LTEQ add_statement .)
    EQ              reduce using rule 27 (relational_statement -> relational_statement LTEQ add_statement .)
    NEQ             reduce using rule 27 (relational_statement -> relational_statement LTEQ add_statement .)
    AND             reduce using rule 27 (relational_statement -> relational_statement LTEQ add_statement .)
    OR              reduce using rule 27 (relational_statement -> relational_statement LTEQ add_statement .)
    $end            reduce using rule 27 (relational_statement -> relational_statement LTEQ add_statement .)
    COLON           reduce using rule 27 (relational_statement -> relational_statement LTEQ add_statement .)
    COMMA           reduce using rule 27 (relational_statement -> relational_statement LTEQ add_statement .)
    RPAREN          reduce using rule 27 (relational_statement -> relational_statement LTEQ add_statement .)
    ENDWHILE        reduce using rule 27 (relational_statement -> relational_statement LTEQ add_statement .)
    ELSE            reduce using rule 27 (relational_statement -> relational_statement LTEQ add_statement .)
    ENDIF           reduce using rule 27 (relational_statement -> relational_statement LTEQ add_statement .)
    ENDFOR          reduce using rule 27 (relational_statement -> relational_statement LTEQ add_statement .)
    PLUS            shift and go to state 52
    MINUS           shift and go to state 53


state 77

    (28) relational_statement -> relational_statement GTEQ add_statement .
    (30) add_statement -> add_statement . PLUS multiply_statement
    (31) add_statement -> add_statement . MINUS multiply_statement

    LT              reduce using rule 28 (relational_statement -> relational_statement GTEQ add_statement .)
    GT              reduce using rule 28 (relational_statement -> relational_statement GTEQ add_statement .)
    LTEQ            reduce using rule 28 (relational_statement -> relational_statement GTEQ add_statement .)
    GTEQ            reduce using rule 28 (relational_statement -> relational_statement GTEQ add_statement .)
    EQ              reduce using rule 28 (relational_statement -> relational_statement GTEQ add_statement .)
    NEQ             reduce using rule 28 (relational_statement -> relational_statement GTEQ add_statement .)
    AND             reduce using rule 28 (relational_statement -> relational_statement GTEQ add_statement .)
    OR              reduce using rule 28 (relational_statement -> relational_statement GTEQ add_statement .)
    $end            reduce using rule 28 (relational_statement -> relational_statement GTEQ add_statement .)
    COLON           reduce using rule 28 (relational_statement -> relational_statement GTEQ add_statement .)
    COMMA           reduce using rule 28 (relational_statement -> relational_statement GTEQ add_statement .)
    RPAREN          reduce using rule 28 (relational_statement -> relational_statement GTEQ add_statement .)
    ENDWHILE        reduce using rule 28 (relational_statement -> relational_statement GTEQ add_statement .)
    ELSE            reduce using rule 28 (relational_statement -> relational_statement GTEQ add_statement .)
    ENDIF           reduce using rule 28 (relational_statement -> relational_statement GTEQ add_statement .)
    ENDFOR          reduce using rule 28 (relational_statement -> relational_statement GTEQ add_statement .)
    PLUS            shift and go to state 52
    MINUS           shift and go to state 53


state 78

    (30) add_statement -> add_statement PLUS multiply_statement .
    (33) multiply_statement -> multiply_statement . TIMES unary_statement
    (34) multiply_statement -> multiply_statement . DIVIDE unary_statement
    (35) multiply_statement -> multiply_statement . MOD unary_statement

    PLUS            reduce using rule 30 (add_statement -> add_statement PLUS multiply_statement .)
    MINUS           reduce using rule 30 (add_statement -> add_statement PLUS multiply_statement .)
    LT              reduce using rule 30 (add_statement -> add_statement PLUS multiply_statement .)
    GT              reduce using rule 30 (add_statement -> add_statement PLUS multiply_statement .)
    LTEQ            reduce using rule 30 (add_statement -> add_statement PLUS multiply_statement .)
    GTEQ            reduce using rule 30 (add_statement -> add_statement PLUS multiply_statement .)
    EQ              reduce using rule 30 (add_statement -> add_statement PLUS multiply_statement .)
    NEQ             reduce using rule 30 (add_statement -> add_statement PLUS multiply_statement .)
    AND             reduce using rule 30 (add_statement -> add_statement PLUS multiply_statement .)
    OR              reduce using rule 30 (add_statement -> add_statement PLUS multiply_statement .)
    $end            reduce using rule 30 (add_statement -> add_statement PLUS multiply_statement .)
    COLON           reduce using rule 30 (add_statement -> add_statement PLUS multiply_statement .)
    COMMA           reduce using rule 30 (add_statement -> add_statement PLUS multiply_statement .)
    RPAREN          reduce using rule 30 (add_statement -> add_statement PLUS multiply_statement .)
    ENDWHILE        reduce using rule 30 (add_statement -> add_statement PLUS multiply_statement .)
    ELSE            reduce using rule 30 (add_statement -> add_statement PLUS multiply_statement .)
    ENDIF           reduce using rule 30 (add_statement -> add_statement PLUS multiply_statement .)
    ENDFOR          reduce using rule 30 (add_statement -> add_statement PLUS multiply_statement .)
    TIMES           shift and go to state 54
    DIVIDE          shift and go to state 55
    MOD             shift and go to state 56


state 79

    (31) add_statement -> add_statement MINUS multiply_statement .
    (33) multiply_statement -> multiply_statement . TIMES unary_statement
    (34) multiply_statement -> multiply_statement . DIVIDE unary_statement
    (35) multiply_statement -> multiply_statement . MOD unary_statement

    PLUS            reduce using rule 31 (add_statement -> add_statement MINUS multiply_statement .)
    MINUS           reduce using rule 31 (add_statement -> add_statement MINUS multiply_statement .)
    LT              reduce using rule 31 (add_statement -> add_statement MINUS multiply_statement .)
    GT              reduce using rule 31 (add_statement -> add_statement MINUS multiply_statement .)
    LTEQ            reduce using rule 31 (add_statement -> add_statement MINUS multiply_statement .)
    GTEQ            reduce using rule 31 (add_statement -> add_statement MINUS multiply_statement .)
    EQ              reduce using rule 31 (add_statement -> add_statement MINUS multiply_statement .)
    NEQ             reduce using rule 31 (add_statement -> add_statement MINUS multiply_statement .)
    AND             reduce using rule 31 (add_statement -> add_statement MINUS multiply_statement .)
    OR              reduce using rule 31 (add_statement -> add_statement MINUS multiply_statement .)
    $end            reduce using rule 31 (add_statement -> add_statement MINUS multiply_statement .)
    COLON           reduce using rule 31 (add_statement -> add_statement MINUS multiply_statement .)
    COMMA           reduce using rule 31 (add_statement -> add_statement MINUS multiply_statement .)
    RPAREN          reduce using rule 31 (add_statement -> add_statement MINUS multiply_statement .)
    ENDWHILE        reduce using rule 31 (add_statement -> add_statement MINUS multiply_statement .)
    ELSE            reduce using rule 31 (add_statement -> add_statement MINUS multiply_statement .)
    ENDIF           reduce using rule 31 (add_statement -> add_statement MINUS multiply_statement .)
    ENDFOR          reduce using rule 31 (add_statement -> add_statement MINUS multiply_statement .)
    TIMES           shift and go to state 54
    DIVIDE          shift and go to state 55
    MOD             shift and go to state 56


state 80

    (33) multiply_statement -> multiply_statement TIMES unary_statement .

    TIMES           reduce using rule 33 (multiply_statement -> multiply_statement TIMES unary_statement .)
    DIVIDE          reduce using rule 33 (multiply_statement -> multiply_statement TIMES unary_statement .)
    MOD             reduce using rule 33 (multiply_statement -> multiply_statement TIMES unary_statement .)
    PLUS            reduce using rule 33 (multiply_statement -> multiply_statement TIMES unary_statement .)
    MINUS           reduce using rule 33 (multiply_statement -> multiply_statement TIMES unary_statement .)
    LT              reduce using rule 33 (multiply_statement -> multiply_statement TIMES unary_statement .)
    GT              reduce using rule 33 (multiply_statement -> multiply_statement TIMES unary_statement .)
    LTEQ            reduce using rule 33 (multiply_statement -> multiply_statement TIMES unary_statement .)
    GTEQ            reduce using rule 33 (multiply_statement -> multiply_statement TIMES unary_statement .)
    EQ              reduce using rule 33 (multiply_statement -> multiply_statement TIMES unary_statement .)
    NEQ             reduce using rule 33 (multiply_statement -> multiply_statement TIMES unary_statement .)
    AND             reduce using rule 33 (multiply_statement -> multiply_statement TIMES unary_statement .)
    OR              reduce using rule 33 (multiply_statement -> multiply_statement TIMES unary_statement .)
    $end            reduce using rule 33 (multiply_statement -> multiply_statement TIMES unary_statement .)
    COLON           reduce using rule 33 (multiply_statement -> multiply_statement TIMES unary_statement .)
    COMMA           reduce using rule 33 (multiply_statement -> multiply_statement TIMES unary_statement .)
    RPAREN          reduce using rule 33 (multiply_statement -> multiply_statement TIMES unary_statement .)
    ENDWHILE        reduce using rule 33 (multiply_statement -> multiply_statement TIMES unary_statement .)
    ELSE            reduce using rule 33 (multiply_statement -> multiply_statement TIMES unary_statement .)
    ENDIF           reduce using rule 33 (multiply_statement -> multiply_statement TIMES unary_statement .)
    ENDFOR          reduce using rule 33 (multiply_statement -> multiply_statement TIMES unary_statement .)


state 81

    (34) multiply_statement -> multiply_statement DIVIDE unary_statement .

    TIMES           reduce using rule 34 (multiply_statement -> multiply_statement DIVIDE unary_statement .)
    DIVIDE          reduce using rule 34 (multiply_statement -> multiply_statement DIVIDE unary_statement .)
    MOD             reduce using rule 34 (multiply_statement -> multiply_statement DIVIDE unary_statement .)
    PLUS            reduce using rule 34 (multiply_statement -> multiply_statement DIVIDE unary_statement .)
    MINUS           reduce using rule 34 (multiply_statement -> multiply_statement DIVIDE unary_statement .)
    LT              reduce using rule 34 (multiply_statement -> multiply_statement DIVIDE unary_statement .)
    GT              reduce using rule 34 (multiply_statement -> multiply_statement DIVIDE unary_statement .)
    LTEQ            reduce using rule 34 (multiply_statement -> multiply_statement DIVIDE unary_statement .)
    GTEQ            reduce using rule 34 (multiply_statement -> multiply_statement DIVIDE unary_statement .)
    EQ              reduce using rule 34 (multiply_statement -> multiply_statement DIVIDE unary_statement .)
    NEQ             reduce using rule 34 (multiply_statement -> multiply_statement DIVIDE unary_statement .)
    AND             reduce using rule 34 (multiply_statement -> multiply_statement DIVIDE unary_statement .)
    OR              reduce using rule 34 (multiply_statement -> multiply_statement DIVIDE unary_statement .)
    $end            reduce using rule 34 (multiply_statement -> multiply_statement DIVIDE unary_statement .)
    COLON           reduce using rule 34 (multiply_statement -> multiply_statement DIVIDE unary_statement .)
    COMMA           reduce using rule 34 (multiply_statement -> multiply_statement DIVIDE unary_statement .)
    RPAREN          reduce using rule 34 (multiply_statement -> multiply_statement DIVIDE unary_statement .)
    ENDWHILE        reduce using rule 34 (multiply_statement -> multiply_statement DIVIDE unary_statement .)
    ELSE            reduce using rule 34 (multiply_statement -> multiply_statement DIVIDE unary_statement .)
    ENDIF           reduce using rule 34 (multiply_statement -> multiply_statement DIVIDE unary_statement .)
    ENDFOR          reduce using rule 34 (multiply_statement -> multiply_statement DIVIDE unary_statement .)


state 82

    (35) multiply_statement -> multiply_statement MOD unary_statement .

    TIMES           reduce using rule 35 (multiply_statement -> multiply_statement MOD unary_statement .)
    DIVIDE          reduce using rule 35 (multiply_statement -> multiply_statement MOD unary_statement .)
    MOD             reduce using rule 35 (multiply_statement -> multiply_statement MOD unary_statement .)
    PLUS            reduce using rule 35 (multiply_statement -> multiply_statement MOD unary_statement .)
    MINUS           reduce using rule 35 (multiply_statement -> multiply_statement MOD unary_statement .)
    LT              reduce using rule 35 (multiply_statement -> multiply_statement MOD unary_statement .)
    GT              reduce using rule 35 (multiply_statement -> multiply_statement MOD unary_statement .)
    LTEQ            reduce using rule 35 (multiply_statement -> multiply_statement MOD unary_statement .)
    GTEQ            reduce using rule 35 (multiply_statement -> multiply_statement MOD unary_statement .)
    EQ              reduce using rule 35 (multiply_statement -> multiply_statement MOD unary_statement .)
    NEQ             reduce using rule 35 (multiply_statement -> multiply_statement MOD unary_statement .)
    AND             reduce using rule 35 (multiply_statement -> multiply_statement MOD unary_statement .)
    OR              reduce using rule 35 (multiply_statement -> multiply_statement MOD unary_statement .)
    $end            reduce using rule 35 (multiply_statement -> multiply_statement MOD unary_statement .)
    COLON           reduce using rule 35 (multiply_statement -> multiply_statement MOD unary_statement .)
    COMMA           reduce using rule 35 (multiply_statement -> multiply_statement MOD unary_statement .)
    RPAREN          reduce using rule 35 (multiply_statement -> multiply_statement MOD unary_statement .)
    ENDWHILE        reduce using rule 35 (multiply_statement -> multiply_statement MOD unary_statement .)
    ELSE            reduce using rule 35 (multiply_statement -> multiply_statement MOD unary_statement .)
    ENDIF           reduce using rule 35 (multiply_statement -> multiply_statement MOD unary_statement .)
    ENDFOR          reduce using rule 35 (multiply_statement -> multiply_statement MOD unary_statement .)


state 83

    (50) atom -> LBRACKET elements RBRACKET .

    POWER           reduce using rule 50 (atom -> LBRACKET elements RBRACKET .)
    TIMES           reduce using rule 50 (atom -> LBRACKET elements RBRACKET .)
    DIVIDE          reduce using rule 50 (atom -> LBRACKET elements RBRACKET .)
    MOD             reduce using rule 50 (atom -> LBRACKET elements RBRACKET .)
    PLUS            reduce using rule 50 (atom -> LBRACKET elements RBRACKET .)
    MINUS           reduce using rule 50 (atom -> LBRACKET elements RBRACKET .)
    LT              reduce using rule 50 (atom -> LBRACKET elements RBRACKET .)
    GT              reduce using rule 50 (atom -> LBRACKET elements RBRACKET .)
    LTEQ            reduce using rule 50 (atom -> LBRACKET elements RBRACKET .)
    GTEQ            reduce using rule 50 (atom -> LBRACKET elements RBRACKET .)
    EQ              reduce using rule 50 (atom -> LBRACKET elements RBRACKET .)
    NEQ             reduce using rule 50 (atom -> LBRACKET elements RBRACKET .)
    AND             reduce using rule 50 (atom -> LBRACKET elements RBRACKET .)
    OR              reduce using rule 50 (atom -> LBRACKET elements RBRACKET .)
    $end            reduce using rule 50 (atom -> LBRACKET elements RBRACKET .)
    COLON           reduce using rule 50 (atom -> LBRACKET elements RBRACKET .)
    COMMA           reduce using rule 50 (atom -> LBRACKET elements RBRACKET .)
    RPAREN          reduce using rule 50 (atom -> LBRACKET elements RBRACKET .)
    ENDWHILE        reduce using rule 50 (atom -> LBRACKET elements RBRACKET .)
    ELSE            reduce using rule 50 (atom -> LBRACKET elements RBRACKET .)
    ENDIF           reduce using rule 50 (atom -> LBRACKET elements RBRACKET .)
    ENDFOR          reduce using rule 50 (atom -> LBRACKET elements RBRACKET .)


state 84

    (52) elements -> elements INTEGER .

    RBRACKET        reduce using rule 52 (elements -> elements INTEGER .)
    INTEGER         reduce using rule 52 (elements -> elements INTEGER .)
    FLOAT           reduce using rule 52 (elements -> elements INTEGER .)


state 85

    (53) elements -> elements FLOAT .

    RBRACKET        reduce using rule 53 (elements -> elements FLOAT .)
    INTEGER         reduce using rule 53 (elements -> elements FLOAT .)
    FLOAT           reduce using rule 53 (elements -> elements FLOAT .)


state 86

    (7) iterative_statement -> WHILE expression COLON start . ENDWHILE

    ENDWHILE        shift and go to state 92


state 87

    (8) iterative_statement -> FOR expression COMMA expression . COMMA expression COLON start ENDFOR

    COMMA           shift and go to state 93


state 88

    (9) conditional_statement -> IF expression seen_exp COLON . start seen_start ELSE seen_else start seen_start ENDIF
    (10) conditional_statement -> IF expression seen_exp COLON . start seen_start ENDIF
    (1) start -> . code_entity
    (2) code_entity -> . iterative_statement
    (3) code_entity -> . conditional_statement
    (4) code_entity -> . expression
    (5) code_entity -> . input_function
    (6) code_entity -> . output_function
    (7) iterative_statement -> . WHILE expression COLON start ENDWHILE
    (8) iterative_statement -> . FOR expression COMMA expression COMMA expression COLON start ENDFOR
    (9) conditional_statement -> . IF expression seen_exp COLON start seen_start ELSE seen_else start seen_start ENDIF
    (10) conditional_statement -> . IF expression seen_exp COLON start seen_start ENDIF
    (14) expression -> . assignment_statement
    (55) input_function -> . INPUT LPAREN IDENTIFIER RPAREN
    (56) output_function -> . PRINT LPAREN term RPAREN
    (15) assignment_statement -> . or_statement
    (16) assignment_statement -> . IDENTIFIER EQUALS or_statement
    (17) or_statement -> . and_statement
    (18) or_statement -> . or_statement OR and_statement
    (19) and_statement -> . equality_statement
    (20) and_statement -> . and_statement AND equality_statement
    (21) equality_statement -> . relational_statement
    (22) equality_statement -> . equality_statement EQ relational_statement
    (23) equality_statement -> . equality_statement NEQ relational_statement
    (24) relational_statement -> . add_statement
    (25) relational_statement -> . relational_statement LT add_statement
    (26) relational_statement -> . relational_statement GT add_statement
    (27) relational_statement -> . relational_statement LTEQ add_statement
    (28) relational_statement -> . relational_statement GTEQ add_statement
    (29) add_statement -> . multiply_statement
    (30) add_statement -> . add_statement PLUS multiply_statement
    (31) add_statement -> . add_statement MINUS multiply_statement
    (32) multiply_statement -> . unary_statement
    (33) multiply_statement -> . multiply_statement TIMES unary_statement
    (34) multiply_statement -> . multiply_statement DIVIDE unary_statement
    (35) multiply_statement -> . multiply_statement MOD unary_statement
    (36) unary_statement -> . exponent
    (37) unary_statement -> . MINUS unary_statement
    (38) unary_statement -> . NOT unary_statement
    (39) exponent -> . term
    (40) exponent -> . term POWER unary_statement
    (41) term -> . IDENTIFIER
    (42) term -> . atom
    (43) term -> . LPAREN expression RPAREN
    (44) atom -> . INTEGER
    (45) atom -> . FLOAT
    (46) atom -> . CHARACTER
    (47) atom -> . STRING
    (48) atom -> . TRUE
    (49) atom -> . FALSE
    (50) atom -> . LBRACKET elements RBRACKET
    (51) atom -> . IDENTIFIER LBRACKET INTEGER RBRACKET

    WHILE           shift and go to state 8
    FOR             shift and go to state 9
    IF              shift and go to state 10
    INPUT           shift and go to state 12
    PRINT           shift and go to state 15
    IDENTIFIER      shift and go to state 14
    MINUS           shift and go to state 23
    NOT             shift and go to state 26
    LPAREN          shift and go to state 13
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 29
    CHARACTER       shift and go to state 30
    STRING          shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    LBRACKET        shift and go to state 34

    expression                     shift and go to state 5
    start                          shift and go to state 94
    code_entity                    shift and go to state 2
    iterative_statement            shift and go to state 3
    conditional_statement          shift and go to state 4
    input_function                 shift and go to state 6
    output_function                shift and go to state 7
    assignment_statement           shift and go to state 11
    term                           shift and go to state 16
    or_statement                   shift and go to state 17
    and_statement                  shift and go to state 18
    equality_statement             shift and go to state 19
    relational_statement           shift and go to state 20
    add_statement                  shift and go to state 21
    multiply_statement             shift and go to state 22
    unary_statement                shift and go to state 24
    exponent                       shift and go to state 25
    atom                           shift and go to state 27

state 89

    (55) input_function -> INPUT LPAREN IDENTIFIER RPAREN .

    $end            reduce using rule 55 (input_function -> INPUT LPAREN IDENTIFIER RPAREN .)
    ENDWHILE        reduce using rule 55 (input_function -> INPUT LPAREN IDENTIFIER RPAREN .)
    ELSE            reduce using rule 55 (input_function -> INPUT LPAREN IDENTIFIER RPAREN .)
    ENDIF           reduce using rule 55 (input_function -> INPUT LPAREN IDENTIFIER RPAREN .)
    ENDFOR          reduce using rule 55 (input_function -> INPUT LPAREN IDENTIFIER RPAREN .)


state 90

    (51) atom -> IDENTIFIER LBRACKET INTEGER RBRACKET .

    POWER           reduce using rule 51 (atom -> IDENTIFIER LBRACKET INTEGER RBRACKET .)
    TIMES           reduce using rule 51 (atom -> IDENTIFIER LBRACKET INTEGER RBRACKET .)
    DIVIDE          reduce using rule 51 (atom -> IDENTIFIER LBRACKET INTEGER RBRACKET .)
    MOD             reduce using rule 51 (atom -> IDENTIFIER LBRACKET INTEGER RBRACKET .)
    PLUS            reduce using rule 51 (atom -> IDENTIFIER LBRACKET INTEGER RBRACKET .)
    MINUS           reduce using rule 51 (atom -> IDENTIFIER LBRACKET INTEGER RBRACKET .)
    LT              reduce using rule 51 (atom -> IDENTIFIER LBRACKET INTEGER RBRACKET .)
    GT              reduce using rule 51 (atom -> IDENTIFIER LBRACKET INTEGER RBRACKET .)
    LTEQ            reduce using rule 51 (atom -> IDENTIFIER LBRACKET INTEGER RBRACKET .)
    GTEQ            reduce using rule 51 (atom -> IDENTIFIER LBRACKET INTEGER RBRACKET .)
    EQ              reduce using rule 51 (atom -> IDENTIFIER LBRACKET INTEGER RBRACKET .)
    NEQ             reduce using rule 51 (atom -> IDENTIFIER LBRACKET INTEGER RBRACKET .)
    AND             reduce using rule 51 (atom -> IDENTIFIER LBRACKET INTEGER RBRACKET .)
    OR              reduce using rule 51 (atom -> IDENTIFIER LBRACKET INTEGER RBRACKET .)
    $end            reduce using rule 51 (atom -> IDENTIFIER LBRACKET INTEGER RBRACKET .)
    COLON           reduce using rule 51 (atom -> IDENTIFIER LBRACKET INTEGER RBRACKET .)
    COMMA           reduce using rule 51 (atom -> IDENTIFIER LBRACKET INTEGER RBRACKET .)
    RPAREN          reduce using rule 51 (atom -> IDENTIFIER LBRACKET INTEGER RBRACKET .)
    ENDWHILE        reduce using rule 51 (atom -> IDENTIFIER LBRACKET INTEGER RBRACKET .)
    ELSE            reduce using rule 51 (atom -> IDENTIFIER LBRACKET INTEGER RBRACKET .)
    ENDIF           reduce using rule 51 (atom -> IDENTIFIER LBRACKET INTEGER RBRACKET .)
    ENDFOR          reduce using rule 51 (atom -> IDENTIFIER LBRACKET INTEGER RBRACKET .)


state 91

    (56) output_function -> PRINT LPAREN term RPAREN .

    $end            reduce using rule 56 (output_function -> PRINT LPAREN term RPAREN .)
    ENDWHILE        reduce using rule 56 (output_function -> PRINT LPAREN term RPAREN .)
    ELSE            reduce using rule 56 (output_function -> PRINT LPAREN term RPAREN .)
    ENDIF           reduce using rule 56 (output_function -> PRINT LPAREN term RPAREN .)
    ENDFOR          reduce using rule 56 (output_function -> PRINT LPAREN term RPAREN .)


state 92

    (7) iterative_statement -> WHILE expression COLON start ENDWHILE .

    $end            reduce using rule 7 (iterative_statement -> WHILE expression COLON start ENDWHILE .)
    ENDWHILE        reduce using rule 7 (iterative_statement -> WHILE expression COLON start ENDWHILE .)
    ELSE            reduce using rule 7 (iterative_statement -> WHILE expression COLON start ENDWHILE .)
    ENDIF           reduce using rule 7 (iterative_statement -> WHILE expression COLON start ENDWHILE .)
    ENDFOR          reduce using rule 7 (iterative_statement -> WHILE expression COLON start ENDWHILE .)


state 93

    (8) iterative_statement -> FOR expression COMMA expression COMMA . expression COLON start ENDFOR
    (14) expression -> . assignment_statement
    (15) assignment_statement -> . or_statement
    (16) assignment_statement -> . IDENTIFIER EQUALS or_statement
    (17) or_statement -> . and_statement
    (18) or_statement -> . or_statement OR and_statement
    (19) and_statement -> . equality_statement
    (20) and_statement -> . and_statement AND equality_statement
    (21) equality_statement -> . relational_statement
    (22) equality_statement -> . equality_statement EQ relational_statement
    (23) equality_statement -> . equality_statement NEQ relational_statement
    (24) relational_statement -> . add_statement
    (25) relational_statement -> . relational_statement LT add_statement
    (26) relational_statement -> . relational_statement GT add_statement
    (27) relational_statement -> . relational_statement LTEQ add_statement
    (28) relational_statement -> . relational_statement GTEQ add_statement
    (29) add_statement -> . multiply_statement
    (30) add_statement -> . add_statement PLUS multiply_statement
    (31) add_statement -> . add_statement MINUS multiply_statement
    (32) multiply_statement -> . unary_statement
    (33) multiply_statement -> . multiply_statement TIMES unary_statement
    (34) multiply_statement -> . multiply_statement DIVIDE unary_statement
    (35) multiply_statement -> . multiply_statement MOD unary_statement
    (36) unary_statement -> . exponent
    (37) unary_statement -> . MINUS unary_statement
    (38) unary_statement -> . NOT unary_statement
    (39) exponent -> . term
    (40) exponent -> . term POWER unary_statement
    (41) term -> . IDENTIFIER
    (42) term -> . atom
    (43) term -> . LPAREN expression RPAREN
    (44) atom -> . INTEGER
    (45) atom -> . FLOAT
    (46) atom -> . CHARACTER
    (47) atom -> . STRING
    (48) atom -> . TRUE
    (49) atom -> . FALSE
    (50) atom -> . LBRACKET elements RBRACKET
    (51) atom -> . IDENTIFIER LBRACKET INTEGER RBRACKET

    IDENTIFIER      shift and go to state 14
    MINUS           shift and go to state 23
    NOT             shift and go to state 26
    LPAREN          shift and go to state 13
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 29
    CHARACTER       shift and go to state 30
    STRING          shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    LBRACKET        shift and go to state 34

    expression                     shift and go to state 95
    assignment_statement           shift and go to state 11
    or_statement                   shift and go to state 17
    and_statement                  shift and go to state 18
    equality_statement             shift and go to state 19
    relational_statement           shift and go to state 20
    add_statement                  shift and go to state 21
    multiply_statement             shift and go to state 22
    unary_statement                shift and go to state 24
    exponent                       shift and go to state 25
    term                           shift and go to state 16
    atom                           shift and go to state 27

state 94

    (9) conditional_statement -> IF expression seen_exp COLON start . seen_start ELSE seen_else start seen_start ENDIF
    (10) conditional_statement -> IF expression seen_exp COLON start . seen_start ENDIF
    (13) seen_start -> .

    ELSE            reduce using rule 13 (seen_start -> .)
    ENDIF           reduce using rule 13 (seen_start -> .)

    seen_start                     shift and go to state 96

state 95

    (8) iterative_statement -> FOR expression COMMA expression COMMA expression . COLON start ENDFOR

    COLON           shift and go to state 97


state 96

    (9) conditional_statement -> IF expression seen_exp COLON start seen_start . ELSE seen_else start seen_start ENDIF
    (10) conditional_statement -> IF expression seen_exp COLON start seen_start . ENDIF

    ELSE            shift and go to state 98
    ENDIF           shift and go to state 99


state 97

    (8) iterative_statement -> FOR expression COMMA expression COMMA expression COLON . start ENDFOR
    (1) start -> . code_entity
    (2) code_entity -> . iterative_statement
    (3) code_entity -> . conditional_statement
    (4) code_entity -> . expression
    (5) code_entity -> . input_function
    (6) code_entity -> . output_function
    (7) iterative_statement -> . WHILE expression COLON start ENDWHILE
    (8) iterative_statement -> . FOR expression COMMA expression COMMA expression COLON start ENDFOR
    (9) conditional_statement -> . IF expression seen_exp COLON start seen_start ELSE seen_else start seen_start ENDIF
    (10) conditional_statement -> . IF expression seen_exp COLON start seen_start ENDIF
    (14) expression -> . assignment_statement
    (55) input_function -> . INPUT LPAREN IDENTIFIER RPAREN
    (56) output_function -> . PRINT LPAREN term RPAREN
    (15) assignment_statement -> . or_statement
    (16) assignment_statement -> . IDENTIFIER EQUALS or_statement
    (17) or_statement -> . and_statement
    (18) or_statement -> . or_statement OR and_statement
    (19) and_statement -> . equality_statement
    (20) and_statement -> . and_statement AND equality_statement
    (21) equality_statement -> . relational_statement
    (22) equality_statement -> . equality_statement EQ relational_statement
    (23) equality_statement -> . equality_statement NEQ relational_statement
    (24) relational_statement -> . add_statement
    (25) relational_statement -> . relational_statement LT add_statement
    (26) relational_statement -> . relational_statement GT add_statement
    (27) relational_statement -> . relational_statement LTEQ add_statement
    (28) relational_statement -> . relational_statement GTEQ add_statement
    (29) add_statement -> . multiply_statement
    (30) add_statement -> . add_statement PLUS multiply_statement
    (31) add_statement -> . add_statement MINUS multiply_statement
    (32) multiply_statement -> . unary_statement
    (33) multiply_statement -> . multiply_statement TIMES unary_statement
    (34) multiply_statement -> . multiply_statement DIVIDE unary_statement
    (35) multiply_statement -> . multiply_statement MOD unary_statement
    (36) unary_statement -> . exponent
    (37) unary_statement -> . MINUS unary_statement
    (38) unary_statement -> . NOT unary_statement
    (39) exponent -> . term
    (40) exponent -> . term POWER unary_statement
    (41) term -> . IDENTIFIER
    (42) term -> . atom
    (43) term -> . LPAREN expression RPAREN
    (44) atom -> . INTEGER
    (45) atom -> . FLOAT
    (46) atom -> . CHARACTER
    (47) atom -> . STRING
    (48) atom -> . TRUE
    (49) atom -> . FALSE
    (50) atom -> . LBRACKET elements RBRACKET
    (51) atom -> . IDENTIFIER LBRACKET INTEGER RBRACKET

    WHILE           shift and go to state 8
    FOR             shift and go to state 9
    IF              shift and go to state 10
    INPUT           shift and go to state 12
    PRINT           shift and go to state 15
    IDENTIFIER      shift and go to state 14
    MINUS           shift and go to state 23
    NOT             shift and go to state 26
    LPAREN          shift and go to state 13
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 29
    CHARACTER       shift and go to state 30
    STRING          shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    LBRACKET        shift and go to state 34

    expression                     shift and go to state 5
    start                          shift and go to state 100
    code_entity                    shift and go to state 2
    iterative_statement            shift and go to state 3
    conditional_statement          shift and go to state 4
    input_function                 shift and go to state 6
    output_function                shift and go to state 7
    assignment_statement           shift and go to state 11
    term                           shift and go to state 16
    or_statement                   shift and go to state 17
    and_statement                  shift and go to state 18
    equality_statement             shift and go to state 19
    relational_statement           shift and go to state 20
    add_statement                  shift and go to state 21
    multiply_statement             shift and go to state 22
    unary_statement                shift and go to state 24
    exponent                       shift and go to state 25
    atom                           shift and go to state 27

state 98

    (9) conditional_statement -> IF expression seen_exp COLON start seen_start ELSE . seen_else start seen_start ENDIF
    (12) seen_else -> .

    WHILE           reduce using rule 12 (seen_else -> .)
    FOR             reduce using rule 12 (seen_else -> .)
    IF              reduce using rule 12 (seen_else -> .)
    INPUT           reduce using rule 12 (seen_else -> .)
    PRINT           reduce using rule 12 (seen_else -> .)
    IDENTIFIER      reduce using rule 12 (seen_else -> .)
    MINUS           reduce using rule 12 (seen_else -> .)
    NOT             reduce using rule 12 (seen_else -> .)
    LPAREN          reduce using rule 12 (seen_else -> .)
    INTEGER         reduce using rule 12 (seen_else -> .)
    FLOAT           reduce using rule 12 (seen_else -> .)
    CHARACTER       reduce using rule 12 (seen_else -> .)
    STRING          reduce using rule 12 (seen_else -> .)
    TRUE            reduce using rule 12 (seen_else -> .)
    FALSE           reduce using rule 12 (seen_else -> .)
    LBRACKET        reduce using rule 12 (seen_else -> .)

    seen_else                      shift and go to state 101

state 99

    (10) conditional_statement -> IF expression seen_exp COLON start seen_start ENDIF .

    $end            reduce using rule 10 (conditional_statement -> IF expression seen_exp COLON start seen_start ENDIF .)
    ENDWHILE        reduce using rule 10 (conditional_statement -> IF expression seen_exp COLON start seen_start ENDIF .)
    ELSE            reduce using rule 10 (conditional_statement -> IF expression seen_exp COLON start seen_start ENDIF .)
    ENDIF           reduce using rule 10 (conditional_statement -> IF expression seen_exp COLON start seen_start ENDIF .)
    ENDFOR          reduce using rule 10 (conditional_statement -> IF expression seen_exp COLON start seen_start ENDIF .)


state 100

    (8) iterative_statement -> FOR expression COMMA expression COMMA expression COLON start . ENDFOR

    ENDFOR          shift and go to state 102


state 101

    (9) conditional_statement -> IF expression seen_exp COLON start seen_start ELSE seen_else . start seen_start ENDIF
    (1) start -> . code_entity
    (2) code_entity -> . iterative_statement
    (3) code_entity -> . conditional_statement
    (4) code_entity -> . expression
    (5) code_entity -> . input_function
    (6) code_entity -> . output_function
    (7) iterative_statement -> . WHILE expression COLON start ENDWHILE
    (8) iterative_statement -> . FOR expression COMMA expression COMMA expression COLON start ENDFOR
    (9) conditional_statement -> . IF expression seen_exp COLON start seen_start ELSE seen_else start seen_start ENDIF
    (10) conditional_statement -> . IF expression seen_exp COLON start seen_start ENDIF
    (14) expression -> . assignment_statement
    (55) input_function -> . INPUT LPAREN IDENTIFIER RPAREN
    (56) output_function -> . PRINT LPAREN term RPAREN
    (15) assignment_statement -> . or_statement
    (16) assignment_statement -> . IDENTIFIER EQUALS or_statement
    (17) or_statement -> . and_statement
    (18) or_statement -> . or_statement OR and_statement
    (19) and_statement -> . equality_statement
    (20) and_statement -> . and_statement AND equality_statement
    (21) equality_statement -> . relational_statement
    (22) equality_statement -> . equality_statement EQ relational_statement
    (23) equality_statement -> . equality_statement NEQ relational_statement
    (24) relational_statement -> . add_statement
    (25) relational_statement -> . relational_statement LT add_statement
    (26) relational_statement -> . relational_statement GT add_statement
    (27) relational_statement -> . relational_statement LTEQ add_statement
    (28) relational_statement -> . relational_statement GTEQ add_statement
    (29) add_statement -> . multiply_statement
    (30) add_statement -> . add_statement PLUS multiply_statement
    (31) add_statement -> . add_statement MINUS multiply_statement
    (32) multiply_statement -> . unary_statement
    (33) multiply_statement -> . multiply_statement TIMES unary_statement
    (34) multiply_statement -> . multiply_statement DIVIDE unary_statement
    (35) multiply_statement -> . multiply_statement MOD unary_statement
    (36) unary_statement -> . exponent
    (37) unary_statement -> . MINUS unary_statement
    (38) unary_statement -> . NOT unary_statement
    (39) exponent -> . term
    (40) exponent -> . term POWER unary_statement
    (41) term -> . IDENTIFIER
    (42) term -> . atom
    (43) term -> . LPAREN expression RPAREN
    (44) atom -> . INTEGER
    (45) atom -> . FLOAT
    (46) atom -> . CHARACTER
    (47) atom -> . STRING
    (48) atom -> . TRUE
    (49) atom -> . FALSE
    (50) atom -> . LBRACKET elements RBRACKET
    (51) atom -> . IDENTIFIER LBRACKET INTEGER RBRACKET

    WHILE           shift and go to state 8
    FOR             shift and go to state 9
    IF              shift and go to state 10
    INPUT           shift and go to state 12
    PRINT           shift and go to state 15
    IDENTIFIER      shift and go to state 14
    MINUS           shift and go to state 23
    NOT             shift and go to state 26
    LPAREN          shift and go to state 13
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 29
    CHARACTER       shift and go to state 30
    STRING          shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    LBRACKET        shift and go to state 34

    expression                     shift and go to state 5
    start                          shift and go to state 103
    code_entity                    shift and go to state 2
    iterative_statement            shift and go to state 3
    conditional_statement          shift and go to state 4
    input_function                 shift and go to state 6
    output_function                shift and go to state 7
    assignment_statement           shift and go to state 11
    term                           shift and go to state 16
    or_statement                   shift and go to state 17
    and_statement                  shift and go to state 18
    equality_statement             shift and go to state 19
    relational_statement           shift and go to state 20
    add_statement                  shift and go to state 21
    multiply_statement             shift and go to state 22
    unary_statement                shift and go to state 24
    exponent                       shift and go to state 25
    atom                           shift and go to state 27

state 102

    (8) iterative_statement -> FOR expression COMMA expression COMMA expression COLON start ENDFOR .

    $end            reduce using rule 8 (iterative_statement -> FOR expression COMMA expression COMMA expression COLON start ENDFOR .)
    ENDWHILE        reduce using rule 8 (iterative_statement -> FOR expression COMMA expression COMMA expression COLON start ENDFOR .)
    ELSE            reduce using rule 8 (iterative_statement -> FOR expression COMMA expression COMMA expression COLON start ENDFOR .)
    ENDIF           reduce using rule 8 (iterative_statement -> FOR expression COMMA expression COMMA expression COLON start ENDFOR .)
    ENDFOR          reduce using rule 8 (iterative_statement -> FOR expression COMMA expression COMMA expression COLON start ENDFOR .)


state 103

    (9) conditional_statement -> IF expression seen_exp COLON start seen_start ELSE seen_else start . seen_start ENDIF
    (13) seen_start -> .

    ENDIF           reduce using rule 13 (seen_start -> .)

    seen_start                     shift and go to state 104

state 104

    (9) conditional_statement -> IF expression seen_exp COLON start seen_start ELSE seen_else start seen_start . ENDIF

    ENDIF           shift and go to state 105


state 105

    (9) conditional_statement -> IF expression seen_exp COLON start seen_start ELSE seen_else start seen_start ENDIF .

    $end            reduce using rule 9 (conditional_statement -> IF expression seen_exp COLON start seen_start ELSE seen_else start seen_start ENDIF .)
    ENDWHILE        reduce using rule 9 (conditional_statement -> IF expression seen_exp COLON start seen_start ELSE seen_else start seen_start ENDIF .)
    ELSE            reduce using rule 9 (conditional_statement -> IF expression seen_exp COLON start seen_start ELSE seen_else start seen_start ENDIF .)
    ENDIF           reduce using rule 9 (conditional_statement -> IF expression seen_exp COLON start seen_start ELSE seen_else start seen_start ENDIF .)
    ENDFOR          reduce using rule 9 (conditional_statement -> IF expression seen_exp COLON start seen_start ELSE seen_else start seen_start ENDIF .)

