Created by PLY version 3.10 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> start
Rule 1     start -> code_entity
Rule 2     code_entity -> iterative_statement
Rule 3     code_entity -> conditional_statement
Rule 4     code_entity -> expression
Rule 5     code_entity -> input_function
Rule 6     code_entity -> output_function
Rule 7     iterative_statement -> WHILE expression COLON start ENDWHILE
Rule 8     iterative_statement -> FOR expression COMMA expression COMMA expression COLON start ENDFOR
Rule 9     conditional_statement -> IF expression then_statement ENDIF
Rule 10    then_statement -> COLON start
Rule 11    else_statement -> ELSE start
Rule 12    expression -> assignment_statement
Rule 13    assignment_statement -> or_statement
Rule 14    assignment_statement -> IDENTIFIER EQUALS or_statement
Rule 15    or_statement -> and_statement
Rule 16    or_statement -> or_statement OR and_statement
Rule 17    and_statement -> equality_statement
Rule 18    and_statement -> and_statement AND equality_statement
Rule 19    equality_statement -> relational_statement
Rule 20    equality_statement -> equality_statement EQ relational_statement
Rule 21    equality_statement -> equality_statement NEQ relational_statement
Rule 22    relational_statement -> add_statement
Rule 23    relational_statement -> relational_statement LT add_statement
Rule 24    relational_statement -> relational_statement GT add_statement
Rule 25    relational_statement -> relational_statement LTEQ add_statement
Rule 26    relational_statement -> relational_statement GTEQ add_statement
Rule 27    add_statement -> multiply_statement
Rule 28    add_statement -> add_statement PLUS multiply_statement
Rule 29    add_statement -> add_statement MINUS multiply_statement
Rule 30    multiply_statement -> unary_statement
Rule 31    multiply_statement -> multiply_statement TIMES unary_statement
Rule 32    multiply_statement -> multiply_statement DIVIDE unary_statement
Rule 33    multiply_statement -> multiply_statement MOD unary_statement
Rule 34    unary_statement -> exponent
Rule 35    unary_statement -> MINUS unary_statement
Rule 36    unary_statement -> NOT unary_statement
Rule 37    exponent -> term
Rule 38    exponent -> term POWER unary_statement
Rule 39    term -> IDENTIFIER
Rule 40    term -> atom
Rule 41    term -> LPAREN expression RPAREN
Rule 42    atom -> INTEGER
Rule 43    atom -> FLOAT
Rule 44    atom -> STRING
Rule 45    atom -> TRUE
Rule 46    atom -> FALSE
Rule 47    atom -> LBRACKET elements RBRACKET
Rule 48    atom -> IDENTIFIER LBRACKET INTEGER RBRACKET
Rule 49    elements -> elements INTEGER
Rule 50    elements -> elements FLOAT
Rule 51    elements -> <empty>
Rule 52    input_function -> INPUT LPAREN IDENTIFIER RPAREN
Rule 53    output_function -> PRINT LPAREN term RPAREN

Terminals, with rules where they appear

AND                  : 18
COLON                : 7 8 10
COMMA                : 8 8
DIVIDE               : 32
ELSE                 : 11
ENDFOR               : 8
ENDIF                : 9
ENDWHILE             : 7
EQ                   : 20
EQUALS               : 14
FALSE                : 46
FLOAT                : 43 50
FOR                  : 8
GT                   : 24
GTEQ                 : 26
IDENTIFIER           : 14 39 48 52
IF                   : 9
INPUT                : 52
INTEGER              : 42 48 49
LBRACKET             : 47 48
LPAREN               : 41 52 53
LT                   : 23
LTEQ                 : 25
MINUS                : 29 35
MOD                  : 33
NEQ                  : 21
NOT                  : 36
OR                   : 16
PLUS                 : 28
POWER                : 38
PRINT                : 53
RBRACKET             : 47 48
RPAREN               : 41 52 53
STRING               : 44
TIMES                : 31
TRUE                 : 45
WHILE                : 7
error                : 

Nonterminals, with rules where they appear

add_statement        : 22 23 24 25 26 28 29
and_statement        : 15 16 18
assignment_statement : 12
atom                 : 40
code_entity          : 1
conditional_statement : 3
elements             : 47 49 50
else_statement       : 
equality_statement   : 17 18 20 21
exponent             : 34
expression           : 4 7 8 8 8 9 41
input_function       : 5
iterative_statement  : 2
multiply_statement   : 27 28 29 31 32 33
or_statement         : 13 14 16
output_function      : 6
relational_statement : 19 20 21 23 24 25 26
start                : 7 8 10 11 0
term                 : 37 38 53
then_statement       : 9
unary_statement      : 30 31 32 33 35 36 38

Parsing method: LALR

state 0

    (0) S' -> . start
    (1) start -> . code_entity
    (2) code_entity -> . iterative_statement
    (3) code_entity -> . conditional_statement
    (4) code_entity -> . expression
    (5) code_entity -> . input_function
    (6) code_entity -> . output_function
    (7) iterative_statement -> . WHILE expression COLON start ENDWHILE
    (8) iterative_statement -> . FOR expression COMMA expression COMMA expression COLON start ENDFOR
    (9) conditional_statement -> . IF expression then_statement ENDIF
    (12) expression -> . assignment_statement
    (52) input_function -> . INPUT LPAREN IDENTIFIER RPAREN
    (53) output_function -> . PRINT LPAREN term RPAREN
    (13) assignment_statement -> . or_statement
    (14) assignment_statement -> . IDENTIFIER EQUALS or_statement
    (15) or_statement -> . and_statement
    (16) or_statement -> . or_statement OR and_statement
    (17) and_statement -> . equality_statement
    (18) and_statement -> . and_statement AND equality_statement
    (19) equality_statement -> . relational_statement
    (20) equality_statement -> . equality_statement EQ relational_statement
    (21) equality_statement -> . equality_statement NEQ relational_statement
    (22) relational_statement -> . add_statement
    (23) relational_statement -> . relational_statement LT add_statement
    (24) relational_statement -> . relational_statement GT add_statement
    (25) relational_statement -> . relational_statement LTEQ add_statement
    (26) relational_statement -> . relational_statement GTEQ add_statement
    (27) add_statement -> . multiply_statement
    (28) add_statement -> . add_statement PLUS multiply_statement
    (29) add_statement -> . add_statement MINUS multiply_statement
    (30) multiply_statement -> . unary_statement
    (31) multiply_statement -> . multiply_statement TIMES unary_statement
    (32) multiply_statement -> . multiply_statement DIVIDE unary_statement
    (33) multiply_statement -> . multiply_statement MOD unary_statement
    (34) unary_statement -> . exponent
    (35) unary_statement -> . MINUS unary_statement
    (36) unary_statement -> . NOT unary_statement
    (37) exponent -> . term
    (38) exponent -> . term POWER unary_statement
    (39) term -> . IDENTIFIER
    (40) term -> . atom
    (41) term -> . LPAREN expression RPAREN
    (42) atom -> . INTEGER
    (43) atom -> . FLOAT
    (44) atom -> . STRING
    (45) atom -> . TRUE
    (46) atom -> . FALSE
    (47) atom -> . LBRACKET elements RBRACKET
    (48) atom -> . IDENTIFIER LBRACKET INTEGER RBRACKET

    WHILE           shift and go to state 8
    FOR             shift and go to state 9
    IF              shift and go to state 10
    INPUT           shift and go to state 12
    PRINT           shift and go to state 15
    IDENTIFIER      shift and go to state 14
    MINUS           shift and go to state 23
    NOT             shift and go to state 26
    LPAREN          shift and go to state 13
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 29
    STRING          shift and go to state 30
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    LBRACKET        shift and go to state 33

    start                          shift and go to state 1
    code_entity                    shift and go to state 2
    iterative_statement            shift and go to state 3
    conditional_statement          shift and go to state 4
    expression                     shift and go to state 5
    input_function                 shift and go to state 6
    output_function                shift and go to state 7
    assignment_statement           shift and go to state 11
    term                           shift and go to state 16
    or_statement                   shift and go to state 17
    and_statement                  shift and go to state 18
    equality_statement             shift and go to state 19
    relational_statement           shift and go to state 20
    add_statement                  shift and go to state 21
    multiply_statement             shift and go to state 22
    unary_statement                shift and go to state 24
    exponent                       shift and go to state 25
    atom                           shift and go to state 27

state 1

    (0) S' -> start .



state 2

    (1) start -> code_entity .

    $end            reduce using rule 1 (start -> code_entity .)
    ENDWHILE        reduce using rule 1 (start -> code_entity .)
    ENDIF           reduce using rule 1 (start -> code_entity .)
    ENDFOR          reduce using rule 1 (start -> code_entity .)


state 3

    (2) code_entity -> iterative_statement .

    $end            reduce using rule 2 (code_entity -> iterative_statement .)
    ENDWHILE        reduce using rule 2 (code_entity -> iterative_statement .)
    ENDIF           reduce using rule 2 (code_entity -> iterative_statement .)
    ENDFOR          reduce using rule 2 (code_entity -> iterative_statement .)


state 4

    (3) code_entity -> conditional_statement .

    $end            reduce using rule 3 (code_entity -> conditional_statement .)
    ENDWHILE        reduce using rule 3 (code_entity -> conditional_statement .)
    ENDIF           reduce using rule 3 (code_entity -> conditional_statement .)
    ENDFOR          reduce using rule 3 (code_entity -> conditional_statement .)


state 5

    (4) code_entity -> expression .

    $end            reduce using rule 4 (code_entity -> expression .)
    ENDWHILE        reduce using rule 4 (code_entity -> expression .)
    ENDIF           reduce using rule 4 (code_entity -> expression .)
    ENDFOR          reduce using rule 4 (code_entity -> expression .)


state 6

    (5) code_entity -> input_function .

    $end            reduce using rule 5 (code_entity -> input_function .)
    ENDWHILE        reduce using rule 5 (code_entity -> input_function .)
    ENDIF           reduce using rule 5 (code_entity -> input_function .)
    ENDFOR          reduce using rule 5 (code_entity -> input_function .)


state 7

    (6) code_entity -> output_function .

    $end            reduce using rule 6 (code_entity -> output_function .)
    ENDWHILE        reduce using rule 6 (code_entity -> output_function .)
    ENDIF           reduce using rule 6 (code_entity -> output_function .)
    ENDFOR          reduce using rule 6 (code_entity -> output_function .)


state 8

    (7) iterative_statement -> WHILE . expression COLON start ENDWHILE
    (12) expression -> . assignment_statement
    (13) assignment_statement -> . or_statement
    (14) assignment_statement -> . IDENTIFIER EQUALS or_statement
    (15) or_statement -> . and_statement
    (16) or_statement -> . or_statement OR and_statement
    (17) and_statement -> . equality_statement
    (18) and_statement -> . and_statement AND equality_statement
    (19) equality_statement -> . relational_statement
    (20) equality_statement -> . equality_statement EQ relational_statement
    (21) equality_statement -> . equality_statement NEQ relational_statement
    (22) relational_statement -> . add_statement
    (23) relational_statement -> . relational_statement LT add_statement
    (24) relational_statement -> . relational_statement GT add_statement
    (25) relational_statement -> . relational_statement LTEQ add_statement
    (26) relational_statement -> . relational_statement GTEQ add_statement
    (27) add_statement -> . multiply_statement
    (28) add_statement -> . add_statement PLUS multiply_statement
    (29) add_statement -> . add_statement MINUS multiply_statement
    (30) multiply_statement -> . unary_statement
    (31) multiply_statement -> . multiply_statement TIMES unary_statement
    (32) multiply_statement -> . multiply_statement DIVIDE unary_statement
    (33) multiply_statement -> . multiply_statement MOD unary_statement
    (34) unary_statement -> . exponent
    (35) unary_statement -> . MINUS unary_statement
    (36) unary_statement -> . NOT unary_statement
    (37) exponent -> . term
    (38) exponent -> . term POWER unary_statement
    (39) term -> . IDENTIFIER
    (40) term -> . atom
    (41) term -> . LPAREN expression RPAREN
    (42) atom -> . INTEGER
    (43) atom -> . FLOAT
    (44) atom -> . STRING
    (45) atom -> . TRUE
    (46) atom -> . FALSE
    (47) atom -> . LBRACKET elements RBRACKET
    (48) atom -> . IDENTIFIER LBRACKET INTEGER RBRACKET

    IDENTIFIER      shift and go to state 14
    MINUS           shift and go to state 23
    NOT             shift and go to state 26
    LPAREN          shift and go to state 13
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 29
    STRING          shift and go to state 30
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    LBRACKET        shift and go to state 33

    expression                     shift and go to state 34
    assignment_statement           shift and go to state 11
    or_statement                   shift and go to state 17
    and_statement                  shift and go to state 18
    equality_statement             shift and go to state 19
    relational_statement           shift and go to state 20
    add_statement                  shift and go to state 21
    multiply_statement             shift and go to state 22
    unary_statement                shift and go to state 24
    exponent                       shift and go to state 25
    term                           shift and go to state 16
    atom                           shift and go to state 27

state 9

    (8) iterative_statement -> FOR . expression COMMA expression COMMA expression COLON start ENDFOR
    (12) expression -> . assignment_statement
    (13) assignment_statement -> . or_statement
    (14) assignment_statement -> . IDENTIFIER EQUALS or_statement
    (15) or_statement -> . and_statement
    (16) or_statement -> . or_statement OR and_statement
    (17) and_statement -> . equality_statement
    (18) and_statement -> . and_statement AND equality_statement
    (19) equality_statement -> . relational_statement
    (20) equality_statement -> . equality_statement EQ relational_statement
    (21) equality_statement -> . equality_statement NEQ relational_statement
    (22) relational_statement -> . add_statement
    (23) relational_statement -> . relational_statement LT add_statement
    (24) relational_statement -> . relational_statement GT add_statement
    (25) relational_statement -> . relational_statement LTEQ add_statement
    (26) relational_statement -> . relational_statement GTEQ add_statement
    (27) add_statement -> . multiply_statement
    (28) add_statement -> . add_statement PLUS multiply_statement
    (29) add_statement -> . add_statement MINUS multiply_statement
    (30) multiply_statement -> . unary_statement
    (31) multiply_statement -> . multiply_statement TIMES unary_statement
    (32) multiply_statement -> . multiply_statement DIVIDE unary_statement
    (33) multiply_statement -> . multiply_statement MOD unary_statement
    (34) unary_statement -> . exponent
    (35) unary_statement -> . MINUS unary_statement
    (36) unary_statement -> . NOT unary_statement
    (37) exponent -> . term
    (38) exponent -> . term POWER unary_statement
    (39) term -> . IDENTIFIER
    (40) term -> . atom
    (41) term -> . LPAREN expression RPAREN
    (42) atom -> . INTEGER
    (43) atom -> . FLOAT
    (44) atom -> . STRING
    (45) atom -> . TRUE
    (46) atom -> . FALSE
    (47) atom -> . LBRACKET elements RBRACKET
    (48) atom -> . IDENTIFIER LBRACKET INTEGER RBRACKET

    IDENTIFIER      shift and go to state 14
    MINUS           shift and go to state 23
    NOT             shift and go to state 26
    LPAREN          shift and go to state 13
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 29
    STRING          shift and go to state 30
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    LBRACKET        shift and go to state 33

    expression                     shift and go to state 35
    assignment_statement           shift and go to state 11
    or_statement                   shift and go to state 17
    and_statement                  shift and go to state 18
    equality_statement             shift and go to state 19
    relational_statement           shift and go to state 20
    add_statement                  shift and go to state 21
    multiply_statement             shift and go to state 22
    unary_statement                shift and go to state 24
    exponent                       shift and go to state 25
    term                           shift and go to state 16
    atom                           shift and go to state 27

state 10

    (9) conditional_statement -> IF . expression then_statement ENDIF
    (12) expression -> . assignment_statement
    (13) assignment_statement -> . or_statement
    (14) assignment_statement -> . IDENTIFIER EQUALS or_statement
    (15) or_statement -> . and_statement
    (16) or_statement -> . or_statement OR and_statement
    (17) and_statement -> . equality_statement
    (18) and_statement -> . and_statement AND equality_statement
    (19) equality_statement -> . relational_statement
    (20) equality_statement -> . equality_statement EQ relational_statement
    (21) equality_statement -> . equality_statement NEQ relational_statement
    (22) relational_statement -> . add_statement
    (23) relational_statement -> . relational_statement LT add_statement
    (24) relational_statement -> . relational_statement GT add_statement
    (25) relational_statement -> . relational_statement LTEQ add_statement
    (26) relational_statement -> . relational_statement GTEQ add_statement
    (27) add_statement -> . multiply_statement
    (28) add_statement -> . add_statement PLUS multiply_statement
    (29) add_statement -> . add_statement MINUS multiply_statement
    (30) multiply_statement -> . unary_statement
    (31) multiply_statement -> . multiply_statement TIMES unary_statement
    (32) multiply_statement -> . multiply_statement DIVIDE unary_statement
    (33) multiply_statement -> . multiply_statement MOD unary_statement
    (34) unary_statement -> . exponent
    (35) unary_statement -> . MINUS unary_statement
    (36) unary_statement -> . NOT unary_statement
    (37) exponent -> . term
    (38) exponent -> . term POWER unary_statement
    (39) term -> . IDENTIFIER
    (40) term -> . atom
    (41) term -> . LPAREN expression RPAREN
    (42) atom -> . INTEGER
    (43) atom -> . FLOAT
    (44) atom -> . STRING
    (45) atom -> . TRUE
    (46) atom -> . FALSE
    (47) atom -> . LBRACKET elements RBRACKET
    (48) atom -> . IDENTIFIER LBRACKET INTEGER RBRACKET

    IDENTIFIER      shift and go to state 14
    MINUS           shift and go to state 23
    NOT             shift and go to state 26
    LPAREN          shift and go to state 13
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 29
    STRING          shift and go to state 30
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    LBRACKET        shift and go to state 33

    expression                     shift and go to state 36
    assignment_statement           shift and go to state 11
    or_statement                   shift and go to state 17
    and_statement                  shift and go to state 18
    equality_statement             shift and go to state 19
    relational_statement           shift and go to state 20
    add_statement                  shift and go to state 21
    multiply_statement             shift and go to state 22
    unary_statement                shift and go to state 24
    exponent                       shift and go to state 25
    term                           shift and go to state 16
    atom                           shift and go to state 27

state 11

    (12) expression -> assignment_statement .

    $end            reduce using rule 12 (expression -> assignment_statement .)
    COLON           reduce using rule 12 (expression -> assignment_statement .)
    COMMA           reduce using rule 12 (expression -> assignment_statement .)
    RPAREN          reduce using rule 12 (expression -> assignment_statement .)
    ENDWHILE        reduce using rule 12 (expression -> assignment_statement .)
    ENDIF           reduce using rule 12 (expression -> assignment_statement .)
    ENDFOR          reduce using rule 12 (expression -> assignment_statement .)


state 12

    (52) input_function -> INPUT . LPAREN IDENTIFIER RPAREN

    LPAREN          shift and go to state 37


state 13

    (41) term -> LPAREN . expression RPAREN
    (12) expression -> . assignment_statement
    (13) assignment_statement -> . or_statement
    (14) assignment_statement -> . IDENTIFIER EQUALS or_statement
    (15) or_statement -> . and_statement
    (16) or_statement -> . or_statement OR and_statement
    (17) and_statement -> . equality_statement
    (18) and_statement -> . and_statement AND equality_statement
    (19) equality_statement -> . relational_statement
    (20) equality_statement -> . equality_statement EQ relational_statement
    (21) equality_statement -> . equality_statement NEQ relational_statement
    (22) relational_statement -> . add_statement
    (23) relational_statement -> . relational_statement LT add_statement
    (24) relational_statement -> . relational_statement GT add_statement
    (25) relational_statement -> . relational_statement LTEQ add_statement
    (26) relational_statement -> . relational_statement GTEQ add_statement
    (27) add_statement -> . multiply_statement
    (28) add_statement -> . add_statement PLUS multiply_statement
    (29) add_statement -> . add_statement MINUS multiply_statement
    (30) multiply_statement -> . unary_statement
    (31) multiply_statement -> . multiply_statement TIMES unary_statement
    (32) multiply_statement -> . multiply_statement DIVIDE unary_statement
    (33) multiply_statement -> . multiply_statement MOD unary_statement
    (34) unary_statement -> . exponent
    (35) unary_statement -> . MINUS unary_statement
    (36) unary_statement -> . NOT unary_statement
    (37) exponent -> . term
    (38) exponent -> . term POWER unary_statement
    (39) term -> . IDENTIFIER
    (40) term -> . atom
    (41) term -> . LPAREN expression RPAREN
    (42) atom -> . INTEGER
    (43) atom -> . FLOAT
    (44) atom -> . STRING
    (45) atom -> . TRUE
    (46) atom -> . FALSE
    (47) atom -> . LBRACKET elements RBRACKET
    (48) atom -> . IDENTIFIER LBRACKET INTEGER RBRACKET

    IDENTIFIER      shift and go to state 14
    MINUS           shift and go to state 23
    NOT             shift and go to state 26
    LPAREN          shift and go to state 13
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 29
    STRING          shift and go to state 30
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    LBRACKET        shift and go to state 33

    expression                     shift and go to state 38
    assignment_statement           shift and go to state 11
    or_statement                   shift and go to state 17
    and_statement                  shift and go to state 18
    equality_statement             shift and go to state 19
    relational_statement           shift and go to state 20
    add_statement                  shift and go to state 21
    multiply_statement             shift and go to state 22
    unary_statement                shift and go to state 24
    exponent                       shift and go to state 25
    term                           shift and go to state 16
    atom                           shift and go to state 27

state 14

    (14) assignment_statement -> IDENTIFIER . EQUALS or_statement
    (39) term -> IDENTIFIER .
    (48) atom -> IDENTIFIER . LBRACKET INTEGER RBRACKET

    EQUALS          shift and go to state 39
    POWER           reduce using rule 39 (term -> IDENTIFIER .)
    TIMES           reduce using rule 39 (term -> IDENTIFIER .)
    DIVIDE          reduce using rule 39 (term -> IDENTIFIER .)
    MOD             reduce using rule 39 (term -> IDENTIFIER .)
    PLUS            reduce using rule 39 (term -> IDENTIFIER .)
    MINUS           reduce using rule 39 (term -> IDENTIFIER .)
    LT              reduce using rule 39 (term -> IDENTIFIER .)
    GT              reduce using rule 39 (term -> IDENTIFIER .)
    LTEQ            reduce using rule 39 (term -> IDENTIFIER .)
    GTEQ            reduce using rule 39 (term -> IDENTIFIER .)
    EQ              reduce using rule 39 (term -> IDENTIFIER .)
    NEQ             reduce using rule 39 (term -> IDENTIFIER .)
    AND             reduce using rule 39 (term -> IDENTIFIER .)
    OR              reduce using rule 39 (term -> IDENTIFIER .)
    $end            reduce using rule 39 (term -> IDENTIFIER .)
    COLON           reduce using rule 39 (term -> IDENTIFIER .)
    COMMA           reduce using rule 39 (term -> IDENTIFIER .)
    RPAREN          reduce using rule 39 (term -> IDENTIFIER .)
    ENDWHILE        reduce using rule 39 (term -> IDENTIFIER .)
    ENDIF           reduce using rule 39 (term -> IDENTIFIER .)
    ENDFOR          reduce using rule 39 (term -> IDENTIFIER .)
    LBRACKET        shift and go to state 40


state 15

    (53) output_function -> PRINT . LPAREN term RPAREN

    LPAREN          shift and go to state 41


state 16

    (37) exponent -> term .
    (38) exponent -> term . POWER unary_statement

    TIMES           reduce using rule 37 (exponent -> term .)
    DIVIDE          reduce using rule 37 (exponent -> term .)
    MOD             reduce using rule 37 (exponent -> term .)
    PLUS            reduce using rule 37 (exponent -> term .)
    MINUS           reduce using rule 37 (exponent -> term .)
    LT              reduce using rule 37 (exponent -> term .)
    GT              reduce using rule 37 (exponent -> term .)
    LTEQ            reduce using rule 37 (exponent -> term .)
    GTEQ            reduce using rule 37 (exponent -> term .)
    EQ              reduce using rule 37 (exponent -> term .)
    NEQ             reduce using rule 37 (exponent -> term .)
    AND             reduce using rule 37 (exponent -> term .)
    OR              reduce using rule 37 (exponent -> term .)
    $end            reduce using rule 37 (exponent -> term .)
    COLON           reduce using rule 37 (exponent -> term .)
    COMMA           reduce using rule 37 (exponent -> term .)
    RPAREN          reduce using rule 37 (exponent -> term .)
    ENDWHILE        reduce using rule 37 (exponent -> term .)
    ENDIF           reduce using rule 37 (exponent -> term .)
    ENDFOR          reduce using rule 37 (exponent -> term .)
    POWER           shift and go to state 42


state 17

    (13) assignment_statement -> or_statement .
    (16) or_statement -> or_statement . OR and_statement

    $end            reduce using rule 13 (assignment_statement -> or_statement .)
    COLON           reduce using rule 13 (assignment_statement -> or_statement .)
    COMMA           reduce using rule 13 (assignment_statement -> or_statement .)
    RPAREN          reduce using rule 13 (assignment_statement -> or_statement .)
    ENDWHILE        reduce using rule 13 (assignment_statement -> or_statement .)
    ENDIF           reduce using rule 13 (assignment_statement -> or_statement .)
    ENDFOR          reduce using rule 13 (assignment_statement -> or_statement .)
    OR              shift and go to state 43


state 18

    (15) or_statement -> and_statement .
    (18) and_statement -> and_statement . AND equality_statement

    OR              reduce using rule 15 (or_statement -> and_statement .)
    $end            reduce using rule 15 (or_statement -> and_statement .)
    COLON           reduce using rule 15 (or_statement -> and_statement .)
    COMMA           reduce using rule 15 (or_statement -> and_statement .)
    RPAREN          reduce using rule 15 (or_statement -> and_statement .)
    ENDWHILE        reduce using rule 15 (or_statement -> and_statement .)
    ENDIF           reduce using rule 15 (or_statement -> and_statement .)
    ENDFOR          reduce using rule 15 (or_statement -> and_statement .)
    AND             shift and go to state 44


state 19

    (17) and_statement -> equality_statement .
    (20) equality_statement -> equality_statement . EQ relational_statement
    (21) equality_statement -> equality_statement . NEQ relational_statement

    AND             reduce using rule 17 (and_statement -> equality_statement .)
    OR              reduce using rule 17 (and_statement -> equality_statement .)
    $end            reduce using rule 17 (and_statement -> equality_statement .)
    COLON           reduce using rule 17 (and_statement -> equality_statement .)
    COMMA           reduce using rule 17 (and_statement -> equality_statement .)
    RPAREN          reduce using rule 17 (and_statement -> equality_statement .)
    ENDWHILE        reduce using rule 17 (and_statement -> equality_statement .)
    ENDIF           reduce using rule 17 (and_statement -> equality_statement .)
    ENDFOR          reduce using rule 17 (and_statement -> equality_statement .)
    EQ              shift and go to state 45
    NEQ             shift and go to state 46


state 20

    (19) equality_statement -> relational_statement .
    (23) relational_statement -> relational_statement . LT add_statement
    (24) relational_statement -> relational_statement . GT add_statement
    (25) relational_statement -> relational_statement . LTEQ add_statement
    (26) relational_statement -> relational_statement . GTEQ add_statement

    EQ              reduce using rule 19 (equality_statement -> relational_statement .)
    NEQ             reduce using rule 19 (equality_statement -> relational_statement .)
    AND             reduce using rule 19 (equality_statement -> relational_statement .)
    OR              reduce using rule 19 (equality_statement -> relational_statement .)
    $end            reduce using rule 19 (equality_statement -> relational_statement .)
    COLON           reduce using rule 19 (equality_statement -> relational_statement .)
    COMMA           reduce using rule 19 (equality_statement -> relational_statement .)
    RPAREN          reduce using rule 19 (equality_statement -> relational_statement .)
    ENDWHILE        reduce using rule 19 (equality_statement -> relational_statement .)
    ENDIF           reduce using rule 19 (equality_statement -> relational_statement .)
    ENDFOR          reduce using rule 19 (equality_statement -> relational_statement .)
    LT              shift and go to state 47
    GT              shift and go to state 48
    LTEQ            shift and go to state 49
    GTEQ            shift and go to state 50


state 21

    (22) relational_statement -> add_statement .
    (28) add_statement -> add_statement . PLUS multiply_statement
    (29) add_statement -> add_statement . MINUS multiply_statement

    LT              reduce using rule 22 (relational_statement -> add_statement .)
    GT              reduce using rule 22 (relational_statement -> add_statement .)
    LTEQ            reduce using rule 22 (relational_statement -> add_statement .)
    GTEQ            reduce using rule 22 (relational_statement -> add_statement .)
    EQ              reduce using rule 22 (relational_statement -> add_statement .)
    NEQ             reduce using rule 22 (relational_statement -> add_statement .)
    AND             reduce using rule 22 (relational_statement -> add_statement .)
    OR              reduce using rule 22 (relational_statement -> add_statement .)
    $end            reduce using rule 22 (relational_statement -> add_statement .)
    COLON           reduce using rule 22 (relational_statement -> add_statement .)
    COMMA           reduce using rule 22 (relational_statement -> add_statement .)
    RPAREN          reduce using rule 22 (relational_statement -> add_statement .)
    ENDWHILE        reduce using rule 22 (relational_statement -> add_statement .)
    ENDIF           reduce using rule 22 (relational_statement -> add_statement .)
    ENDFOR          reduce using rule 22 (relational_statement -> add_statement .)
    PLUS            shift and go to state 51
    MINUS           shift and go to state 52


state 22

    (27) add_statement -> multiply_statement .
    (31) multiply_statement -> multiply_statement . TIMES unary_statement
    (32) multiply_statement -> multiply_statement . DIVIDE unary_statement
    (33) multiply_statement -> multiply_statement . MOD unary_statement

    PLUS            reduce using rule 27 (add_statement -> multiply_statement .)
    MINUS           reduce using rule 27 (add_statement -> multiply_statement .)
    LT              reduce using rule 27 (add_statement -> multiply_statement .)
    GT              reduce using rule 27 (add_statement -> multiply_statement .)
    LTEQ            reduce using rule 27 (add_statement -> multiply_statement .)
    GTEQ            reduce using rule 27 (add_statement -> multiply_statement .)
    EQ              reduce using rule 27 (add_statement -> multiply_statement .)
    NEQ             reduce using rule 27 (add_statement -> multiply_statement .)
    AND             reduce using rule 27 (add_statement -> multiply_statement .)
    OR              reduce using rule 27 (add_statement -> multiply_statement .)
    $end            reduce using rule 27 (add_statement -> multiply_statement .)
    COLON           reduce using rule 27 (add_statement -> multiply_statement .)
    COMMA           reduce using rule 27 (add_statement -> multiply_statement .)
    RPAREN          reduce using rule 27 (add_statement -> multiply_statement .)
    ENDWHILE        reduce using rule 27 (add_statement -> multiply_statement .)
    ENDIF           reduce using rule 27 (add_statement -> multiply_statement .)
    ENDFOR          reduce using rule 27 (add_statement -> multiply_statement .)
    TIMES           shift and go to state 53
    DIVIDE          shift and go to state 54
    MOD             shift and go to state 55


state 23

    (35) unary_statement -> MINUS . unary_statement
    (34) unary_statement -> . exponent
    (35) unary_statement -> . MINUS unary_statement
    (36) unary_statement -> . NOT unary_statement
    (37) exponent -> . term
    (38) exponent -> . term POWER unary_statement
    (39) term -> . IDENTIFIER
    (40) term -> . atom
    (41) term -> . LPAREN expression RPAREN
    (42) atom -> . INTEGER
    (43) atom -> . FLOAT
    (44) atom -> . STRING
    (45) atom -> . TRUE
    (46) atom -> . FALSE
    (47) atom -> . LBRACKET elements RBRACKET
    (48) atom -> . IDENTIFIER LBRACKET INTEGER RBRACKET

    MINUS           shift and go to state 23
    NOT             shift and go to state 26
    IDENTIFIER      shift and go to state 57
    LPAREN          shift and go to state 13
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 29
    STRING          shift and go to state 30
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    LBRACKET        shift and go to state 33

    unary_statement                shift and go to state 56
    exponent                       shift and go to state 25
    term                           shift and go to state 16
    atom                           shift and go to state 27

state 24

    (30) multiply_statement -> unary_statement .

    TIMES           reduce using rule 30 (multiply_statement -> unary_statement .)
    DIVIDE          reduce using rule 30 (multiply_statement -> unary_statement .)
    MOD             reduce using rule 30 (multiply_statement -> unary_statement .)
    PLUS            reduce using rule 30 (multiply_statement -> unary_statement .)
    MINUS           reduce using rule 30 (multiply_statement -> unary_statement .)
    LT              reduce using rule 30 (multiply_statement -> unary_statement .)
    GT              reduce using rule 30 (multiply_statement -> unary_statement .)
    LTEQ            reduce using rule 30 (multiply_statement -> unary_statement .)
    GTEQ            reduce using rule 30 (multiply_statement -> unary_statement .)
    EQ              reduce using rule 30 (multiply_statement -> unary_statement .)
    NEQ             reduce using rule 30 (multiply_statement -> unary_statement .)
    AND             reduce using rule 30 (multiply_statement -> unary_statement .)
    OR              reduce using rule 30 (multiply_statement -> unary_statement .)
    $end            reduce using rule 30 (multiply_statement -> unary_statement .)
    COLON           reduce using rule 30 (multiply_statement -> unary_statement .)
    COMMA           reduce using rule 30 (multiply_statement -> unary_statement .)
    RPAREN          reduce using rule 30 (multiply_statement -> unary_statement .)
    ENDWHILE        reduce using rule 30 (multiply_statement -> unary_statement .)
    ENDIF           reduce using rule 30 (multiply_statement -> unary_statement .)
    ENDFOR          reduce using rule 30 (multiply_statement -> unary_statement .)


state 25

    (34) unary_statement -> exponent .

    TIMES           reduce using rule 34 (unary_statement -> exponent .)
    DIVIDE          reduce using rule 34 (unary_statement -> exponent .)
    MOD             reduce using rule 34 (unary_statement -> exponent .)
    PLUS            reduce using rule 34 (unary_statement -> exponent .)
    MINUS           reduce using rule 34 (unary_statement -> exponent .)
    LT              reduce using rule 34 (unary_statement -> exponent .)
    GT              reduce using rule 34 (unary_statement -> exponent .)
    LTEQ            reduce using rule 34 (unary_statement -> exponent .)
    GTEQ            reduce using rule 34 (unary_statement -> exponent .)
    EQ              reduce using rule 34 (unary_statement -> exponent .)
    NEQ             reduce using rule 34 (unary_statement -> exponent .)
    AND             reduce using rule 34 (unary_statement -> exponent .)
    OR              reduce using rule 34 (unary_statement -> exponent .)
    $end            reduce using rule 34 (unary_statement -> exponent .)
    COLON           reduce using rule 34 (unary_statement -> exponent .)
    COMMA           reduce using rule 34 (unary_statement -> exponent .)
    RPAREN          reduce using rule 34 (unary_statement -> exponent .)
    ENDWHILE        reduce using rule 34 (unary_statement -> exponent .)
    ENDIF           reduce using rule 34 (unary_statement -> exponent .)
    ENDFOR          reduce using rule 34 (unary_statement -> exponent .)


state 26

    (36) unary_statement -> NOT . unary_statement
    (34) unary_statement -> . exponent
    (35) unary_statement -> . MINUS unary_statement
    (36) unary_statement -> . NOT unary_statement
    (37) exponent -> . term
    (38) exponent -> . term POWER unary_statement
    (39) term -> . IDENTIFIER
    (40) term -> . atom
    (41) term -> . LPAREN expression RPAREN
    (42) atom -> . INTEGER
    (43) atom -> . FLOAT
    (44) atom -> . STRING
    (45) atom -> . TRUE
    (46) atom -> . FALSE
    (47) atom -> . LBRACKET elements RBRACKET
    (48) atom -> . IDENTIFIER LBRACKET INTEGER RBRACKET

    MINUS           shift and go to state 23
    NOT             shift and go to state 26
    IDENTIFIER      shift and go to state 57
    LPAREN          shift and go to state 13
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 29
    STRING          shift and go to state 30
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    LBRACKET        shift and go to state 33

    unary_statement                shift and go to state 58
    exponent                       shift and go to state 25
    term                           shift and go to state 16
    atom                           shift and go to state 27

state 27

    (40) term -> atom .

    POWER           reduce using rule 40 (term -> atom .)
    TIMES           reduce using rule 40 (term -> atom .)
    DIVIDE          reduce using rule 40 (term -> atom .)
    MOD             reduce using rule 40 (term -> atom .)
    PLUS            reduce using rule 40 (term -> atom .)
    MINUS           reduce using rule 40 (term -> atom .)
    LT              reduce using rule 40 (term -> atom .)
    GT              reduce using rule 40 (term -> atom .)
    LTEQ            reduce using rule 40 (term -> atom .)
    GTEQ            reduce using rule 40 (term -> atom .)
    EQ              reduce using rule 40 (term -> atom .)
    NEQ             reduce using rule 40 (term -> atom .)
    AND             reduce using rule 40 (term -> atom .)
    OR              reduce using rule 40 (term -> atom .)
    $end            reduce using rule 40 (term -> atom .)
    COLON           reduce using rule 40 (term -> atom .)
    COMMA           reduce using rule 40 (term -> atom .)
    RPAREN          reduce using rule 40 (term -> atom .)
    ENDWHILE        reduce using rule 40 (term -> atom .)
    ENDIF           reduce using rule 40 (term -> atom .)
    ENDFOR          reduce using rule 40 (term -> atom .)


state 28

    (42) atom -> INTEGER .

    POWER           reduce using rule 42 (atom -> INTEGER .)
    TIMES           reduce using rule 42 (atom -> INTEGER .)
    DIVIDE          reduce using rule 42 (atom -> INTEGER .)
    MOD             reduce using rule 42 (atom -> INTEGER .)
    PLUS            reduce using rule 42 (atom -> INTEGER .)
    MINUS           reduce using rule 42 (atom -> INTEGER .)
    LT              reduce using rule 42 (atom -> INTEGER .)
    GT              reduce using rule 42 (atom -> INTEGER .)
    LTEQ            reduce using rule 42 (atom -> INTEGER .)
    GTEQ            reduce using rule 42 (atom -> INTEGER .)
    EQ              reduce using rule 42 (atom -> INTEGER .)
    NEQ             reduce using rule 42 (atom -> INTEGER .)
    AND             reduce using rule 42 (atom -> INTEGER .)
    OR              reduce using rule 42 (atom -> INTEGER .)
    $end            reduce using rule 42 (atom -> INTEGER .)
    COLON           reduce using rule 42 (atom -> INTEGER .)
    COMMA           reduce using rule 42 (atom -> INTEGER .)
    RPAREN          reduce using rule 42 (atom -> INTEGER .)
    ENDWHILE        reduce using rule 42 (atom -> INTEGER .)
    ENDIF           reduce using rule 42 (atom -> INTEGER .)
    ENDFOR          reduce using rule 42 (atom -> INTEGER .)


state 29

    (43) atom -> FLOAT .

    POWER           reduce using rule 43 (atom -> FLOAT .)
    TIMES           reduce using rule 43 (atom -> FLOAT .)
    DIVIDE          reduce using rule 43 (atom -> FLOAT .)
    MOD             reduce using rule 43 (atom -> FLOAT .)
    PLUS            reduce using rule 43 (atom -> FLOAT .)
    MINUS           reduce using rule 43 (atom -> FLOAT .)
    LT              reduce using rule 43 (atom -> FLOAT .)
    GT              reduce using rule 43 (atom -> FLOAT .)
    LTEQ            reduce using rule 43 (atom -> FLOAT .)
    GTEQ            reduce using rule 43 (atom -> FLOAT .)
    EQ              reduce using rule 43 (atom -> FLOAT .)
    NEQ             reduce using rule 43 (atom -> FLOAT .)
    AND             reduce using rule 43 (atom -> FLOAT .)
    OR              reduce using rule 43 (atom -> FLOAT .)
    $end            reduce using rule 43 (atom -> FLOAT .)
    COLON           reduce using rule 43 (atom -> FLOAT .)
    COMMA           reduce using rule 43 (atom -> FLOAT .)
    RPAREN          reduce using rule 43 (atom -> FLOAT .)
    ENDWHILE        reduce using rule 43 (atom -> FLOAT .)
    ENDIF           reduce using rule 43 (atom -> FLOAT .)
    ENDFOR          reduce using rule 43 (atom -> FLOAT .)


state 30

    (44) atom -> STRING .

    POWER           reduce using rule 44 (atom -> STRING .)
    TIMES           reduce using rule 44 (atom -> STRING .)
    DIVIDE          reduce using rule 44 (atom -> STRING .)
    MOD             reduce using rule 44 (atom -> STRING .)
    PLUS            reduce using rule 44 (atom -> STRING .)
    MINUS           reduce using rule 44 (atom -> STRING .)
    LT              reduce using rule 44 (atom -> STRING .)
    GT              reduce using rule 44 (atom -> STRING .)
    LTEQ            reduce using rule 44 (atom -> STRING .)
    GTEQ            reduce using rule 44 (atom -> STRING .)
    EQ              reduce using rule 44 (atom -> STRING .)
    NEQ             reduce using rule 44 (atom -> STRING .)
    AND             reduce using rule 44 (atom -> STRING .)
    OR              reduce using rule 44 (atom -> STRING .)
    $end            reduce using rule 44 (atom -> STRING .)
    COLON           reduce using rule 44 (atom -> STRING .)
    COMMA           reduce using rule 44 (atom -> STRING .)
    RPAREN          reduce using rule 44 (atom -> STRING .)
    ENDWHILE        reduce using rule 44 (atom -> STRING .)
    ENDIF           reduce using rule 44 (atom -> STRING .)
    ENDFOR          reduce using rule 44 (atom -> STRING .)


state 31

    (45) atom -> TRUE .

    POWER           reduce using rule 45 (atom -> TRUE .)
    TIMES           reduce using rule 45 (atom -> TRUE .)
    DIVIDE          reduce using rule 45 (atom -> TRUE .)
    MOD             reduce using rule 45 (atom -> TRUE .)
    PLUS            reduce using rule 45 (atom -> TRUE .)
    MINUS           reduce using rule 45 (atom -> TRUE .)
    LT              reduce using rule 45 (atom -> TRUE .)
    GT              reduce using rule 45 (atom -> TRUE .)
    LTEQ            reduce using rule 45 (atom -> TRUE .)
    GTEQ            reduce using rule 45 (atom -> TRUE .)
    EQ              reduce using rule 45 (atom -> TRUE .)
    NEQ             reduce using rule 45 (atom -> TRUE .)
    AND             reduce using rule 45 (atom -> TRUE .)
    OR              reduce using rule 45 (atom -> TRUE .)
    $end            reduce using rule 45 (atom -> TRUE .)
    COLON           reduce using rule 45 (atom -> TRUE .)
    COMMA           reduce using rule 45 (atom -> TRUE .)
    RPAREN          reduce using rule 45 (atom -> TRUE .)
    ENDWHILE        reduce using rule 45 (atom -> TRUE .)
    ENDIF           reduce using rule 45 (atom -> TRUE .)
    ENDFOR          reduce using rule 45 (atom -> TRUE .)


state 32

    (46) atom -> FALSE .

    POWER           reduce using rule 46 (atom -> FALSE .)
    TIMES           reduce using rule 46 (atom -> FALSE .)
    DIVIDE          reduce using rule 46 (atom -> FALSE .)
    MOD             reduce using rule 46 (atom -> FALSE .)
    PLUS            reduce using rule 46 (atom -> FALSE .)
    MINUS           reduce using rule 46 (atom -> FALSE .)
    LT              reduce using rule 46 (atom -> FALSE .)
    GT              reduce using rule 46 (atom -> FALSE .)
    LTEQ            reduce using rule 46 (atom -> FALSE .)
    GTEQ            reduce using rule 46 (atom -> FALSE .)
    EQ              reduce using rule 46 (atom -> FALSE .)
    NEQ             reduce using rule 46 (atom -> FALSE .)
    AND             reduce using rule 46 (atom -> FALSE .)
    OR              reduce using rule 46 (atom -> FALSE .)
    $end            reduce using rule 46 (atom -> FALSE .)
    COLON           reduce using rule 46 (atom -> FALSE .)
    COMMA           reduce using rule 46 (atom -> FALSE .)
    RPAREN          reduce using rule 46 (atom -> FALSE .)
    ENDWHILE        reduce using rule 46 (atom -> FALSE .)
    ENDIF           reduce using rule 46 (atom -> FALSE .)
    ENDFOR          reduce using rule 46 (atom -> FALSE .)


state 33

    (47) atom -> LBRACKET . elements RBRACKET
    (49) elements -> . elements INTEGER
    (50) elements -> . elements FLOAT
    (51) elements -> .

    RBRACKET        reduce using rule 51 (elements -> .)
    INTEGER         reduce using rule 51 (elements -> .)
    FLOAT           reduce using rule 51 (elements -> .)

    elements                       shift and go to state 59

state 34

    (7) iterative_statement -> WHILE expression . COLON start ENDWHILE

    COLON           shift and go to state 60


state 35

    (8) iterative_statement -> FOR expression . COMMA expression COMMA expression COLON start ENDFOR

    COMMA           shift and go to state 61


state 36

    (9) conditional_statement -> IF expression . then_statement ENDIF
    (10) then_statement -> . COLON start

    COLON           shift and go to state 63

    then_statement                 shift and go to state 62

state 37

    (52) input_function -> INPUT LPAREN . IDENTIFIER RPAREN

    IDENTIFIER      shift and go to state 64


state 38

    (41) term -> LPAREN expression . RPAREN

    RPAREN          shift and go to state 65


state 39

    (14) assignment_statement -> IDENTIFIER EQUALS . or_statement
    (15) or_statement -> . and_statement
    (16) or_statement -> . or_statement OR and_statement
    (17) and_statement -> . equality_statement
    (18) and_statement -> . and_statement AND equality_statement
    (19) equality_statement -> . relational_statement
    (20) equality_statement -> . equality_statement EQ relational_statement
    (21) equality_statement -> . equality_statement NEQ relational_statement
    (22) relational_statement -> . add_statement
    (23) relational_statement -> . relational_statement LT add_statement
    (24) relational_statement -> . relational_statement GT add_statement
    (25) relational_statement -> . relational_statement LTEQ add_statement
    (26) relational_statement -> . relational_statement GTEQ add_statement
    (27) add_statement -> . multiply_statement
    (28) add_statement -> . add_statement PLUS multiply_statement
    (29) add_statement -> . add_statement MINUS multiply_statement
    (30) multiply_statement -> . unary_statement
    (31) multiply_statement -> . multiply_statement TIMES unary_statement
    (32) multiply_statement -> . multiply_statement DIVIDE unary_statement
    (33) multiply_statement -> . multiply_statement MOD unary_statement
    (34) unary_statement -> . exponent
    (35) unary_statement -> . MINUS unary_statement
    (36) unary_statement -> . NOT unary_statement
    (37) exponent -> . term
    (38) exponent -> . term POWER unary_statement
    (39) term -> . IDENTIFIER
    (40) term -> . atom
    (41) term -> . LPAREN expression RPAREN
    (42) atom -> . INTEGER
    (43) atom -> . FLOAT
    (44) atom -> . STRING
    (45) atom -> . TRUE
    (46) atom -> . FALSE
    (47) atom -> . LBRACKET elements RBRACKET
    (48) atom -> . IDENTIFIER LBRACKET INTEGER RBRACKET

    MINUS           shift and go to state 23
    NOT             shift and go to state 26
    IDENTIFIER      shift and go to state 57
    LPAREN          shift and go to state 13
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 29
    STRING          shift and go to state 30
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    LBRACKET        shift and go to state 33

    or_statement                   shift and go to state 66
    and_statement                  shift and go to state 18
    equality_statement             shift and go to state 19
    relational_statement           shift and go to state 20
    add_statement                  shift and go to state 21
    multiply_statement             shift and go to state 22
    unary_statement                shift and go to state 24
    exponent                       shift and go to state 25
    term                           shift and go to state 16
    atom                           shift and go to state 27

state 40

    (48) atom -> IDENTIFIER LBRACKET . INTEGER RBRACKET

    INTEGER         shift and go to state 67


state 41

    (53) output_function -> PRINT LPAREN . term RPAREN
    (39) term -> . IDENTIFIER
    (40) term -> . atom
    (41) term -> . LPAREN expression RPAREN
    (42) atom -> . INTEGER
    (43) atom -> . FLOAT
    (44) atom -> . STRING
    (45) atom -> . TRUE
    (46) atom -> . FALSE
    (47) atom -> . LBRACKET elements RBRACKET
    (48) atom -> . IDENTIFIER LBRACKET INTEGER RBRACKET

    IDENTIFIER      shift and go to state 57
    LPAREN          shift and go to state 13
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 29
    STRING          shift and go to state 30
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    LBRACKET        shift and go to state 33

    term                           shift and go to state 68
    atom                           shift and go to state 27

state 42

    (38) exponent -> term POWER . unary_statement
    (34) unary_statement -> . exponent
    (35) unary_statement -> . MINUS unary_statement
    (36) unary_statement -> . NOT unary_statement
    (37) exponent -> . term
    (38) exponent -> . term POWER unary_statement
    (39) term -> . IDENTIFIER
    (40) term -> . atom
    (41) term -> . LPAREN expression RPAREN
    (42) atom -> . INTEGER
    (43) atom -> . FLOAT
    (44) atom -> . STRING
    (45) atom -> . TRUE
    (46) atom -> . FALSE
    (47) atom -> . LBRACKET elements RBRACKET
    (48) atom -> . IDENTIFIER LBRACKET INTEGER RBRACKET

    MINUS           shift and go to state 23
    NOT             shift and go to state 26
    IDENTIFIER      shift and go to state 57
    LPAREN          shift and go to state 13
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 29
    STRING          shift and go to state 30
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    LBRACKET        shift and go to state 33

    term                           shift and go to state 16
    unary_statement                shift and go to state 69
    exponent                       shift and go to state 25
    atom                           shift and go to state 27

state 43

    (16) or_statement -> or_statement OR . and_statement
    (17) and_statement -> . equality_statement
    (18) and_statement -> . and_statement AND equality_statement
    (19) equality_statement -> . relational_statement
    (20) equality_statement -> . equality_statement EQ relational_statement
    (21) equality_statement -> . equality_statement NEQ relational_statement
    (22) relational_statement -> . add_statement
    (23) relational_statement -> . relational_statement LT add_statement
    (24) relational_statement -> . relational_statement GT add_statement
    (25) relational_statement -> . relational_statement LTEQ add_statement
    (26) relational_statement -> . relational_statement GTEQ add_statement
    (27) add_statement -> . multiply_statement
    (28) add_statement -> . add_statement PLUS multiply_statement
    (29) add_statement -> . add_statement MINUS multiply_statement
    (30) multiply_statement -> . unary_statement
    (31) multiply_statement -> . multiply_statement TIMES unary_statement
    (32) multiply_statement -> . multiply_statement DIVIDE unary_statement
    (33) multiply_statement -> . multiply_statement MOD unary_statement
    (34) unary_statement -> . exponent
    (35) unary_statement -> . MINUS unary_statement
    (36) unary_statement -> . NOT unary_statement
    (37) exponent -> . term
    (38) exponent -> . term POWER unary_statement
    (39) term -> . IDENTIFIER
    (40) term -> . atom
    (41) term -> . LPAREN expression RPAREN
    (42) atom -> . INTEGER
    (43) atom -> . FLOAT
    (44) atom -> . STRING
    (45) atom -> . TRUE
    (46) atom -> . FALSE
    (47) atom -> . LBRACKET elements RBRACKET
    (48) atom -> . IDENTIFIER LBRACKET INTEGER RBRACKET

    MINUS           shift and go to state 23
    NOT             shift and go to state 26
    IDENTIFIER      shift and go to state 57
    LPAREN          shift and go to state 13
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 29
    STRING          shift and go to state 30
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    LBRACKET        shift and go to state 33

    and_statement                  shift and go to state 70
    equality_statement             shift and go to state 19
    relational_statement           shift and go to state 20
    add_statement                  shift and go to state 21
    multiply_statement             shift and go to state 22
    unary_statement                shift and go to state 24
    exponent                       shift and go to state 25
    term                           shift and go to state 16
    atom                           shift and go to state 27

state 44

    (18) and_statement -> and_statement AND . equality_statement
    (19) equality_statement -> . relational_statement
    (20) equality_statement -> . equality_statement EQ relational_statement
    (21) equality_statement -> . equality_statement NEQ relational_statement
    (22) relational_statement -> . add_statement
    (23) relational_statement -> . relational_statement LT add_statement
    (24) relational_statement -> . relational_statement GT add_statement
    (25) relational_statement -> . relational_statement LTEQ add_statement
    (26) relational_statement -> . relational_statement GTEQ add_statement
    (27) add_statement -> . multiply_statement
    (28) add_statement -> . add_statement PLUS multiply_statement
    (29) add_statement -> . add_statement MINUS multiply_statement
    (30) multiply_statement -> . unary_statement
    (31) multiply_statement -> . multiply_statement TIMES unary_statement
    (32) multiply_statement -> . multiply_statement DIVIDE unary_statement
    (33) multiply_statement -> . multiply_statement MOD unary_statement
    (34) unary_statement -> . exponent
    (35) unary_statement -> . MINUS unary_statement
    (36) unary_statement -> . NOT unary_statement
    (37) exponent -> . term
    (38) exponent -> . term POWER unary_statement
    (39) term -> . IDENTIFIER
    (40) term -> . atom
    (41) term -> . LPAREN expression RPAREN
    (42) atom -> . INTEGER
    (43) atom -> . FLOAT
    (44) atom -> . STRING
    (45) atom -> . TRUE
    (46) atom -> . FALSE
    (47) atom -> . LBRACKET elements RBRACKET
    (48) atom -> . IDENTIFIER LBRACKET INTEGER RBRACKET

    MINUS           shift and go to state 23
    NOT             shift and go to state 26
    IDENTIFIER      shift and go to state 57
    LPAREN          shift and go to state 13
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 29
    STRING          shift and go to state 30
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    LBRACKET        shift and go to state 33

    equality_statement             shift and go to state 71
    relational_statement           shift and go to state 20
    add_statement                  shift and go to state 21
    multiply_statement             shift and go to state 22
    unary_statement                shift and go to state 24
    exponent                       shift and go to state 25
    term                           shift and go to state 16
    atom                           shift and go to state 27

state 45

    (20) equality_statement -> equality_statement EQ . relational_statement
    (22) relational_statement -> . add_statement
    (23) relational_statement -> . relational_statement LT add_statement
    (24) relational_statement -> . relational_statement GT add_statement
    (25) relational_statement -> . relational_statement LTEQ add_statement
    (26) relational_statement -> . relational_statement GTEQ add_statement
    (27) add_statement -> . multiply_statement
    (28) add_statement -> . add_statement PLUS multiply_statement
    (29) add_statement -> . add_statement MINUS multiply_statement
    (30) multiply_statement -> . unary_statement
    (31) multiply_statement -> . multiply_statement TIMES unary_statement
    (32) multiply_statement -> . multiply_statement DIVIDE unary_statement
    (33) multiply_statement -> . multiply_statement MOD unary_statement
    (34) unary_statement -> . exponent
    (35) unary_statement -> . MINUS unary_statement
    (36) unary_statement -> . NOT unary_statement
    (37) exponent -> . term
    (38) exponent -> . term POWER unary_statement
    (39) term -> . IDENTIFIER
    (40) term -> . atom
    (41) term -> . LPAREN expression RPAREN
    (42) atom -> . INTEGER
    (43) atom -> . FLOAT
    (44) atom -> . STRING
    (45) atom -> . TRUE
    (46) atom -> . FALSE
    (47) atom -> . LBRACKET elements RBRACKET
    (48) atom -> . IDENTIFIER LBRACKET INTEGER RBRACKET

    MINUS           shift and go to state 23
    NOT             shift and go to state 26
    IDENTIFIER      shift and go to state 57
    LPAREN          shift and go to state 13
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 29
    STRING          shift and go to state 30
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    LBRACKET        shift and go to state 33

    relational_statement           shift and go to state 72
    add_statement                  shift and go to state 21
    multiply_statement             shift and go to state 22
    unary_statement                shift and go to state 24
    exponent                       shift and go to state 25
    term                           shift and go to state 16
    atom                           shift and go to state 27

state 46

    (21) equality_statement -> equality_statement NEQ . relational_statement
    (22) relational_statement -> . add_statement
    (23) relational_statement -> . relational_statement LT add_statement
    (24) relational_statement -> . relational_statement GT add_statement
    (25) relational_statement -> . relational_statement LTEQ add_statement
    (26) relational_statement -> . relational_statement GTEQ add_statement
    (27) add_statement -> . multiply_statement
    (28) add_statement -> . add_statement PLUS multiply_statement
    (29) add_statement -> . add_statement MINUS multiply_statement
    (30) multiply_statement -> . unary_statement
    (31) multiply_statement -> . multiply_statement TIMES unary_statement
    (32) multiply_statement -> . multiply_statement DIVIDE unary_statement
    (33) multiply_statement -> . multiply_statement MOD unary_statement
    (34) unary_statement -> . exponent
    (35) unary_statement -> . MINUS unary_statement
    (36) unary_statement -> . NOT unary_statement
    (37) exponent -> . term
    (38) exponent -> . term POWER unary_statement
    (39) term -> . IDENTIFIER
    (40) term -> . atom
    (41) term -> . LPAREN expression RPAREN
    (42) atom -> . INTEGER
    (43) atom -> . FLOAT
    (44) atom -> . STRING
    (45) atom -> . TRUE
    (46) atom -> . FALSE
    (47) atom -> . LBRACKET elements RBRACKET
    (48) atom -> . IDENTIFIER LBRACKET INTEGER RBRACKET

    MINUS           shift and go to state 23
    NOT             shift and go to state 26
    IDENTIFIER      shift and go to state 57
    LPAREN          shift and go to state 13
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 29
    STRING          shift and go to state 30
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    LBRACKET        shift and go to state 33

    relational_statement           shift and go to state 73
    add_statement                  shift and go to state 21
    multiply_statement             shift and go to state 22
    unary_statement                shift and go to state 24
    exponent                       shift and go to state 25
    term                           shift and go to state 16
    atom                           shift and go to state 27

state 47

    (23) relational_statement -> relational_statement LT . add_statement
    (27) add_statement -> . multiply_statement
    (28) add_statement -> . add_statement PLUS multiply_statement
    (29) add_statement -> . add_statement MINUS multiply_statement
    (30) multiply_statement -> . unary_statement
    (31) multiply_statement -> . multiply_statement TIMES unary_statement
    (32) multiply_statement -> . multiply_statement DIVIDE unary_statement
    (33) multiply_statement -> . multiply_statement MOD unary_statement
    (34) unary_statement -> . exponent
    (35) unary_statement -> . MINUS unary_statement
    (36) unary_statement -> . NOT unary_statement
    (37) exponent -> . term
    (38) exponent -> . term POWER unary_statement
    (39) term -> . IDENTIFIER
    (40) term -> . atom
    (41) term -> . LPAREN expression RPAREN
    (42) atom -> . INTEGER
    (43) atom -> . FLOAT
    (44) atom -> . STRING
    (45) atom -> . TRUE
    (46) atom -> . FALSE
    (47) atom -> . LBRACKET elements RBRACKET
    (48) atom -> . IDENTIFIER LBRACKET INTEGER RBRACKET

    MINUS           shift and go to state 23
    NOT             shift and go to state 26
    IDENTIFIER      shift and go to state 57
    LPAREN          shift and go to state 13
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 29
    STRING          shift and go to state 30
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    LBRACKET        shift and go to state 33

    add_statement                  shift and go to state 74
    multiply_statement             shift and go to state 22
    unary_statement                shift and go to state 24
    exponent                       shift and go to state 25
    term                           shift and go to state 16
    atom                           shift and go to state 27

state 48

    (24) relational_statement -> relational_statement GT . add_statement
    (27) add_statement -> . multiply_statement
    (28) add_statement -> . add_statement PLUS multiply_statement
    (29) add_statement -> . add_statement MINUS multiply_statement
    (30) multiply_statement -> . unary_statement
    (31) multiply_statement -> . multiply_statement TIMES unary_statement
    (32) multiply_statement -> . multiply_statement DIVIDE unary_statement
    (33) multiply_statement -> . multiply_statement MOD unary_statement
    (34) unary_statement -> . exponent
    (35) unary_statement -> . MINUS unary_statement
    (36) unary_statement -> . NOT unary_statement
    (37) exponent -> . term
    (38) exponent -> . term POWER unary_statement
    (39) term -> . IDENTIFIER
    (40) term -> . atom
    (41) term -> . LPAREN expression RPAREN
    (42) atom -> . INTEGER
    (43) atom -> . FLOAT
    (44) atom -> . STRING
    (45) atom -> . TRUE
    (46) atom -> . FALSE
    (47) atom -> . LBRACKET elements RBRACKET
    (48) atom -> . IDENTIFIER LBRACKET INTEGER RBRACKET

    MINUS           shift and go to state 23
    NOT             shift and go to state 26
    IDENTIFIER      shift and go to state 57
    LPAREN          shift and go to state 13
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 29
    STRING          shift and go to state 30
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    LBRACKET        shift and go to state 33

    add_statement                  shift and go to state 75
    multiply_statement             shift and go to state 22
    unary_statement                shift and go to state 24
    exponent                       shift and go to state 25
    term                           shift and go to state 16
    atom                           shift and go to state 27

state 49

    (25) relational_statement -> relational_statement LTEQ . add_statement
    (27) add_statement -> . multiply_statement
    (28) add_statement -> . add_statement PLUS multiply_statement
    (29) add_statement -> . add_statement MINUS multiply_statement
    (30) multiply_statement -> . unary_statement
    (31) multiply_statement -> . multiply_statement TIMES unary_statement
    (32) multiply_statement -> . multiply_statement DIVIDE unary_statement
    (33) multiply_statement -> . multiply_statement MOD unary_statement
    (34) unary_statement -> . exponent
    (35) unary_statement -> . MINUS unary_statement
    (36) unary_statement -> . NOT unary_statement
    (37) exponent -> . term
    (38) exponent -> . term POWER unary_statement
    (39) term -> . IDENTIFIER
    (40) term -> . atom
    (41) term -> . LPAREN expression RPAREN
    (42) atom -> . INTEGER
    (43) atom -> . FLOAT
    (44) atom -> . STRING
    (45) atom -> . TRUE
    (46) atom -> . FALSE
    (47) atom -> . LBRACKET elements RBRACKET
    (48) atom -> . IDENTIFIER LBRACKET INTEGER RBRACKET

    MINUS           shift and go to state 23
    NOT             shift and go to state 26
    IDENTIFIER      shift and go to state 57
    LPAREN          shift and go to state 13
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 29
    STRING          shift and go to state 30
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    LBRACKET        shift and go to state 33

    add_statement                  shift and go to state 76
    multiply_statement             shift and go to state 22
    unary_statement                shift and go to state 24
    exponent                       shift and go to state 25
    term                           shift and go to state 16
    atom                           shift and go to state 27

state 50

    (26) relational_statement -> relational_statement GTEQ . add_statement
    (27) add_statement -> . multiply_statement
    (28) add_statement -> . add_statement PLUS multiply_statement
    (29) add_statement -> . add_statement MINUS multiply_statement
    (30) multiply_statement -> . unary_statement
    (31) multiply_statement -> . multiply_statement TIMES unary_statement
    (32) multiply_statement -> . multiply_statement DIVIDE unary_statement
    (33) multiply_statement -> . multiply_statement MOD unary_statement
    (34) unary_statement -> . exponent
    (35) unary_statement -> . MINUS unary_statement
    (36) unary_statement -> . NOT unary_statement
    (37) exponent -> . term
    (38) exponent -> . term POWER unary_statement
    (39) term -> . IDENTIFIER
    (40) term -> . atom
    (41) term -> . LPAREN expression RPAREN
    (42) atom -> . INTEGER
    (43) atom -> . FLOAT
    (44) atom -> . STRING
    (45) atom -> . TRUE
    (46) atom -> . FALSE
    (47) atom -> . LBRACKET elements RBRACKET
    (48) atom -> . IDENTIFIER LBRACKET INTEGER RBRACKET

    MINUS           shift and go to state 23
    NOT             shift and go to state 26
    IDENTIFIER      shift and go to state 57
    LPAREN          shift and go to state 13
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 29
    STRING          shift and go to state 30
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    LBRACKET        shift and go to state 33

    add_statement                  shift and go to state 77
    multiply_statement             shift and go to state 22
    unary_statement                shift and go to state 24
    exponent                       shift and go to state 25
    term                           shift and go to state 16
    atom                           shift and go to state 27

state 51

    (28) add_statement -> add_statement PLUS . multiply_statement
    (30) multiply_statement -> . unary_statement
    (31) multiply_statement -> . multiply_statement TIMES unary_statement
    (32) multiply_statement -> . multiply_statement DIVIDE unary_statement
    (33) multiply_statement -> . multiply_statement MOD unary_statement
    (34) unary_statement -> . exponent
    (35) unary_statement -> . MINUS unary_statement
    (36) unary_statement -> . NOT unary_statement
    (37) exponent -> . term
    (38) exponent -> . term POWER unary_statement
    (39) term -> . IDENTIFIER
    (40) term -> . atom
    (41) term -> . LPAREN expression RPAREN
    (42) atom -> . INTEGER
    (43) atom -> . FLOAT
    (44) atom -> . STRING
    (45) atom -> . TRUE
    (46) atom -> . FALSE
    (47) atom -> . LBRACKET elements RBRACKET
    (48) atom -> . IDENTIFIER LBRACKET INTEGER RBRACKET

    MINUS           shift and go to state 23
    NOT             shift and go to state 26
    IDENTIFIER      shift and go to state 57
    LPAREN          shift and go to state 13
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 29
    STRING          shift and go to state 30
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    LBRACKET        shift and go to state 33

    multiply_statement             shift and go to state 78
    unary_statement                shift and go to state 24
    exponent                       shift and go to state 25
    term                           shift and go to state 16
    atom                           shift and go to state 27

state 52

    (29) add_statement -> add_statement MINUS . multiply_statement
    (30) multiply_statement -> . unary_statement
    (31) multiply_statement -> . multiply_statement TIMES unary_statement
    (32) multiply_statement -> . multiply_statement DIVIDE unary_statement
    (33) multiply_statement -> . multiply_statement MOD unary_statement
    (34) unary_statement -> . exponent
    (35) unary_statement -> . MINUS unary_statement
    (36) unary_statement -> . NOT unary_statement
    (37) exponent -> . term
    (38) exponent -> . term POWER unary_statement
    (39) term -> . IDENTIFIER
    (40) term -> . atom
    (41) term -> . LPAREN expression RPAREN
    (42) atom -> . INTEGER
    (43) atom -> . FLOAT
    (44) atom -> . STRING
    (45) atom -> . TRUE
    (46) atom -> . FALSE
    (47) atom -> . LBRACKET elements RBRACKET
    (48) atom -> . IDENTIFIER LBRACKET INTEGER RBRACKET

    MINUS           shift and go to state 23
    NOT             shift and go to state 26
    IDENTIFIER      shift and go to state 57
    LPAREN          shift and go to state 13
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 29
    STRING          shift and go to state 30
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    LBRACKET        shift and go to state 33

    multiply_statement             shift and go to state 79
    unary_statement                shift and go to state 24
    exponent                       shift and go to state 25
    term                           shift and go to state 16
    atom                           shift and go to state 27

state 53

    (31) multiply_statement -> multiply_statement TIMES . unary_statement
    (34) unary_statement -> . exponent
    (35) unary_statement -> . MINUS unary_statement
    (36) unary_statement -> . NOT unary_statement
    (37) exponent -> . term
    (38) exponent -> . term POWER unary_statement
    (39) term -> . IDENTIFIER
    (40) term -> . atom
    (41) term -> . LPAREN expression RPAREN
    (42) atom -> . INTEGER
    (43) atom -> . FLOAT
    (44) atom -> . STRING
    (45) atom -> . TRUE
    (46) atom -> . FALSE
    (47) atom -> . LBRACKET elements RBRACKET
    (48) atom -> . IDENTIFIER LBRACKET INTEGER RBRACKET

    MINUS           shift and go to state 23
    NOT             shift and go to state 26
    IDENTIFIER      shift and go to state 57
    LPAREN          shift and go to state 13
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 29
    STRING          shift and go to state 30
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    LBRACKET        shift and go to state 33

    unary_statement                shift and go to state 80
    exponent                       shift and go to state 25
    term                           shift and go to state 16
    atom                           shift and go to state 27

state 54

    (32) multiply_statement -> multiply_statement DIVIDE . unary_statement
    (34) unary_statement -> . exponent
    (35) unary_statement -> . MINUS unary_statement
    (36) unary_statement -> . NOT unary_statement
    (37) exponent -> . term
    (38) exponent -> . term POWER unary_statement
    (39) term -> . IDENTIFIER
    (40) term -> . atom
    (41) term -> . LPAREN expression RPAREN
    (42) atom -> . INTEGER
    (43) atom -> . FLOAT
    (44) atom -> . STRING
    (45) atom -> . TRUE
    (46) atom -> . FALSE
    (47) atom -> . LBRACKET elements RBRACKET
    (48) atom -> . IDENTIFIER LBRACKET INTEGER RBRACKET

    MINUS           shift and go to state 23
    NOT             shift and go to state 26
    IDENTIFIER      shift and go to state 57
    LPAREN          shift and go to state 13
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 29
    STRING          shift and go to state 30
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    LBRACKET        shift and go to state 33

    unary_statement                shift and go to state 81
    exponent                       shift and go to state 25
    term                           shift and go to state 16
    atom                           shift and go to state 27

state 55

    (33) multiply_statement -> multiply_statement MOD . unary_statement
    (34) unary_statement -> . exponent
    (35) unary_statement -> . MINUS unary_statement
    (36) unary_statement -> . NOT unary_statement
    (37) exponent -> . term
    (38) exponent -> . term POWER unary_statement
    (39) term -> . IDENTIFIER
    (40) term -> . atom
    (41) term -> . LPAREN expression RPAREN
    (42) atom -> . INTEGER
    (43) atom -> . FLOAT
    (44) atom -> . STRING
    (45) atom -> . TRUE
    (46) atom -> . FALSE
    (47) atom -> . LBRACKET elements RBRACKET
    (48) atom -> . IDENTIFIER LBRACKET INTEGER RBRACKET

    MINUS           shift and go to state 23
    NOT             shift and go to state 26
    IDENTIFIER      shift and go to state 57
    LPAREN          shift and go to state 13
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 29
    STRING          shift and go to state 30
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    LBRACKET        shift and go to state 33

    unary_statement                shift and go to state 82
    exponent                       shift and go to state 25
    term                           shift and go to state 16
    atom                           shift and go to state 27

state 56

    (35) unary_statement -> MINUS unary_statement .

    TIMES           reduce using rule 35 (unary_statement -> MINUS unary_statement .)
    DIVIDE          reduce using rule 35 (unary_statement -> MINUS unary_statement .)
    MOD             reduce using rule 35 (unary_statement -> MINUS unary_statement .)
    PLUS            reduce using rule 35 (unary_statement -> MINUS unary_statement .)
    MINUS           reduce using rule 35 (unary_statement -> MINUS unary_statement .)
    LT              reduce using rule 35 (unary_statement -> MINUS unary_statement .)
    GT              reduce using rule 35 (unary_statement -> MINUS unary_statement .)
    LTEQ            reduce using rule 35 (unary_statement -> MINUS unary_statement .)
    GTEQ            reduce using rule 35 (unary_statement -> MINUS unary_statement .)
    EQ              reduce using rule 35 (unary_statement -> MINUS unary_statement .)
    NEQ             reduce using rule 35 (unary_statement -> MINUS unary_statement .)
    AND             reduce using rule 35 (unary_statement -> MINUS unary_statement .)
    OR              reduce using rule 35 (unary_statement -> MINUS unary_statement .)
    $end            reduce using rule 35 (unary_statement -> MINUS unary_statement .)
    COLON           reduce using rule 35 (unary_statement -> MINUS unary_statement .)
    COMMA           reduce using rule 35 (unary_statement -> MINUS unary_statement .)
    RPAREN          reduce using rule 35 (unary_statement -> MINUS unary_statement .)
    ENDWHILE        reduce using rule 35 (unary_statement -> MINUS unary_statement .)
    ENDIF           reduce using rule 35 (unary_statement -> MINUS unary_statement .)
    ENDFOR          reduce using rule 35 (unary_statement -> MINUS unary_statement .)


state 57

    (39) term -> IDENTIFIER .
    (48) atom -> IDENTIFIER . LBRACKET INTEGER RBRACKET

    POWER           reduce using rule 39 (term -> IDENTIFIER .)
    TIMES           reduce using rule 39 (term -> IDENTIFIER .)
    DIVIDE          reduce using rule 39 (term -> IDENTIFIER .)
    MOD             reduce using rule 39 (term -> IDENTIFIER .)
    PLUS            reduce using rule 39 (term -> IDENTIFIER .)
    MINUS           reduce using rule 39 (term -> IDENTIFIER .)
    LT              reduce using rule 39 (term -> IDENTIFIER .)
    GT              reduce using rule 39 (term -> IDENTIFIER .)
    LTEQ            reduce using rule 39 (term -> IDENTIFIER .)
    GTEQ            reduce using rule 39 (term -> IDENTIFIER .)
    EQ              reduce using rule 39 (term -> IDENTIFIER .)
    NEQ             reduce using rule 39 (term -> IDENTIFIER .)
    AND             reduce using rule 39 (term -> IDENTIFIER .)
    OR              reduce using rule 39 (term -> IDENTIFIER .)
    $end            reduce using rule 39 (term -> IDENTIFIER .)
    COLON           reduce using rule 39 (term -> IDENTIFIER .)
    COMMA           reduce using rule 39 (term -> IDENTIFIER .)
    RPAREN          reduce using rule 39 (term -> IDENTIFIER .)
    ENDWHILE        reduce using rule 39 (term -> IDENTIFIER .)
    ENDIF           reduce using rule 39 (term -> IDENTIFIER .)
    ENDFOR          reduce using rule 39 (term -> IDENTIFIER .)
    LBRACKET        shift and go to state 40


state 58

    (36) unary_statement -> NOT unary_statement .

    TIMES           reduce using rule 36 (unary_statement -> NOT unary_statement .)
    DIVIDE          reduce using rule 36 (unary_statement -> NOT unary_statement .)
    MOD             reduce using rule 36 (unary_statement -> NOT unary_statement .)
    PLUS            reduce using rule 36 (unary_statement -> NOT unary_statement .)
    MINUS           reduce using rule 36 (unary_statement -> NOT unary_statement .)
    LT              reduce using rule 36 (unary_statement -> NOT unary_statement .)
    GT              reduce using rule 36 (unary_statement -> NOT unary_statement .)
    LTEQ            reduce using rule 36 (unary_statement -> NOT unary_statement .)
    GTEQ            reduce using rule 36 (unary_statement -> NOT unary_statement .)
    EQ              reduce using rule 36 (unary_statement -> NOT unary_statement .)
    NEQ             reduce using rule 36 (unary_statement -> NOT unary_statement .)
    AND             reduce using rule 36 (unary_statement -> NOT unary_statement .)
    OR              reduce using rule 36 (unary_statement -> NOT unary_statement .)
    $end            reduce using rule 36 (unary_statement -> NOT unary_statement .)
    COLON           reduce using rule 36 (unary_statement -> NOT unary_statement .)
    COMMA           reduce using rule 36 (unary_statement -> NOT unary_statement .)
    RPAREN          reduce using rule 36 (unary_statement -> NOT unary_statement .)
    ENDWHILE        reduce using rule 36 (unary_statement -> NOT unary_statement .)
    ENDIF           reduce using rule 36 (unary_statement -> NOT unary_statement .)
    ENDFOR          reduce using rule 36 (unary_statement -> NOT unary_statement .)


state 59

    (47) atom -> LBRACKET elements . RBRACKET
    (49) elements -> elements . INTEGER
    (50) elements -> elements . FLOAT

    RBRACKET        shift and go to state 83
    INTEGER         shift and go to state 84
    FLOAT           shift and go to state 85


state 60

    (7) iterative_statement -> WHILE expression COLON . start ENDWHILE
    (1) start -> . code_entity
    (2) code_entity -> . iterative_statement
    (3) code_entity -> . conditional_statement
    (4) code_entity -> . expression
    (5) code_entity -> . input_function
    (6) code_entity -> . output_function
    (7) iterative_statement -> . WHILE expression COLON start ENDWHILE
    (8) iterative_statement -> . FOR expression COMMA expression COMMA expression COLON start ENDFOR
    (9) conditional_statement -> . IF expression then_statement ENDIF
    (12) expression -> . assignment_statement
    (52) input_function -> . INPUT LPAREN IDENTIFIER RPAREN
    (53) output_function -> . PRINT LPAREN term RPAREN
    (13) assignment_statement -> . or_statement
    (14) assignment_statement -> . IDENTIFIER EQUALS or_statement
    (15) or_statement -> . and_statement
    (16) or_statement -> . or_statement OR and_statement
    (17) and_statement -> . equality_statement
    (18) and_statement -> . and_statement AND equality_statement
    (19) equality_statement -> . relational_statement
    (20) equality_statement -> . equality_statement EQ relational_statement
    (21) equality_statement -> . equality_statement NEQ relational_statement
    (22) relational_statement -> . add_statement
    (23) relational_statement -> . relational_statement LT add_statement
    (24) relational_statement -> . relational_statement GT add_statement
    (25) relational_statement -> . relational_statement LTEQ add_statement
    (26) relational_statement -> . relational_statement GTEQ add_statement
    (27) add_statement -> . multiply_statement
    (28) add_statement -> . add_statement PLUS multiply_statement
    (29) add_statement -> . add_statement MINUS multiply_statement
    (30) multiply_statement -> . unary_statement
    (31) multiply_statement -> . multiply_statement TIMES unary_statement
    (32) multiply_statement -> . multiply_statement DIVIDE unary_statement
    (33) multiply_statement -> . multiply_statement MOD unary_statement
    (34) unary_statement -> . exponent
    (35) unary_statement -> . MINUS unary_statement
    (36) unary_statement -> . NOT unary_statement
    (37) exponent -> . term
    (38) exponent -> . term POWER unary_statement
    (39) term -> . IDENTIFIER
    (40) term -> . atom
    (41) term -> . LPAREN expression RPAREN
    (42) atom -> . INTEGER
    (43) atom -> . FLOAT
    (44) atom -> . STRING
    (45) atom -> . TRUE
    (46) atom -> . FALSE
    (47) atom -> . LBRACKET elements RBRACKET
    (48) atom -> . IDENTIFIER LBRACKET INTEGER RBRACKET

    WHILE           shift and go to state 8
    FOR             shift and go to state 9
    IF              shift and go to state 10
    INPUT           shift and go to state 12
    PRINT           shift and go to state 15
    IDENTIFIER      shift and go to state 14
    MINUS           shift and go to state 23
    NOT             shift and go to state 26
    LPAREN          shift and go to state 13
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 29
    STRING          shift and go to state 30
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    LBRACKET        shift and go to state 33

    expression                     shift and go to state 5
    start                          shift and go to state 86
    code_entity                    shift and go to state 2
    iterative_statement            shift and go to state 3
    conditional_statement          shift and go to state 4
    input_function                 shift and go to state 6
    output_function                shift and go to state 7
    assignment_statement           shift and go to state 11
    term                           shift and go to state 16
    or_statement                   shift and go to state 17
    and_statement                  shift and go to state 18
    equality_statement             shift and go to state 19
    relational_statement           shift and go to state 20
    add_statement                  shift and go to state 21
    multiply_statement             shift and go to state 22
    unary_statement                shift and go to state 24
    exponent                       shift and go to state 25
    atom                           shift and go to state 27

state 61

    (8) iterative_statement -> FOR expression COMMA . expression COMMA expression COLON start ENDFOR
    (12) expression -> . assignment_statement
    (13) assignment_statement -> . or_statement
    (14) assignment_statement -> . IDENTIFIER EQUALS or_statement
    (15) or_statement -> . and_statement
    (16) or_statement -> . or_statement OR and_statement
    (17) and_statement -> . equality_statement
    (18) and_statement -> . and_statement AND equality_statement
    (19) equality_statement -> . relational_statement
    (20) equality_statement -> . equality_statement EQ relational_statement
    (21) equality_statement -> . equality_statement NEQ relational_statement
    (22) relational_statement -> . add_statement
    (23) relational_statement -> . relational_statement LT add_statement
    (24) relational_statement -> . relational_statement GT add_statement
    (25) relational_statement -> . relational_statement LTEQ add_statement
    (26) relational_statement -> . relational_statement GTEQ add_statement
    (27) add_statement -> . multiply_statement
    (28) add_statement -> . add_statement PLUS multiply_statement
    (29) add_statement -> . add_statement MINUS multiply_statement
    (30) multiply_statement -> . unary_statement
    (31) multiply_statement -> . multiply_statement TIMES unary_statement
    (32) multiply_statement -> . multiply_statement DIVIDE unary_statement
    (33) multiply_statement -> . multiply_statement MOD unary_statement
    (34) unary_statement -> . exponent
    (35) unary_statement -> . MINUS unary_statement
    (36) unary_statement -> . NOT unary_statement
    (37) exponent -> . term
    (38) exponent -> . term POWER unary_statement
    (39) term -> . IDENTIFIER
    (40) term -> . atom
    (41) term -> . LPAREN expression RPAREN
    (42) atom -> . INTEGER
    (43) atom -> . FLOAT
    (44) atom -> . STRING
    (45) atom -> . TRUE
    (46) atom -> . FALSE
    (47) atom -> . LBRACKET elements RBRACKET
    (48) atom -> . IDENTIFIER LBRACKET INTEGER RBRACKET

    IDENTIFIER      shift and go to state 14
    MINUS           shift and go to state 23
    NOT             shift and go to state 26
    LPAREN          shift and go to state 13
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 29
    STRING          shift and go to state 30
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    LBRACKET        shift and go to state 33

    expression                     shift and go to state 87
    assignment_statement           shift and go to state 11
    or_statement                   shift and go to state 17
    and_statement                  shift and go to state 18
    equality_statement             shift and go to state 19
    relational_statement           shift and go to state 20
    add_statement                  shift and go to state 21
    multiply_statement             shift and go to state 22
    unary_statement                shift and go to state 24
    exponent                       shift and go to state 25
    term                           shift and go to state 16
    atom                           shift and go to state 27

state 62

    (9) conditional_statement -> IF expression then_statement . ENDIF

    ENDIF           shift and go to state 88


state 63

    (10) then_statement -> COLON . start
    (1) start -> . code_entity
    (2) code_entity -> . iterative_statement
    (3) code_entity -> . conditional_statement
    (4) code_entity -> . expression
    (5) code_entity -> . input_function
    (6) code_entity -> . output_function
    (7) iterative_statement -> . WHILE expression COLON start ENDWHILE
    (8) iterative_statement -> . FOR expression COMMA expression COMMA expression COLON start ENDFOR
    (9) conditional_statement -> . IF expression then_statement ENDIF
    (12) expression -> . assignment_statement
    (52) input_function -> . INPUT LPAREN IDENTIFIER RPAREN
    (53) output_function -> . PRINT LPAREN term RPAREN
    (13) assignment_statement -> . or_statement
    (14) assignment_statement -> . IDENTIFIER EQUALS or_statement
    (15) or_statement -> . and_statement
    (16) or_statement -> . or_statement OR and_statement
    (17) and_statement -> . equality_statement
    (18) and_statement -> . and_statement AND equality_statement
    (19) equality_statement -> . relational_statement
    (20) equality_statement -> . equality_statement EQ relational_statement
    (21) equality_statement -> . equality_statement NEQ relational_statement
    (22) relational_statement -> . add_statement
    (23) relational_statement -> . relational_statement LT add_statement
    (24) relational_statement -> . relational_statement GT add_statement
    (25) relational_statement -> . relational_statement LTEQ add_statement
    (26) relational_statement -> . relational_statement GTEQ add_statement
    (27) add_statement -> . multiply_statement
    (28) add_statement -> . add_statement PLUS multiply_statement
    (29) add_statement -> . add_statement MINUS multiply_statement
    (30) multiply_statement -> . unary_statement
    (31) multiply_statement -> . multiply_statement TIMES unary_statement
    (32) multiply_statement -> . multiply_statement DIVIDE unary_statement
    (33) multiply_statement -> . multiply_statement MOD unary_statement
    (34) unary_statement -> . exponent
    (35) unary_statement -> . MINUS unary_statement
    (36) unary_statement -> . NOT unary_statement
    (37) exponent -> . term
    (38) exponent -> . term POWER unary_statement
    (39) term -> . IDENTIFIER
    (40) term -> . atom
    (41) term -> . LPAREN expression RPAREN
    (42) atom -> . INTEGER
    (43) atom -> . FLOAT
    (44) atom -> . STRING
    (45) atom -> . TRUE
    (46) atom -> . FALSE
    (47) atom -> . LBRACKET elements RBRACKET
    (48) atom -> . IDENTIFIER LBRACKET INTEGER RBRACKET

    WHILE           shift and go to state 8
    FOR             shift and go to state 9
    IF              shift and go to state 10
    INPUT           shift and go to state 12
    PRINT           shift and go to state 15
    IDENTIFIER      shift and go to state 14
    MINUS           shift and go to state 23
    NOT             shift and go to state 26
    LPAREN          shift and go to state 13
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 29
    STRING          shift and go to state 30
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    LBRACKET        shift and go to state 33

    start                          shift and go to state 89
    code_entity                    shift and go to state 2
    iterative_statement            shift and go to state 3
    conditional_statement          shift and go to state 4
    expression                     shift and go to state 5
    input_function                 shift and go to state 6
    output_function                shift and go to state 7
    assignment_statement           shift and go to state 11
    term                           shift and go to state 16
    or_statement                   shift and go to state 17
    and_statement                  shift and go to state 18
    equality_statement             shift and go to state 19
    relational_statement           shift and go to state 20
    add_statement                  shift and go to state 21
    multiply_statement             shift and go to state 22
    unary_statement                shift and go to state 24
    exponent                       shift and go to state 25
    atom                           shift and go to state 27

state 64

    (52) input_function -> INPUT LPAREN IDENTIFIER . RPAREN

    RPAREN          shift and go to state 90


state 65

    (41) term -> LPAREN expression RPAREN .

    POWER           reduce using rule 41 (term -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 41 (term -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 41 (term -> LPAREN expression RPAREN .)
    MOD             reduce using rule 41 (term -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 41 (term -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 41 (term -> LPAREN expression RPAREN .)
    LT              reduce using rule 41 (term -> LPAREN expression RPAREN .)
    GT              reduce using rule 41 (term -> LPAREN expression RPAREN .)
    LTEQ            reduce using rule 41 (term -> LPAREN expression RPAREN .)
    GTEQ            reduce using rule 41 (term -> LPAREN expression RPAREN .)
    EQ              reduce using rule 41 (term -> LPAREN expression RPAREN .)
    NEQ             reduce using rule 41 (term -> LPAREN expression RPAREN .)
    AND             reduce using rule 41 (term -> LPAREN expression RPAREN .)
    OR              reduce using rule 41 (term -> LPAREN expression RPAREN .)
    $end            reduce using rule 41 (term -> LPAREN expression RPAREN .)
    COLON           reduce using rule 41 (term -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 41 (term -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 41 (term -> LPAREN expression RPAREN .)
    ENDWHILE        reduce using rule 41 (term -> LPAREN expression RPAREN .)
    ENDIF           reduce using rule 41 (term -> LPAREN expression RPAREN .)
    ENDFOR          reduce using rule 41 (term -> LPAREN expression RPAREN .)


state 66

    (14) assignment_statement -> IDENTIFIER EQUALS or_statement .
    (16) or_statement -> or_statement . OR and_statement

    $end            reduce using rule 14 (assignment_statement -> IDENTIFIER EQUALS or_statement .)
    COLON           reduce using rule 14 (assignment_statement -> IDENTIFIER EQUALS or_statement .)
    COMMA           reduce using rule 14 (assignment_statement -> IDENTIFIER EQUALS or_statement .)
    RPAREN          reduce using rule 14 (assignment_statement -> IDENTIFIER EQUALS or_statement .)
    ENDWHILE        reduce using rule 14 (assignment_statement -> IDENTIFIER EQUALS or_statement .)
    ENDIF           reduce using rule 14 (assignment_statement -> IDENTIFIER EQUALS or_statement .)
    ENDFOR          reduce using rule 14 (assignment_statement -> IDENTIFIER EQUALS or_statement .)
    OR              shift and go to state 43


state 67

    (48) atom -> IDENTIFIER LBRACKET INTEGER . RBRACKET

    RBRACKET        shift and go to state 91


state 68

    (53) output_function -> PRINT LPAREN term . RPAREN

    RPAREN          shift and go to state 92


state 69

    (38) exponent -> term POWER unary_statement .

    TIMES           reduce using rule 38 (exponent -> term POWER unary_statement .)
    DIVIDE          reduce using rule 38 (exponent -> term POWER unary_statement .)
    MOD             reduce using rule 38 (exponent -> term POWER unary_statement .)
    PLUS            reduce using rule 38 (exponent -> term POWER unary_statement .)
    MINUS           reduce using rule 38 (exponent -> term POWER unary_statement .)
    LT              reduce using rule 38 (exponent -> term POWER unary_statement .)
    GT              reduce using rule 38 (exponent -> term POWER unary_statement .)
    LTEQ            reduce using rule 38 (exponent -> term POWER unary_statement .)
    GTEQ            reduce using rule 38 (exponent -> term POWER unary_statement .)
    EQ              reduce using rule 38 (exponent -> term POWER unary_statement .)
    NEQ             reduce using rule 38 (exponent -> term POWER unary_statement .)
    AND             reduce using rule 38 (exponent -> term POWER unary_statement .)
    OR              reduce using rule 38 (exponent -> term POWER unary_statement .)
    $end            reduce using rule 38 (exponent -> term POWER unary_statement .)
    COLON           reduce using rule 38 (exponent -> term POWER unary_statement .)
    COMMA           reduce using rule 38 (exponent -> term POWER unary_statement .)
    RPAREN          reduce using rule 38 (exponent -> term POWER unary_statement .)
    ENDWHILE        reduce using rule 38 (exponent -> term POWER unary_statement .)
    ENDIF           reduce using rule 38 (exponent -> term POWER unary_statement .)
    ENDFOR          reduce using rule 38 (exponent -> term POWER unary_statement .)


state 70

    (16) or_statement -> or_statement OR and_statement .
    (18) and_statement -> and_statement . AND equality_statement

    OR              reduce using rule 16 (or_statement -> or_statement OR and_statement .)
    $end            reduce using rule 16 (or_statement -> or_statement OR and_statement .)
    COLON           reduce using rule 16 (or_statement -> or_statement OR and_statement .)
    COMMA           reduce using rule 16 (or_statement -> or_statement OR and_statement .)
    RPAREN          reduce using rule 16 (or_statement -> or_statement OR and_statement .)
    ENDWHILE        reduce using rule 16 (or_statement -> or_statement OR and_statement .)
    ENDIF           reduce using rule 16 (or_statement -> or_statement OR and_statement .)
    ENDFOR          reduce using rule 16 (or_statement -> or_statement OR and_statement .)
    AND             shift and go to state 44


state 71

    (18) and_statement -> and_statement AND equality_statement .
    (20) equality_statement -> equality_statement . EQ relational_statement
    (21) equality_statement -> equality_statement . NEQ relational_statement

    AND             reduce using rule 18 (and_statement -> and_statement AND equality_statement .)
    OR              reduce using rule 18 (and_statement -> and_statement AND equality_statement .)
    $end            reduce using rule 18 (and_statement -> and_statement AND equality_statement .)
    COLON           reduce using rule 18 (and_statement -> and_statement AND equality_statement .)
    COMMA           reduce using rule 18 (and_statement -> and_statement AND equality_statement .)
    RPAREN          reduce using rule 18 (and_statement -> and_statement AND equality_statement .)
    ENDWHILE        reduce using rule 18 (and_statement -> and_statement AND equality_statement .)
    ENDIF           reduce using rule 18 (and_statement -> and_statement AND equality_statement .)
    ENDFOR          reduce using rule 18 (and_statement -> and_statement AND equality_statement .)
    EQ              shift and go to state 45
    NEQ             shift and go to state 46


state 72

    (20) equality_statement -> equality_statement EQ relational_statement .
    (23) relational_statement -> relational_statement . LT add_statement
    (24) relational_statement -> relational_statement . GT add_statement
    (25) relational_statement -> relational_statement . LTEQ add_statement
    (26) relational_statement -> relational_statement . GTEQ add_statement

    EQ              reduce using rule 20 (equality_statement -> equality_statement EQ relational_statement .)
    NEQ             reduce using rule 20 (equality_statement -> equality_statement EQ relational_statement .)
    AND             reduce using rule 20 (equality_statement -> equality_statement EQ relational_statement .)
    OR              reduce using rule 20 (equality_statement -> equality_statement EQ relational_statement .)
    $end            reduce using rule 20 (equality_statement -> equality_statement EQ relational_statement .)
    COLON           reduce using rule 20 (equality_statement -> equality_statement EQ relational_statement .)
    COMMA           reduce using rule 20 (equality_statement -> equality_statement EQ relational_statement .)
    RPAREN          reduce using rule 20 (equality_statement -> equality_statement EQ relational_statement .)
    ENDWHILE        reduce using rule 20 (equality_statement -> equality_statement EQ relational_statement .)
    ENDIF           reduce using rule 20 (equality_statement -> equality_statement EQ relational_statement .)
    ENDFOR          reduce using rule 20 (equality_statement -> equality_statement EQ relational_statement .)
    LT              shift and go to state 47
    GT              shift and go to state 48
    LTEQ            shift and go to state 49
    GTEQ            shift and go to state 50


state 73

    (21) equality_statement -> equality_statement NEQ relational_statement .
    (23) relational_statement -> relational_statement . LT add_statement
    (24) relational_statement -> relational_statement . GT add_statement
    (25) relational_statement -> relational_statement . LTEQ add_statement
    (26) relational_statement -> relational_statement . GTEQ add_statement

    EQ              reduce using rule 21 (equality_statement -> equality_statement NEQ relational_statement .)
    NEQ             reduce using rule 21 (equality_statement -> equality_statement NEQ relational_statement .)
    AND             reduce using rule 21 (equality_statement -> equality_statement NEQ relational_statement .)
    OR              reduce using rule 21 (equality_statement -> equality_statement NEQ relational_statement .)
    $end            reduce using rule 21 (equality_statement -> equality_statement NEQ relational_statement .)
    COLON           reduce using rule 21 (equality_statement -> equality_statement NEQ relational_statement .)
    COMMA           reduce using rule 21 (equality_statement -> equality_statement NEQ relational_statement .)
    RPAREN          reduce using rule 21 (equality_statement -> equality_statement NEQ relational_statement .)
    ENDWHILE        reduce using rule 21 (equality_statement -> equality_statement NEQ relational_statement .)
    ENDIF           reduce using rule 21 (equality_statement -> equality_statement NEQ relational_statement .)
    ENDFOR          reduce using rule 21 (equality_statement -> equality_statement NEQ relational_statement .)
    LT              shift and go to state 47
    GT              shift and go to state 48
    LTEQ            shift and go to state 49
    GTEQ            shift and go to state 50


state 74

    (23) relational_statement -> relational_statement LT add_statement .
    (28) add_statement -> add_statement . PLUS multiply_statement
    (29) add_statement -> add_statement . MINUS multiply_statement

    LT              reduce using rule 23 (relational_statement -> relational_statement LT add_statement .)
    GT              reduce using rule 23 (relational_statement -> relational_statement LT add_statement .)
    LTEQ            reduce using rule 23 (relational_statement -> relational_statement LT add_statement .)
    GTEQ            reduce using rule 23 (relational_statement -> relational_statement LT add_statement .)
    EQ              reduce using rule 23 (relational_statement -> relational_statement LT add_statement .)
    NEQ             reduce using rule 23 (relational_statement -> relational_statement LT add_statement .)
    AND             reduce using rule 23 (relational_statement -> relational_statement LT add_statement .)
    OR              reduce using rule 23 (relational_statement -> relational_statement LT add_statement .)
    $end            reduce using rule 23 (relational_statement -> relational_statement LT add_statement .)
    COLON           reduce using rule 23 (relational_statement -> relational_statement LT add_statement .)
    COMMA           reduce using rule 23 (relational_statement -> relational_statement LT add_statement .)
    RPAREN          reduce using rule 23 (relational_statement -> relational_statement LT add_statement .)
    ENDWHILE        reduce using rule 23 (relational_statement -> relational_statement LT add_statement .)
    ENDIF           reduce using rule 23 (relational_statement -> relational_statement LT add_statement .)
    ENDFOR          reduce using rule 23 (relational_statement -> relational_statement LT add_statement .)
    PLUS            shift and go to state 51
    MINUS           shift and go to state 52


state 75

    (24) relational_statement -> relational_statement GT add_statement .
    (28) add_statement -> add_statement . PLUS multiply_statement
    (29) add_statement -> add_statement . MINUS multiply_statement

    LT              reduce using rule 24 (relational_statement -> relational_statement GT add_statement .)
    GT              reduce using rule 24 (relational_statement -> relational_statement GT add_statement .)
    LTEQ            reduce using rule 24 (relational_statement -> relational_statement GT add_statement .)
    GTEQ            reduce using rule 24 (relational_statement -> relational_statement GT add_statement .)
    EQ              reduce using rule 24 (relational_statement -> relational_statement GT add_statement .)
    NEQ             reduce using rule 24 (relational_statement -> relational_statement GT add_statement .)
    AND             reduce using rule 24 (relational_statement -> relational_statement GT add_statement .)
    OR              reduce using rule 24 (relational_statement -> relational_statement GT add_statement .)
    $end            reduce using rule 24 (relational_statement -> relational_statement GT add_statement .)
    COLON           reduce using rule 24 (relational_statement -> relational_statement GT add_statement .)
    COMMA           reduce using rule 24 (relational_statement -> relational_statement GT add_statement .)
    RPAREN          reduce using rule 24 (relational_statement -> relational_statement GT add_statement .)
    ENDWHILE        reduce using rule 24 (relational_statement -> relational_statement GT add_statement .)
    ENDIF           reduce using rule 24 (relational_statement -> relational_statement GT add_statement .)
    ENDFOR          reduce using rule 24 (relational_statement -> relational_statement GT add_statement .)
    PLUS            shift and go to state 51
    MINUS           shift and go to state 52


state 76

    (25) relational_statement -> relational_statement LTEQ add_statement .
    (28) add_statement -> add_statement . PLUS multiply_statement
    (29) add_statement -> add_statement . MINUS multiply_statement

    LT              reduce using rule 25 (relational_statement -> relational_statement LTEQ add_statement .)
    GT              reduce using rule 25 (relational_statement -> relational_statement LTEQ add_statement .)
    LTEQ            reduce using rule 25 (relational_statement -> relational_statement LTEQ add_statement .)
    GTEQ            reduce using rule 25 (relational_statement -> relational_statement LTEQ add_statement .)
    EQ              reduce using rule 25 (relational_statement -> relational_statement LTEQ add_statement .)
    NEQ             reduce using rule 25 (relational_statement -> relational_statement LTEQ add_statement .)
    AND             reduce using rule 25 (relational_statement -> relational_statement LTEQ add_statement .)
    OR              reduce using rule 25 (relational_statement -> relational_statement LTEQ add_statement .)
    $end            reduce using rule 25 (relational_statement -> relational_statement LTEQ add_statement .)
    COLON           reduce using rule 25 (relational_statement -> relational_statement LTEQ add_statement .)
    COMMA           reduce using rule 25 (relational_statement -> relational_statement LTEQ add_statement .)
    RPAREN          reduce using rule 25 (relational_statement -> relational_statement LTEQ add_statement .)
    ENDWHILE        reduce using rule 25 (relational_statement -> relational_statement LTEQ add_statement .)
    ENDIF           reduce using rule 25 (relational_statement -> relational_statement LTEQ add_statement .)
    ENDFOR          reduce using rule 25 (relational_statement -> relational_statement LTEQ add_statement .)
    PLUS            shift and go to state 51
    MINUS           shift and go to state 52


state 77

    (26) relational_statement -> relational_statement GTEQ add_statement .
    (28) add_statement -> add_statement . PLUS multiply_statement
    (29) add_statement -> add_statement . MINUS multiply_statement

    LT              reduce using rule 26 (relational_statement -> relational_statement GTEQ add_statement .)
    GT              reduce using rule 26 (relational_statement -> relational_statement GTEQ add_statement .)
    LTEQ            reduce using rule 26 (relational_statement -> relational_statement GTEQ add_statement .)
    GTEQ            reduce using rule 26 (relational_statement -> relational_statement GTEQ add_statement .)
    EQ              reduce using rule 26 (relational_statement -> relational_statement GTEQ add_statement .)
    NEQ             reduce using rule 26 (relational_statement -> relational_statement GTEQ add_statement .)
    AND             reduce using rule 26 (relational_statement -> relational_statement GTEQ add_statement .)
    OR              reduce using rule 26 (relational_statement -> relational_statement GTEQ add_statement .)
    $end            reduce using rule 26 (relational_statement -> relational_statement GTEQ add_statement .)
    COLON           reduce using rule 26 (relational_statement -> relational_statement GTEQ add_statement .)
    COMMA           reduce using rule 26 (relational_statement -> relational_statement GTEQ add_statement .)
    RPAREN          reduce using rule 26 (relational_statement -> relational_statement GTEQ add_statement .)
    ENDWHILE        reduce using rule 26 (relational_statement -> relational_statement GTEQ add_statement .)
    ENDIF           reduce using rule 26 (relational_statement -> relational_statement GTEQ add_statement .)
    ENDFOR          reduce using rule 26 (relational_statement -> relational_statement GTEQ add_statement .)
    PLUS            shift and go to state 51
    MINUS           shift and go to state 52


state 78

    (28) add_statement -> add_statement PLUS multiply_statement .
    (31) multiply_statement -> multiply_statement . TIMES unary_statement
    (32) multiply_statement -> multiply_statement . DIVIDE unary_statement
    (33) multiply_statement -> multiply_statement . MOD unary_statement

    PLUS            reduce using rule 28 (add_statement -> add_statement PLUS multiply_statement .)
    MINUS           reduce using rule 28 (add_statement -> add_statement PLUS multiply_statement .)
    LT              reduce using rule 28 (add_statement -> add_statement PLUS multiply_statement .)
    GT              reduce using rule 28 (add_statement -> add_statement PLUS multiply_statement .)
    LTEQ            reduce using rule 28 (add_statement -> add_statement PLUS multiply_statement .)
    GTEQ            reduce using rule 28 (add_statement -> add_statement PLUS multiply_statement .)
    EQ              reduce using rule 28 (add_statement -> add_statement PLUS multiply_statement .)
    NEQ             reduce using rule 28 (add_statement -> add_statement PLUS multiply_statement .)
    AND             reduce using rule 28 (add_statement -> add_statement PLUS multiply_statement .)
    OR              reduce using rule 28 (add_statement -> add_statement PLUS multiply_statement .)
    $end            reduce using rule 28 (add_statement -> add_statement PLUS multiply_statement .)
    COLON           reduce using rule 28 (add_statement -> add_statement PLUS multiply_statement .)
    COMMA           reduce using rule 28 (add_statement -> add_statement PLUS multiply_statement .)
    RPAREN          reduce using rule 28 (add_statement -> add_statement PLUS multiply_statement .)
    ENDWHILE        reduce using rule 28 (add_statement -> add_statement PLUS multiply_statement .)
    ENDIF           reduce using rule 28 (add_statement -> add_statement PLUS multiply_statement .)
    ENDFOR          reduce using rule 28 (add_statement -> add_statement PLUS multiply_statement .)
    TIMES           shift and go to state 53
    DIVIDE          shift and go to state 54
    MOD             shift and go to state 55


state 79

    (29) add_statement -> add_statement MINUS multiply_statement .
    (31) multiply_statement -> multiply_statement . TIMES unary_statement
    (32) multiply_statement -> multiply_statement . DIVIDE unary_statement
    (33) multiply_statement -> multiply_statement . MOD unary_statement

    PLUS            reduce using rule 29 (add_statement -> add_statement MINUS multiply_statement .)
    MINUS           reduce using rule 29 (add_statement -> add_statement MINUS multiply_statement .)
    LT              reduce using rule 29 (add_statement -> add_statement MINUS multiply_statement .)
    GT              reduce using rule 29 (add_statement -> add_statement MINUS multiply_statement .)
    LTEQ            reduce using rule 29 (add_statement -> add_statement MINUS multiply_statement .)
    GTEQ            reduce using rule 29 (add_statement -> add_statement MINUS multiply_statement .)
    EQ              reduce using rule 29 (add_statement -> add_statement MINUS multiply_statement .)
    NEQ             reduce using rule 29 (add_statement -> add_statement MINUS multiply_statement .)
    AND             reduce using rule 29 (add_statement -> add_statement MINUS multiply_statement .)
    OR              reduce using rule 29 (add_statement -> add_statement MINUS multiply_statement .)
    $end            reduce using rule 29 (add_statement -> add_statement MINUS multiply_statement .)
    COLON           reduce using rule 29 (add_statement -> add_statement MINUS multiply_statement .)
    COMMA           reduce using rule 29 (add_statement -> add_statement MINUS multiply_statement .)
    RPAREN          reduce using rule 29 (add_statement -> add_statement MINUS multiply_statement .)
    ENDWHILE        reduce using rule 29 (add_statement -> add_statement MINUS multiply_statement .)
    ENDIF           reduce using rule 29 (add_statement -> add_statement MINUS multiply_statement .)
    ENDFOR          reduce using rule 29 (add_statement -> add_statement MINUS multiply_statement .)
    TIMES           shift and go to state 53
    DIVIDE          shift and go to state 54
    MOD             shift and go to state 55


state 80

    (31) multiply_statement -> multiply_statement TIMES unary_statement .

    TIMES           reduce using rule 31 (multiply_statement -> multiply_statement TIMES unary_statement .)
    DIVIDE          reduce using rule 31 (multiply_statement -> multiply_statement TIMES unary_statement .)
    MOD             reduce using rule 31 (multiply_statement -> multiply_statement TIMES unary_statement .)
    PLUS            reduce using rule 31 (multiply_statement -> multiply_statement TIMES unary_statement .)
    MINUS           reduce using rule 31 (multiply_statement -> multiply_statement TIMES unary_statement .)
    LT              reduce using rule 31 (multiply_statement -> multiply_statement TIMES unary_statement .)
    GT              reduce using rule 31 (multiply_statement -> multiply_statement TIMES unary_statement .)
    LTEQ            reduce using rule 31 (multiply_statement -> multiply_statement TIMES unary_statement .)
    GTEQ            reduce using rule 31 (multiply_statement -> multiply_statement TIMES unary_statement .)
    EQ              reduce using rule 31 (multiply_statement -> multiply_statement TIMES unary_statement .)
    NEQ             reduce using rule 31 (multiply_statement -> multiply_statement TIMES unary_statement .)
    AND             reduce using rule 31 (multiply_statement -> multiply_statement TIMES unary_statement .)
    OR              reduce using rule 31 (multiply_statement -> multiply_statement TIMES unary_statement .)
    $end            reduce using rule 31 (multiply_statement -> multiply_statement TIMES unary_statement .)
    COLON           reduce using rule 31 (multiply_statement -> multiply_statement TIMES unary_statement .)
    COMMA           reduce using rule 31 (multiply_statement -> multiply_statement TIMES unary_statement .)
    RPAREN          reduce using rule 31 (multiply_statement -> multiply_statement TIMES unary_statement .)
    ENDWHILE        reduce using rule 31 (multiply_statement -> multiply_statement TIMES unary_statement .)
    ENDIF           reduce using rule 31 (multiply_statement -> multiply_statement TIMES unary_statement .)
    ENDFOR          reduce using rule 31 (multiply_statement -> multiply_statement TIMES unary_statement .)


state 81

    (32) multiply_statement -> multiply_statement DIVIDE unary_statement .

    TIMES           reduce using rule 32 (multiply_statement -> multiply_statement DIVIDE unary_statement .)
    DIVIDE          reduce using rule 32 (multiply_statement -> multiply_statement DIVIDE unary_statement .)
    MOD             reduce using rule 32 (multiply_statement -> multiply_statement DIVIDE unary_statement .)
    PLUS            reduce using rule 32 (multiply_statement -> multiply_statement DIVIDE unary_statement .)
    MINUS           reduce using rule 32 (multiply_statement -> multiply_statement DIVIDE unary_statement .)
    LT              reduce using rule 32 (multiply_statement -> multiply_statement DIVIDE unary_statement .)
    GT              reduce using rule 32 (multiply_statement -> multiply_statement DIVIDE unary_statement .)
    LTEQ            reduce using rule 32 (multiply_statement -> multiply_statement DIVIDE unary_statement .)
    GTEQ            reduce using rule 32 (multiply_statement -> multiply_statement DIVIDE unary_statement .)
    EQ              reduce using rule 32 (multiply_statement -> multiply_statement DIVIDE unary_statement .)
    NEQ             reduce using rule 32 (multiply_statement -> multiply_statement DIVIDE unary_statement .)
    AND             reduce using rule 32 (multiply_statement -> multiply_statement DIVIDE unary_statement .)
    OR              reduce using rule 32 (multiply_statement -> multiply_statement DIVIDE unary_statement .)
    $end            reduce using rule 32 (multiply_statement -> multiply_statement DIVIDE unary_statement .)
    COLON           reduce using rule 32 (multiply_statement -> multiply_statement DIVIDE unary_statement .)
    COMMA           reduce using rule 32 (multiply_statement -> multiply_statement DIVIDE unary_statement .)
    RPAREN          reduce using rule 32 (multiply_statement -> multiply_statement DIVIDE unary_statement .)
    ENDWHILE        reduce using rule 32 (multiply_statement -> multiply_statement DIVIDE unary_statement .)
    ENDIF           reduce using rule 32 (multiply_statement -> multiply_statement DIVIDE unary_statement .)
    ENDFOR          reduce using rule 32 (multiply_statement -> multiply_statement DIVIDE unary_statement .)


state 82

    (33) multiply_statement -> multiply_statement MOD unary_statement .

    TIMES           reduce using rule 33 (multiply_statement -> multiply_statement MOD unary_statement .)
    DIVIDE          reduce using rule 33 (multiply_statement -> multiply_statement MOD unary_statement .)
    MOD             reduce using rule 33 (multiply_statement -> multiply_statement MOD unary_statement .)
    PLUS            reduce using rule 33 (multiply_statement -> multiply_statement MOD unary_statement .)
    MINUS           reduce using rule 33 (multiply_statement -> multiply_statement MOD unary_statement .)
    LT              reduce using rule 33 (multiply_statement -> multiply_statement MOD unary_statement .)
    GT              reduce using rule 33 (multiply_statement -> multiply_statement MOD unary_statement .)
    LTEQ            reduce using rule 33 (multiply_statement -> multiply_statement MOD unary_statement .)
    GTEQ            reduce using rule 33 (multiply_statement -> multiply_statement MOD unary_statement .)
    EQ              reduce using rule 33 (multiply_statement -> multiply_statement MOD unary_statement .)
    NEQ             reduce using rule 33 (multiply_statement -> multiply_statement MOD unary_statement .)
    AND             reduce using rule 33 (multiply_statement -> multiply_statement MOD unary_statement .)
    OR              reduce using rule 33 (multiply_statement -> multiply_statement MOD unary_statement .)
    $end            reduce using rule 33 (multiply_statement -> multiply_statement MOD unary_statement .)
    COLON           reduce using rule 33 (multiply_statement -> multiply_statement MOD unary_statement .)
    COMMA           reduce using rule 33 (multiply_statement -> multiply_statement MOD unary_statement .)
    RPAREN          reduce using rule 33 (multiply_statement -> multiply_statement MOD unary_statement .)
    ENDWHILE        reduce using rule 33 (multiply_statement -> multiply_statement MOD unary_statement .)
    ENDIF           reduce using rule 33 (multiply_statement -> multiply_statement MOD unary_statement .)
    ENDFOR          reduce using rule 33 (multiply_statement -> multiply_statement MOD unary_statement .)


state 83

    (47) atom -> LBRACKET elements RBRACKET .

    POWER           reduce using rule 47 (atom -> LBRACKET elements RBRACKET .)
    TIMES           reduce using rule 47 (atom -> LBRACKET elements RBRACKET .)
    DIVIDE          reduce using rule 47 (atom -> LBRACKET elements RBRACKET .)
    MOD             reduce using rule 47 (atom -> LBRACKET elements RBRACKET .)
    PLUS            reduce using rule 47 (atom -> LBRACKET elements RBRACKET .)
    MINUS           reduce using rule 47 (atom -> LBRACKET elements RBRACKET .)
    LT              reduce using rule 47 (atom -> LBRACKET elements RBRACKET .)
    GT              reduce using rule 47 (atom -> LBRACKET elements RBRACKET .)
    LTEQ            reduce using rule 47 (atom -> LBRACKET elements RBRACKET .)
    GTEQ            reduce using rule 47 (atom -> LBRACKET elements RBRACKET .)
    EQ              reduce using rule 47 (atom -> LBRACKET elements RBRACKET .)
    NEQ             reduce using rule 47 (atom -> LBRACKET elements RBRACKET .)
    AND             reduce using rule 47 (atom -> LBRACKET elements RBRACKET .)
    OR              reduce using rule 47 (atom -> LBRACKET elements RBRACKET .)
    $end            reduce using rule 47 (atom -> LBRACKET elements RBRACKET .)
    COLON           reduce using rule 47 (atom -> LBRACKET elements RBRACKET .)
    COMMA           reduce using rule 47 (atom -> LBRACKET elements RBRACKET .)
    RPAREN          reduce using rule 47 (atom -> LBRACKET elements RBRACKET .)
    ENDWHILE        reduce using rule 47 (atom -> LBRACKET elements RBRACKET .)
    ENDIF           reduce using rule 47 (atom -> LBRACKET elements RBRACKET .)
    ENDFOR          reduce using rule 47 (atom -> LBRACKET elements RBRACKET .)


state 84

    (49) elements -> elements INTEGER .

    RBRACKET        reduce using rule 49 (elements -> elements INTEGER .)
    INTEGER         reduce using rule 49 (elements -> elements INTEGER .)
    FLOAT           reduce using rule 49 (elements -> elements INTEGER .)


state 85

    (50) elements -> elements FLOAT .

    RBRACKET        reduce using rule 50 (elements -> elements FLOAT .)
    INTEGER         reduce using rule 50 (elements -> elements FLOAT .)
    FLOAT           reduce using rule 50 (elements -> elements FLOAT .)


state 86

    (7) iterative_statement -> WHILE expression COLON start . ENDWHILE

    ENDWHILE        shift and go to state 93


state 87

    (8) iterative_statement -> FOR expression COMMA expression . COMMA expression COLON start ENDFOR

    COMMA           shift and go to state 94


state 88

    (9) conditional_statement -> IF expression then_statement ENDIF .

    $end            reduce using rule 9 (conditional_statement -> IF expression then_statement ENDIF .)
    ENDWHILE        reduce using rule 9 (conditional_statement -> IF expression then_statement ENDIF .)
    ENDIF           reduce using rule 9 (conditional_statement -> IF expression then_statement ENDIF .)
    ENDFOR          reduce using rule 9 (conditional_statement -> IF expression then_statement ENDIF .)


state 89

    (10) then_statement -> COLON start .

    ENDIF           reduce using rule 10 (then_statement -> COLON start .)


state 90

    (52) input_function -> INPUT LPAREN IDENTIFIER RPAREN .

    $end            reduce using rule 52 (input_function -> INPUT LPAREN IDENTIFIER RPAREN .)
    ENDWHILE        reduce using rule 52 (input_function -> INPUT LPAREN IDENTIFIER RPAREN .)
    ENDIF           reduce using rule 52 (input_function -> INPUT LPAREN IDENTIFIER RPAREN .)
    ENDFOR          reduce using rule 52 (input_function -> INPUT LPAREN IDENTIFIER RPAREN .)


state 91

    (48) atom -> IDENTIFIER LBRACKET INTEGER RBRACKET .

    POWER           reduce using rule 48 (atom -> IDENTIFIER LBRACKET INTEGER RBRACKET .)
    TIMES           reduce using rule 48 (atom -> IDENTIFIER LBRACKET INTEGER RBRACKET .)
    DIVIDE          reduce using rule 48 (atom -> IDENTIFIER LBRACKET INTEGER RBRACKET .)
    MOD             reduce using rule 48 (atom -> IDENTIFIER LBRACKET INTEGER RBRACKET .)
    PLUS            reduce using rule 48 (atom -> IDENTIFIER LBRACKET INTEGER RBRACKET .)
    MINUS           reduce using rule 48 (atom -> IDENTIFIER LBRACKET INTEGER RBRACKET .)
    LT              reduce using rule 48 (atom -> IDENTIFIER LBRACKET INTEGER RBRACKET .)
    GT              reduce using rule 48 (atom -> IDENTIFIER LBRACKET INTEGER RBRACKET .)
    LTEQ            reduce using rule 48 (atom -> IDENTIFIER LBRACKET INTEGER RBRACKET .)
    GTEQ            reduce using rule 48 (atom -> IDENTIFIER LBRACKET INTEGER RBRACKET .)
    EQ              reduce using rule 48 (atom -> IDENTIFIER LBRACKET INTEGER RBRACKET .)
    NEQ             reduce using rule 48 (atom -> IDENTIFIER LBRACKET INTEGER RBRACKET .)
    AND             reduce using rule 48 (atom -> IDENTIFIER LBRACKET INTEGER RBRACKET .)
    OR              reduce using rule 48 (atom -> IDENTIFIER LBRACKET INTEGER RBRACKET .)
    $end            reduce using rule 48 (atom -> IDENTIFIER LBRACKET INTEGER RBRACKET .)
    COLON           reduce using rule 48 (atom -> IDENTIFIER LBRACKET INTEGER RBRACKET .)
    COMMA           reduce using rule 48 (atom -> IDENTIFIER LBRACKET INTEGER RBRACKET .)
    RPAREN          reduce using rule 48 (atom -> IDENTIFIER LBRACKET INTEGER RBRACKET .)
    ENDWHILE        reduce using rule 48 (atom -> IDENTIFIER LBRACKET INTEGER RBRACKET .)
    ENDIF           reduce using rule 48 (atom -> IDENTIFIER LBRACKET INTEGER RBRACKET .)
    ENDFOR          reduce using rule 48 (atom -> IDENTIFIER LBRACKET INTEGER RBRACKET .)


state 92

    (53) output_function -> PRINT LPAREN term RPAREN .

    $end            reduce using rule 53 (output_function -> PRINT LPAREN term RPAREN .)
    ENDWHILE        reduce using rule 53 (output_function -> PRINT LPAREN term RPAREN .)
    ENDIF           reduce using rule 53 (output_function -> PRINT LPAREN term RPAREN .)
    ENDFOR          reduce using rule 53 (output_function -> PRINT LPAREN term RPAREN .)


state 93

    (7) iterative_statement -> WHILE expression COLON start ENDWHILE .

    $end            reduce using rule 7 (iterative_statement -> WHILE expression COLON start ENDWHILE .)
    ENDWHILE        reduce using rule 7 (iterative_statement -> WHILE expression COLON start ENDWHILE .)
    ENDIF           reduce using rule 7 (iterative_statement -> WHILE expression COLON start ENDWHILE .)
    ENDFOR          reduce using rule 7 (iterative_statement -> WHILE expression COLON start ENDWHILE .)


state 94

    (8) iterative_statement -> FOR expression COMMA expression COMMA . expression COLON start ENDFOR
    (12) expression -> . assignment_statement
    (13) assignment_statement -> . or_statement
    (14) assignment_statement -> . IDENTIFIER EQUALS or_statement
    (15) or_statement -> . and_statement
    (16) or_statement -> . or_statement OR and_statement
    (17) and_statement -> . equality_statement
    (18) and_statement -> . and_statement AND equality_statement
    (19) equality_statement -> . relational_statement
    (20) equality_statement -> . equality_statement EQ relational_statement
    (21) equality_statement -> . equality_statement NEQ relational_statement
    (22) relational_statement -> . add_statement
    (23) relational_statement -> . relational_statement LT add_statement
    (24) relational_statement -> . relational_statement GT add_statement
    (25) relational_statement -> . relational_statement LTEQ add_statement
    (26) relational_statement -> . relational_statement GTEQ add_statement
    (27) add_statement -> . multiply_statement
    (28) add_statement -> . add_statement PLUS multiply_statement
    (29) add_statement -> . add_statement MINUS multiply_statement
    (30) multiply_statement -> . unary_statement
    (31) multiply_statement -> . multiply_statement TIMES unary_statement
    (32) multiply_statement -> . multiply_statement DIVIDE unary_statement
    (33) multiply_statement -> . multiply_statement MOD unary_statement
    (34) unary_statement -> . exponent
    (35) unary_statement -> . MINUS unary_statement
    (36) unary_statement -> . NOT unary_statement
    (37) exponent -> . term
    (38) exponent -> . term POWER unary_statement
    (39) term -> . IDENTIFIER
    (40) term -> . atom
    (41) term -> . LPAREN expression RPAREN
    (42) atom -> . INTEGER
    (43) atom -> . FLOAT
    (44) atom -> . STRING
    (45) atom -> . TRUE
    (46) atom -> . FALSE
    (47) atom -> . LBRACKET elements RBRACKET
    (48) atom -> . IDENTIFIER LBRACKET INTEGER RBRACKET

    IDENTIFIER      shift and go to state 14
    MINUS           shift and go to state 23
    NOT             shift and go to state 26
    LPAREN          shift and go to state 13
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 29
    STRING          shift and go to state 30
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    LBRACKET        shift and go to state 33

    expression                     shift and go to state 95
    assignment_statement           shift and go to state 11
    or_statement                   shift and go to state 17
    and_statement                  shift and go to state 18
    equality_statement             shift and go to state 19
    relational_statement           shift and go to state 20
    add_statement                  shift and go to state 21
    multiply_statement             shift and go to state 22
    unary_statement                shift and go to state 24
    exponent                       shift and go to state 25
    term                           shift and go to state 16
    atom                           shift and go to state 27

state 95

    (8) iterative_statement -> FOR expression COMMA expression COMMA expression . COLON start ENDFOR

    COLON           shift and go to state 96


state 96

    (8) iterative_statement -> FOR expression COMMA expression COMMA expression COLON . start ENDFOR
    (1) start -> . code_entity
    (2) code_entity -> . iterative_statement
    (3) code_entity -> . conditional_statement
    (4) code_entity -> . expression
    (5) code_entity -> . input_function
    (6) code_entity -> . output_function
    (7) iterative_statement -> . WHILE expression COLON start ENDWHILE
    (8) iterative_statement -> . FOR expression COMMA expression COMMA expression COLON start ENDFOR
    (9) conditional_statement -> . IF expression then_statement ENDIF
    (12) expression -> . assignment_statement
    (52) input_function -> . INPUT LPAREN IDENTIFIER RPAREN
    (53) output_function -> . PRINT LPAREN term RPAREN
    (13) assignment_statement -> . or_statement
    (14) assignment_statement -> . IDENTIFIER EQUALS or_statement
    (15) or_statement -> . and_statement
    (16) or_statement -> . or_statement OR and_statement
    (17) and_statement -> . equality_statement
    (18) and_statement -> . and_statement AND equality_statement
    (19) equality_statement -> . relational_statement
    (20) equality_statement -> . equality_statement EQ relational_statement
    (21) equality_statement -> . equality_statement NEQ relational_statement
    (22) relational_statement -> . add_statement
    (23) relational_statement -> . relational_statement LT add_statement
    (24) relational_statement -> . relational_statement GT add_statement
    (25) relational_statement -> . relational_statement LTEQ add_statement
    (26) relational_statement -> . relational_statement GTEQ add_statement
    (27) add_statement -> . multiply_statement
    (28) add_statement -> . add_statement PLUS multiply_statement
    (29) add_statement -> . add_statement MINUS multiply_statement
    (30) multiply_statement -> . unary_statement
    (31) multiply_statement -> . multiply_statement TIMES unary_statement
    (32) multiply_statement -> . multiply_statement DIVIDE unary_statement
    (33) multiply_statement -> . multiply_statement MOD unary_statement
    (34) unary_statement -> . exponent
    (35) unary_statement -> . MINUS unary_statement
    (36) unary_statement -> . NOT unary_statement
    (37) exponent -> . term
    (38) exponent -> . term POWER unary_statement
    (39) term -> . IDENTIFIER
    (40) term -> . atom
    (41) term -> . LPAREN expression RPAREN
    (42) atom -> . INTEGER
    (43) atom -> . FLOAT
    (44) atom -> . STRING
    (45) atom -> . TRUE
    (46) atom -> . FALSE
    (47) atom -> . LBRACKET elements RBRACKET
    (48) atom -> . IDENTIFIER LBRACKET INTEGER RBRACKET

    WHILE           shift and go to state 8
    FOR             shift and go to state 9
    IF              shift and go to state 10
    INPUT           shift and go to state 12
    PRINT           shift and go to state 15
    IDENTIFIER      shift and go to state 14
    MINUS           shift and go to state 23
    NOT             shift and go to state 26
    LPAREN          shift and go to state 13
    INTEGER         shift and go to state 28
    FLOAT           shift and go to state 29
    STRING          shift and go to state 30
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    LBRACKET        shift and go to state 33

    expression                     shift and go to state 5
    start                          shift and go to state 97
    code_entity                    shift and go to state 2
    iterative_statement            shift and go to state 3
    conditional_statement          shift and go to state 4
    input_function                 shift and go to state 6
    output_function                shift and go to state 7
    assignment_statement           shift and go to state 11
    term                           shift and go to state 16
    or_statement                   shift and go to state 17
    and_statement                  shift and go to state 18
    equality_statement             shift and go to state 19
    relational_statement           shift and go to state 20
    add_statement                  shift and go to state 21
    multiply_statement             shift and go to state 22
    unary_statement                shift and go to state 24
    exponent                       shift and go to state 25
    atom                           shift and go to state 27

state 97

    (8) iterative_statement -> FOR expression COMMA expression COMMA expression COLON start . ENDFOR

    ENDFOR          shift and go to state 98


state 98

    (8) iterative_statement -> FOR expression COMMA expression COMMA expression COLON start ENDFOR .

    $end            reduce using rule 8 (iterative_statement -> FOR expression COMMA expression COMMA expression COLON start ENDFOR .)
    ENDWHILE        reduce using rule 8 (iterative_statement -> FOR expression COMMA expression COMMA expression COLON start ENDFOR .)
    ENDIF           reduce using rule 8 (iterative_statement -> FOR expression COMMA expression COMMA expression COLON start ENDFOR .)
    ENDFOR          reduce using rule 8 (iterative_statement -> FOR expression COMMA expression COMMA expression COLON start ENDFOR .)

