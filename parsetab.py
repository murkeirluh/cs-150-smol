
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSMINUSTIMESDIVIDEELSECOLONrightPOWERIDENTIFIER INTEGER FLOAT CHARACTER STRING COMMA COLON AND OR NOT PLUS MINUS TIMES DIVIDE EQUALS POWER MOD LPAREN RPAREN LBRACKET RBRACKET GT LT GTEQ LTEQ EQ NEQ IF ELSE ENDIF WHILE FOR ENDFOR ENDWHILE TRUE FALSE INPUT PRINTstart : code_entitycode_entity : iterative_statement\n                  | conditional_statement\n                  | expression\n                  | input_function\n                  | output_functioniterative_statement : WHILE expression COLON start ENDWHILEiterative_statement : FOR expression COMMA expression COMMA expression COLON start ENDFORconditional_statement : IF expression seen_exp COLON start seen_start ELSE seen_else start seen_start ENDIFconditional_statement : IF expression seen_exp COLON start seen_start ENDIFseen_exp : seen_else : seen_start : expression : assignment_statementassignment_statement : or_statementassignment_statement : IDENTIFIER EQUALS or_statementor_statement : and_statementor_statement : or_statement OR and_statementand_statement : equality_statementand_statement : and_statement AND equality_statementequality_statement : relational_statementequality_statement : equality_statement EQ relational_statement\n                          | equality_statement NEQ relational_statementrelational_statement : add_statementrelational_statement : relational_statement LT add_statement\n                            | relational_statement GT add_statement\n                            | relational_statement LTEQ add_statement\n                            | relational_statement GTEQ add_statementadd_statement : multiply_statementadd_statement : add_statement PLUS multiply_statement\n                     | add_statement MINUS multiply_statementmultiply_statement : unary_statementmultiply_statement : multiply_statement TIMES unary_statement\n                          | multiply_statement DIVIDE unary_statement\n                          | multiply_statement MOD unary_statementunary_statement : exponentunary_statement : MINUS unary_statement\n                       | NOT unary_statementexponent : termexponent : term POWER unary_statementterm : IDENTIFIERterm : atomterm : LPAREN expression RPARENatom : INTEGERatom : FLOATatom : CHARACTERatom : STRINGatom : TRUEatom : FALSEatom : LBRACKET elements RBRACKETatom : IDENTIFIER LBRACKET INTEGER RBRACKETelements : elements INTEGERelements : elements FLOATelements : input_function : INPUT LPAREN IDENTIFIER RPARENoutput_function : PRINT LPAREN term RPAREN'
    
_lr_action_items = {'WHILE':([0,61,88,97,98,101,],[8,8,8,8,-12,8,]),'FOR':([0,61,88,97,98,101,],[9,9,9,9,-12,9,]),'IF':([0,61,88,97,98,101,],[10,10,10,10,-12,10,]),'INPUT':([0,61,88,97,98,101,],[12,12,12,12,-12,12,]),'PRINT':([0,61,88,97,98,101,],[15,15,15,15,-12,15,]),'IDENTIFIER':([0,8,9,10,13,23,26,38,40,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,61,62,88,93,97,98,101,],[14,14,14,14,14,58,58,64,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,14,14,14,14,14,-12,14,]),'MINUS':([0,8,9,10,13,14,16,21,22,23,24,25,26,27,28,29,30,31,32,33,40,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,61,62,65,69,74,75,76,77,78,79,80,81,82,83,88,90,93,97,98,101,],[23,23,23,23,23,-41,-39,53,-29,23,-32,-36,23,-42,-44,-45,-46,-47,-48,-49,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,-37,-41,-38,23,23,-43,-40,53,53,53,53,-30,-31,-33,-34,-35,-50,23,-51,23,23,-12,23,]),'NOT':([0,8,9,10,13,23,26,40,43,44,45,46,47,48,49,50,51,52,53,54,55,56,61,62,88,93,97,98,101,],[26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,-12,26,]),'LPAREN':([0,8,9,10,12,13,15,23,26,40,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,61,62,88,93,97,98,101,],[13,13,13,13,38,13,42,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,-12,13,]),'INTEGER':([0,8,9,10,13,23,26,34,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,60,61,62,84,85,88,93,97,98,101,],[28,28,28,28,28,28,28,-54,28,67,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,84,28,28,-52,-53,28,28,28,-12,28,]),'FLOAT':([0,8,9,10,13,23,26,34,40,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,60,61,62,84,85,88,93,97,98,101,],[29,29,29,29,29,29,29,-54,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,85,29,29,-52,-53,29,29,29,-12,29,]),'CHARACTER':([0,8,9,10,13,23,26,40,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,61,62,88,93,97,98,101,],[30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,-12,30,]),'STRING':([0,8,9,10,13,23,26,40,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,61,62,88,93,97,98,101,],[31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,-12,31,]),'TRUE':([0,8,9,10,13,23,26,40,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,61,62,88,93,97,98,101,],[32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,-12,32,]),'FALSE':([0,8,9,10,13,23,26,40,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,61,62,88,93,97,98,101,],[33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,-12,33,]),'LBRACKET':([0,8,9,10,13,14,23,26,40,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,58,61,62,88,93,97,98,101,],[34,34,34,34,34,41,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,41,34,34,34,34,34,-12,34,]),'$end':([1,2,3,4,5,6,7,11,14,16,17,18,19,20,21,22,24,25,27,28,29,30,31,32,33,57,58,59,65,66,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,89,90,91,92,99,102,105,],[0,-1,-2,-3,-4,-5,-6,-14,-41,-39,-15,-17,-19,-21,-24,-29,-32,-36,-42,-44,-45,-46,-47,-48,-49,-37,-41,-38,-43,-16,-40,-18,-20,-22,-23,-25,-26,-27,-28,-30,-31,-33,-34,-35,-50,-55,-51,-56,-7,-10,-8,-9,]),'ENDWHILE':([2,3,4,5,6,7,11,14,16,17,18,19,20,21,22,24,25,27,28,29,30,31,32,33,57,58,59,65,66,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,86,89,90,91,92,99,102,105,],[-1,-2,-3,-4,-5,-6,-14,-41,-39,-15,-17,-19,-21,-24,-29,-32,-36,-42,-44,-45,-46,-47,-48,-49,-37,-41,-38,-43,-16,-40,-18,-20,-22,-23,-25,-26,-27,-28,-30,-31,-33,-34,-35,-50,92,-55,-51,-56,-7,-10,-8,-9,]),'ELSE':([2,3,4,5,6,7,11,14,16,17,18,19,20,21,22,24,25,27,28,29,30,31,32,33,57,58,59,65,66,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,89,90,91,92,94,96,99,102,105,],[-1,-2,-3,-4,-5,-6,-14,-41,-39,-15,-17,-19,-21,-24,-29,-32,-36,-42,-44,-45,-46,-47,-48,-49,-37,-41,-38,-43,-16,-40,-18,-20,-22,-23,-25,-26,-27,-28,-30,-31,-33,-34,-35,-50,-55,-51,-56,-7,-13,98,-10,-8,-9,]),'ENDIF':([2,3,4,5,6,7,11,14,16,17,18,19,20,21,22,24,25,27,28,29,30,31,32,33,57,58,59,65,66,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,89,90,91,92,94,96,99,102,103,104,105,],[-1,-2,-3,-4,-5,-6,-14,-41,-39,-15,-17,-19,-21,-24,-29,-32,-36,-42,-44,-45,-46,-47,-48,-49,-37,-41,-38,-43,-16,-40,-18,-20,-22,-23,-25,-26,-27,-28,-30,-31,-33,-34,-35,-50,-55,-51,-56,-7,-13,99,-10,-8,-13,105,-9,]),'ENDFOR':([2,3,4,5,6,7,11,14,16,17,18,19,20,21,22,24,25,27,28,29,30,31,32,33,57,58,59,65,66,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,89,90,91,92,99,100,102,105,],[-1,-2,-3,-4,-5,-6,-14,-41,-39,-15,-17,-19,-21,-24,-29,-32,-36,-42,-44,-45,-46,-47,-48,-49,-37,-41,-38,-43,-16,-40,-18,-20,-22,-23,-25,-26,-27,-28,-30,-31,-33,-34,-35,-50,-55,-51,-56,-7,-10,102,-8,-9,]),'COLON':([11,14,16,17,18,19,20,21,22,24,25,27,28,29,30,31,32,33,35,37,57,58,59,63,65,66,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,90,95,],[-14,-41,-39,-15,-17,-19,-21,-24,-29,-32,-36,-42,-44,-45,-46,-47,-48,-49,61,-11,-37,-41,-38,88,-43,-16,-40,-18,-20,-22,-23,-25,-26,-27,-28,-30,-31,-33,-34,-35,-50,-51,97,]),'COMMA':([11,14,16,17,18,19,20,21,22,24,25,27,28,29,30,31,32,33,36,57,58,59,65,66,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,87,90,],[-14,-41,-39,-15,-17,-19,-21,-24,-29,-32,-36,-42,-44,-45,-46,-47,-48,-49,62,-37,-41,-38,-43,-16,-40,-18,-20,-22,-23,-25,-26,-27,-28,-30,-31,-33,-34,-35,-50,93,-51,]),'RPAREN':([11,14,16,17,18,19,20,21,22,24,25,27,28,29,30,31,32,33,39,57,58,59,64,65,66,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,90,],[-14,-41,-39,-15,-17,-19,-21,-24,-29,-32,-36,-42,-44,-45,-46,-47,-48,-49,65,-37,-41,-38,89,-43,-16,91,-40,-18,-20,-22,-23,-25,-26,-27,-28,-30,-31,-33,-34,-35,-50,-51,]),'EQUALS':([14,],[40,]),'POWER':([14,16,27,28,29,30,31,32,33,58,65,83,90,],[-41,43,-42,-44,-45,-46,-47,-48,-49,-41,-43,-50,-51,]),'TIMES':([14,16,22,24,25,27,28,29,30,31,32,33,57,58,59,65,69,78,79,80,81,82,83,90,],[-41,-39,54,-32,-36,-42,-44,-45,-46,-47,-48,-49,-37,-41,-38,-43,-40,54,54,-33,-34,-35,-50,-51,]),'DIVIDE':([14,16,22,24,25,27,28,29,30,31,32,33,57,58,59,65,69,78,79,80,81,82,83,90,],[-41,-39,55,-32,-36,-42,-44,-45,-46,-47,-48,-49,-37,-41,-38,-43,-40,55,55,-33,-34,-35,-50,-51,]),'MOD':([14,16,22,24,25,27,28,29,30,31,32,33,57,58,59,65,69,78,79,80,81,82,83,90,],[-41,-39,56,-32,-36,-42,-44,-45,-46,-47,-48,-49,-37,-41,-38,-43,-40,56,56,-33,-34,-35,-50,-51,]),'PLUS':([14,16,21,22,24,25,27,28,29,30,31,32,33,57,58,59,65,69,74,75,76,77,78,79,80,81,82,83,90,],[-41,-39,52,-29,-32,-36,-42,-44,-45,-46,-47,-48,-49,-37,-41,-38,-43,-40,52,52,52,52,-30,-31,-33,-34,-35,-50,-51,]),'LT':([14,16,20,21,22,24,25,27,28,29,30,31,32,33,57,58,59,65,69,72,73,74,75,76,77,78,79,80,81,82,83,90,],[-41,-39,48,-24,-29,-32,-36,-42,-44,-45,-46,-47,-48,-49,-37,-41,-38,-43,-40,48,48,-25,-26,-27,-28,-30,-31,-33,-34,-35,-50,-51,]),'GT':([14,16,20,21,22,24,25,27,28,29,30,31,32,33,57,58,59,65,69,72,73,74,75,76,77,78,79,80,81,82,83,90,],[-41,-39,49,-24,-29,-32,-36,-42,-44,-45,-46,-47,-48,-49,-37,-41,-38,-43,-40,49,49,-25,-26,-27,-28,-30,-31,-33,-34,-35,-50,-51,]),'LTEQ':([14,16,20,21,22,24,25,27,28,29,30,31,32,33,57,58,59,65,69,72,73,74,75,76,77,78,79,80,81,82,83,90,],[-41,-39,50,-24,-29,-32,-36,-42,-44,-45,-46,-47,-48,-49,-37,-41,-38,-43,-40,50,50,-25,-26,-27,-28,-30,-31,-33,-34,-35,-50,-51,]),'GTEQ':([14,16,20,21,22,24,25,27,28,29,30,31,32,33,57,58,59,65,69,72,73,74,75,76,77,78,79,80,81,82,83,90,],[-41,-39,51,-24,-29,-32,-36,-42,-44,-45,-46,-47,-48,-49,-37,-41,-38,-43,-40,51,51,-25,-26,-27,-28,-30,-31,-33,-34,-35,-50,-51,]),'EQ':([14,16,19,20,21,22,24,25,27,28,29,30,31,32,33,57,58,59,65,69,71,72,73,74,75,76,77,78,79,80,81,82,83,90,],[-41,-39,46,-21,-24,-29,-32,-36,-42,-44,-45,-46,-47,-48,-49,-37,-41,-38,-43,-40,46,-22,-23,-25,-26,-27,-28,-30,-31,-33,-34,-35,-50,-51,]),'NEQ':([14,16,19,20,21,22,24,25,27,28,29,30,31,32,33,57,58,59,65,69,71,72,73,74,75,76,77,78,79,80,81,82,83,90,],[-41,-39,47,-21,-24,-29,-32,-36,-42,-44,-45,-46,-47,-48,-49,-37,-41,-38,-43,-40,47,-22,-23,-25,-26,-27,-28,-30,-31,-33,-34,-35,-50,-51,]),'AND':([14,16,18,19,20,21,22,24,25,27,28,29,30,31,32,33,57,58,59,65,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,90,],[-41,-39,45,-19,-21,-24,-29,-32,-36,-42,-44,-45,-46,-47,-48,-49,-37,-41,-38,-43,-40,45,-20,-22,-23,-25,-26,-27,-28,-30,-31,-33,-34,-35,-50,-51,]),'OR':([14,16,17,18,19,20,21,22,24,25,27,28,29,30,31,32,33,57,58,59,65,66,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,90,],[-41,-39,44,-17,-19,-21,-24,-29,-32,-36,-42,-44,-45,-46,-47,-48,-49,-37,-41,-38,-43,44,-40,-18,-20,-22,-23,-25,-26,-27,-28,-30,-31,-33,-34,-35,-50,-51,]),'RBRACKET':([34,60,67,84,85,],[-54,83,90,-52,-53,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'start':([0,61,88,97,101,],[1,86,94,100,103,]),'code_entity':([0,61,88,97,101,],[2,2,2,2,2,]),'iterative_statement':([0,61,88,97,101,],[3,3,3,3,3,]),'conditional_statement':([0,61,88,97,101,],[4,4,4,4,4,]),'expression':([0,8,9,10,13,61,62,88,93,97,101,],[5,35,36,37,39,5,87,5,95,5,5,]),'input_function':([0,61,88,97,101,],[6,6,6,6,6,]),'output_function':([0,61,88,97,101,],[7,7,7,7,7,]),'assignment_statement':([0,8,9,10,13,61,62,88,93,97,101,],[11,11,11,11,11,11,11,11,11,11,11,]),'term':([0,8,9,10,13,23,26,40,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,61,62,88,93,97,101,],[16,16,16,16,16,16,16,16,68,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,]),'or_statement':([0,8,9,10,13,40,61,62,88,93,97,101,],[17,17,17,17,17,66,17,17,17,17,17,17,]),'and_statement':([0,8,9,10,13,40,44,61,62,88,93,97,101,],[18,18,18,18,18,18,70,18,18,18,18,18,18,]),'equality_statement':([0,8,9,10,13,40,44,45,61,62,88,93,97,101,],[19,19,19,19,19,19,19,71,19,19,19,19,19,19,]),'relational_statement':([0,8,9,10,13,40,44,45,46,47,61,62,88,93,97,101,],[20,20,20,20,20,20,20,20,72,73,20,20,20,20,20,20,]),'add_statement':([0,8,9,10,13,40,44,45,46,47,48,49,50,51,61,62,88,93,97,101,],[21,21,21,21,21,21,21,21,21,21,74,75,76,77,21,21,21,21,21,21,]),'multiply_statement':([0,8,9,10,13,40,44,45,46,47,48,49,50,51,52,53,61,62,88,93,97,101,],[22,22,22,22,22,22,22,22,22,22,22,22,22,22,78,79,22,22,22,22,22,22,]),'unary_statement':([0,8,9,10,13,23,26,40,43,44,45,46,47,48,49,50,51,52,53,54,55,56,61,62,88,93,97,101,],[24,24,24,24,24,57,59,24,69,24,24,24,24,24,24,24,24,24,24,80,81,82,24,24,24,24,24,24,]),'exponent':([0,8,9,10,13,23,26,40,43,44,45,46,47,48,49,50,51,52,53,54,55,56,61,62,88,93,97,101,],[25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,]),'atom':([0,8,9,10,13,23,26,40,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,61,62,88,93,97,101,],[27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,]),'elements':([34,],[60,]),'seen_exp':([37,],[63,]),'seen_start':([94,103,],[96,104,]),'seen_else':([98,],[101,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> start","S'",1,None,None,None),
  ('start -> code_entity','start',1,'p_start','smol.py',135),
  ('code_entity -> iterative_statement','code_entity',1,'p_code_entity','smol.py',145),
  ('code_entity -> conditional_statement','code_entity',1,'p_code_entity','smol.py',146),
  ('code_entity -> expression','code_entity',1,'p_code_entity','smol.py',147),
  ('code_entity -> input_function','code_entity',1,'p_code_entity','smol.py',148),
  ('code_entity -> output_function','code_entity',1,'p_code_entity','smol.py',149),
  ('iterative_statement -> WHILE expression COLON start ENDWHILE','iterative_statement',5,'p_iterative_statement_1','smol.py',156),
  ('iterative_statement -> FOR expression COMMA expression COMMA expression COLON start ENDFOR','iterative_statement',9,'p_iterative_statement_2','smol.py',161),
  ('conditional_statement -> IF expression seen_exp COLON start seen_start ELSE seen_else start seen_start ENDIF','conditional_statement',11,'p_conditional_statement_1','smol.py',167),
  ('conditional_statement -> IF expression seen_exp COLON start seen_start ENDIF','conditional_statement',7,'p_conditional_statement_2','smol.py',174),
  ('seen_exp -> <empty>','seen_exp',0,'p_seen_exp','smol.py',182),
  ('seen_else -> <empty>','seen_else',0,'p_seen_else','smol.py',188),
  ('seen_start -> <empty>','seen_start',0,'p_seen_start','smol.py',194),
  ('expression -> assignment_statement','expression',1,'p_expression','smol.py',201),
  ('assignment_statement -> or_statement','assignment_statement',1,'p_assignment_statement_1','smol.py',208),
  ('assignment_statement -> IDENTIFIER EQUALS or_statement','assignment_statement',3,'p_assignment_statement_2','smol.py',212),
  ('or_statement -> and_statement','or_statement',1,'p_or_statement_1','smol.py',222),
  ('or_statement -> or_statement OR and_statement','or_statement',3,'p_or_statement_2','smol.py',226),
  ('and_statement -> equality_statement','and_statement',1,'p_and_statement_1','smol.py',236),
  ('and_statement -> and_statement AND equality_statement','and_statement',3,'p_and_statement_2','smol.py',240),
  ('equality_statement -> relational_statement','equality_statement',1,'p_equality_statement_1','smol.py',251),
  ('equality_statement -> equality_statement EQ relational_statement','equality_statement',3,'p_equality_statement_2','smol.py',255),
  ('equality_statement -> equality_statement NEQ relational_statement','equality_statement',3,'p_equality_statement_2','smol.py',256),
  ('relational_statement -> add_statement','relational_statement',1,'p_relational_statement_1','smol.py',272),
  ('relational_statement -> relational_statement LT add_statement','relational_statement',3,'p_relational_statement_2','smol.py',276),
  ('relational_statement -> relational_statement GT add_statement','relational_statement',3,'p_relational_statement_2','smol.py',277),
  ('relational_statement -> relational_statement LTEQ add_statement','relational_statement',3,'p_relational_statement_2','smol.py',278),
  ('relational_statement -> relational_statement GTEQ add_statement','relational_statement',3,'p_relational_statement_2','smol.py',279),
  ('add_statement -> multiply_statement','add_statement',1,'p_add_statement_1','smol.py',297),
  ('add_statement -> add_statement PLUS multiply_statement','add_statement',3,'p_add_statement_2','smol.py',301),
  ('add_statement -> add_statement MINUS multiply_statement','add_statement',3,'p_add_statement_2','smol.py',302),
  ('multiply_statement -> unary_statement','multiply_statement',1,'p_multiply_statement_1','smol.py',317),
  ('multiply_statement -> multiply_statement TIMES unary_statement','multiply_statement',3,'p_multiply_statement_2','smol.py',321),
  ('multiply_statement -> multiply_statement DIVIDE unary_statement','multiply_statement',3,'p_multiply_statement_2','smol.py',322),
  ('multiply_statement -> multiply_statement MOD unary_statement','multiply_statement',3,'p_multiply_statement_2','smol.py',323),
  ('unary_statement -> exponent','unary_statement',1,'p_unary_statement_1','smol.py',339),
  ('unary_statement -> MINUS unary_statement','unary_statement',2,'p_unary_statement_2','smol.py',343),
  ('unary_statement -> NOT unary_statement','unary_statement',2,'p_unary_statement_2','smol.py',344),
  ('exponent -> term','exponent',1,'p_exponent_1','smol.py',354),
  ('exponent -> term POWER unary_statement','exponent',3,'p_exponent_2','smol.py',358),
  ('term -> IDENTIFIER','term',1,'p_term_1','smol.py',366),
  ('term -> atom','term',1,'p_term_2','smol.py',373),
  ('term -> LPAREN expression RPAREN','term',3,'p_term_3','smol.py',377),
  ('atom -> INTEGER','atom',1,'p_atom1','smol.py',389),
  ('atom -> FLOAT','atom',1,'p_atom2','smol.py',393),
  ('atom -> CHARACTER','atom',1,'p_atom3','smol.py',397),
  ('atom -> STRING','atom',1,'p_atom4','smol.py',401),
  ('atom -> TRUE','atom',1,'p_atom5','smol.py',405),
  ('atom -> FALSE','atom',1,'p_atom6','smol.py',409),
  ('atom -> LBRACKET elements RBRACKET','atom',3,'p_atom7','smol.py',416),
  ('atom -> IDENTIFIER LBRACKET INTEGER RBRACKET','atom',4,'p_atom8','smol.py',422),
  ('elements -> elements INTEGER','elements',2,'p_elements1','smol.py',435),
  ('elements -> elements FLOAT','elements',2,'p_elements2','smol.py',440),
  ('elements -> <empty>','elements',0,'p_elements3','smol.py',445),
  ('input_function -> INPUT LPAREN IDENTIFIER RPAREN','input_function',4,'p_input_function','smol.py',451),
  ('output_function -> PRINT LPAREN term RPAREN','output_function',4,'p_output_function','smol.py',468),
]
